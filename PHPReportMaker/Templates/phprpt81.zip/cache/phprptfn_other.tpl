function ewExphprptfn() {
 try {
var ewAr = new Array();
var ewSB = new StringBuilder();
ew_SetLocale();
ew_LoadCurrent();
ewAr[1] = ""+"\r\n"+"";
ewAr[2] = ""+"\r\n"+"";
ewAr[3] = ""+"\r\n"+"<?php"+"\r\n"+""+"\r\n"+"// Functions for PHP Report Maker 8"+"\r\n"+"// (C) 2007-2014 e.World Technology Limited"+"\r\n"+""+"\r\n"+"";
ewAr[4] = ""+"\r\n"+"// Auto load class"+"\r\n"+"function ewr_AutoLoad($class) {"+"\r\n"+"	global $EWR_RELATIVE_PATH;"+"\r\n"+"	if (substr($class, 0, 2) == \"cr\") {"+"\r\n"+"";
ewAr[5] = ""+"\r\n"+"		if ($class == \"cr";
ewAr[6] = "_db\") {"+"\r\n"+"			$file = \"";
ewAr[7] = "\";"+"\r\n"+"		} else {"+"\r\n"+"";
ewAr[8] = ""+"\r\n"+"		$fn = \"";
ewAr[9] = "\";"+"\r\n"+"		$file = str_replace(\"%cls%\", substr($class, 2), $fn);"+"\r\n"+"	";
ewAr[10] = ""+"\r\n"+"		$file = strtolower($file);"+"\r\n"+"	";
ewAr[11] = ""+"\r\n"+"";
ewAr[12] = ""+"\r\n"+"		}"+"\r\n"+"";
ewAr[13] = ""+"\r\n"+"		if (file_exists($EWR_RELATIVE_PATH . $file))"+"\r\n"+"			include $EWR_RELATIVE_PATH . $file;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"spl_autoload_register(\"ewr_AutoLoad\");"+"\r\n"+""+"\r\n"+"if (!function_exists(\"G\")) {"+"\r\n"+"	function &G($name) {"+"\r\n"+"		return $GLOBALS[$name];"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get connection object"+"\r\n"+"if (!function_exists(\"Conn\")) {"+"\r\n"+"	function &Conn() {"+"\r\n"+"    	return $GLOBALS[\"conn\"];"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get security object"+"\r\n"+"if (!function_exists(\"Security\")) {"+"\r\n"+"	function &Security() {"+"\r\n"+"    	return $GLOBALS[\"Security\"];"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get language object"+"\r\n"+"if (!function_exists(\"Language\")) {"+"\r\n"+"	function &Language() {"+"\r\n"+"    	return $GLOBALS[\"ReportLanguage\"];"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get breadcrumb object"+"\r\n"+"if (!function_exists(\"Breadcrumb\")) {"+"\r\n"+"	function &Breadcrumb() {"+"\r\n"+"    	return $GLOBALS[\"ReportBreadcrumb\"];"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Is admin"+"\r\n"+"if (!function_exists(\"IsAdmin\")) {"+"\r\n"+"	function IsAdmin() {"+"\r\n"+"		global $Security;"+"\r\n"+"		return (isset($Security)) ? $Security->IsAdmin() : (@$_SESSION[EWR_SESSION_SYS_ADMIN] == 1);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current project ID"+"\r\n"+"function CurrentProjectID() {"+"\r\n"+"	if (isset($GLOBALS[\"Page\"]))"+"\r\n"+"		return $GLOBALS[\"Page\"]->ProjectID;"+"\r\n"+"	return \"";
ewAr[14] = "\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current page object"+"\r\n"+"function &CurrentPage() {"+"\r\n"+"	return $GLOBALS[\"Page\"];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current main table object"+"\r\n"+"function &CurrentTable() {"+"\r\n"+"	return $GLOBALS[\"Table\"];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Langauge class for reports"+"\r\n"+" */"+"\r\n"+"class crLanguage {"+"\r\n"+"	var $LanguageId;"+"\r\n"+"	var $Phrases = NULL;"+"\r\n"+"	var $LanguageFolder = EWR_LANGUAGE_FOLDER;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($langfolder = \"\", $langid = \"\") {"+"\r\n"+"		global $gsLanguage;"+"\r\n"+"		if ($langfolder <> \"\")"+"\r\n"+"			$this->LanguageFolder = $langfolder;"+"\r\n"+"		$this->LoadFileList(); // Set up file list"+"\r\n"+"		if ($langid <> \"\") { // Set up language id"+"\r\n"+"			$this->LanguageId = $langid;"+"\r\n"+"			$_SESSION[EWR_SESSION_LANGUAGE_ID] = $this->LanguageId;"+"\r\n"+"		} elseif (@$_GET[\"language\"] <> \"\") {"+"\r\n"+"			$this->LanguageId = $_GET[\"language\"];"+"\r\n"+"			$_SESSION[EWR_SESSION_LANGUAGE_ID] = $this->LanguageId;"+"\r\n"+"		} elseif (@$_SESSION[EWR_SESSION_LANGUAGE_ID] <> \"\") {"+"\r\n"+"			$this->LanguageId = $_SESSION[EWR_SESSION_LANGUAGE_ID];"+"\r\n"+"		} else {"+"\r\n"+"			$this->LanguageId = EWR_LANGUAGE_DEFAULT_ID;"+"\r\n"+"		}"+"\r\n"+"		$gsLanguage = $this->LanguageId;"+"\r\n"+"		$this->Load($this->LanguageId);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load language file list"+"\r\n"+"	function LoadFileList() {"+"\r\n"+"		global $EWR_LANGUAGE_FILE;"+"\r\n"+"		if (is_array($EWR_LANGUAGE_FILE)) {"+"\r\n"+"			$cnt = count($EWR_LANGUAGE_FILE);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++)"+"\r\n"+"				$EWR_LANGUAGE_FILE[$i][1] = $this->LoadFileDesc($this->LanguageFolder . $EWR_LANGUAGE_FILE[$i][2]);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load language file description"+"\r\n"+"	function LoadFileDesc($File) {"+"\r\n"+"		if (EWR_USE_DOM_XML) {"+"\r\n"+"			$this->Phrases = new crXMLDocument();"+"\r\n"+"			if ($this->Phrases->Load($File))"+"\r\n"+"				return $this->GetNodeAtt($this->Phrases->DocumentElement(), \"desc\");"+"\r\n"+"		} else {"+"\r\n"+"			$ar = ewr_Xml2Array(substr(file_get_contents($File), 0, 512)); // Just read the first part"+"\r\n"+"			return (is_array($ar)) ? @$ar['ew-language']['attr']['desc'] : \"\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load language file"+"\r\n"+"	function Load($id) {"+"\r\n"+"		global $EWR_DEFAULT_DECIMAL_POINT, $EWR_DEFAULT_THOUSANDS_SEP, $EWR_DEFAULT_MON_DECIMAL_POINT, $EWR_DEFAULT_MON_THOUSANDS_SEP,"+"\r\n"+"		$EWR_DEFAULT_CURRENCY_SYMBOL, $EWR_DEFAULT_POSITIVE_SIGN, $EWR_DEFAULT_NEGATIVE_SIGN, $EWR_DEFAULT_FRAC_DIGITS,"+"\r\n"+"		$EWR_DEFAULT_P_CS_PRECEDES, $EWR_DEFAULT_P_SEP_BY_SPACE, $EWR_DEFAULT_N_CS_PRECEDES, $EWR_DEFAULT_N_SEP_BY_SPACE,"+"\r\n"+"		$EWR_DEFAULT_P_SIGN_POSN, $EWR_DEFAULT_N_SIGN_POSN, $EWR_DEFAULT_LOCALE, $EWR_DEFAULT_TIME_ZONE;"+"\r\n"+""+"\r\n"+"		$sFileName = $this->GetFileName($id);"+"\r\n"+"		if ($sFileName == \"\")"+"\r\n"+"			$sFileName = $this->GetFileName(EWR_LANGUAGE_DEFAULT_ID);"+"\r\n"+"		if ($sFileName == \"\")"+"\r\n"+"			return;"+"\r\n"+"		if (EWR_USE_DOM_XML) {"+"\r\n"+"			$this->Phrases = new crXMLDocument();"+"\r\n"+"			$this->Phrases->Load($sFileName);"+"\r\n"+"		} else {"+"\r\n"+"			if (is_array(@$_SESSION[EWR_PROJECT_NAME . \"_\" . $sFileName])) {"+"\r\n"+"				$this->Phrases = $_SESSION[EWR_PROJECT_NAME . \"_\" . $sFileName];"+"\r\n"+"			} else {"+"\r\n"+"				$this->Phrases = ewr_Xml2Array(file_get_contents($sFileName));"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Set up locale / currency format for language"+"\r\n"+"		if ($this->LocalePhrase(\"use_system_locale\") == \"1\") { // Use system locale"+"\r\n"+"			$langLocale = $this->LocalePhrase(\"locale\");"+"\r\n"+"			if ($langLocale <> \"\")"+"\r\n"+"				@setlocale(LC_ALL, $langLocale); // Set language locale"+"\r\n"+"			extract(ewr_LocaleConv());"+"\r\n"+"			if (!empty($decimal_point)) $EWR_DEFAULT_DECIMAL_POINT = $decimal_point;"+"\r\n"+"			if (!empty($thousands_sep)) $EWR_DEFAULT_THOUSANDS_SEP = $thousands_sep;"+"\r\n"+"			if (!empty($mon_decimal_point)) $EWR_DEFAULT_MON_DECIMAL_POINT = $mon_decimal_point;"+"\r\n"+"			if (empty($EWR_DEFAULT_MON_DECIMAL_POINT)) $EWR_DEFAULT_MON_DECIMAL_POINT = $EWR_DEFAULT_DECIMAL_POINT;"+"\r\n"+"			if (!empty($mon_thousands_sep)) $EWR_DEFAULT_MON_THOUSANDS_SEP = $mon_thousands_sep;"+"\r\n"+"			if (empty($EWR_DEFAULT_MON_THOUSANDS_SEP)) $EWR_DEFAULT_MON_THOUSANDS_SEP = $EWR_DEFAULT_THOUSANDS_SEP;"+"\r\n"+"			if (!empty($currency_symbol)) {"+"\r\n"+"				if (EWR_CHARSET == \"utf-8\") {"+"\r\n"+"					if ($int_curr_symbol == \"EUR\" && ord($currency_symbol) == 128) {"+"\r\n"+"						$currency_symbol = \"\\xe2\\x82\\xac\";"+"\r\n"+"					} elseif ($int_curr_symbol == \"GBP\" && ord($currency_symbol) == 163) {"+"\r\n"+"						$currency_symbol = \"\\xc2\\xa3\";"+"\r\n"+"					} elseif ($int_curr_symbol == \"JPY\" && ord($currency_symbol) == 92) {"+"\r\n"+"						$currency_symbol = \"\\xc2\\xa5\";"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				$EWR_DEFAULT_CURRENCY_SYMBOL = $currency_symbol;"+"\r\n"+"			}"+"\r\n"+"			if (!empty($positive_sign)) $EWR_DEFAULT_POSITIVE_SIGN = $positive_sign;"+"\r\n"+"			if (!empty($negative_sign)) $EWR_DEFAULT_NEGATIVE_SIGN = $negative_sign;"+"\r\n"+"			if (!empty($frac_digits) && $frac_digits <> CHAR_MAX) $EWR_DEFAULT_FRAC_DIGITS = $frac_digits;"+"\r\n"+"			if (!empty($p_cs_precedes) && $p_cs_precedes <> CHAR_MAX) $EWR_DEFAULT_P_CS_PRECEDES = $p_cs_precedes;"+"\r\n"+"			if (!empty($p_sep_by_space) && $p_sep_by_space <> CHAR_MAX) $EWR_DEFAULT_P_SEP_BY_SPACE = $p_sep_by_space;"+"\r\n"+"			if (!empty($n_cs_precedes) && $n_cs_precedes <> CHAR_MAX) $EWR_DEFAULT_N_CS_PRECEDES = $n_cs_precedes;"+"\r\n"+"			if (!empty($n_sep_by_space) && $n_sep_by_space <> CHAR_MAX) $EWR_DEFAULT_N_SEP_BY_SPACE = $n_sep_by_space;"+"\r\n"+"			if (!empty($p_sign_posn) && $p_sign_posn <> CHAR_MAX) $EWR_DEFAULT_P_SIGN_POSN = $p_sign_posn;"+"\r\n"+"			if (!empty($n_sign_posn) && $n_sign_posn <> CHAR_MAX) $EWR_DEFAULT_N_SIGN_POSN = $n_sign_posn;"+"\r\n"+"		} else { // Use language file"+"\r\n"+"			$ar = array(\"p_cs_precedes\", \"p_sep_by_space\", \"n_cs_precedes\", \"n_sep_by_space\");"+"\r\n"+"			foreach ($EWR_DEFAULT_LOCALE as $key => $value) {"+"\r\n"+"				if ($this->LocalePhrase($key) <> \"\")"+"\r\n"+"					$EWR_DEFAULT_LOCALE[$key] = in_array($key, $ar) ? $this->LocalePhrase($key) == \"1\" : $this->LocalePhrase($key);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	";
ewAr[15] = ""+"\r\n"+"		/**"+"\r\n"+"		 * Time zone"+"\r\n"+"		 * Read http://www.php.net/date_default_timezone_set for details"+"\r\n"+"		 * and http://www.php.net/timezones for supported time zones"+"\r\n"+"		*/"+"\r\n"+"		// Set up time zone from language file for multi-language site"+"\r\n"+"		if ($this->LocalePhrase(\"time_zone\") <> \"\") $EWR_DEFAULT_TIME_ZONE = $this->LocalePhrase(\"time_zone\");"+"\r\n"+"		if (function_exists(\"date_default_timezone_set\") && $EWR_DEFAULT_TIME_ZONE <> \"\")"+"\r\n"+"			date_default_timezone_set($EWR_DEFAULT_TIME_ZONE);"+"\r\n"+"	";
ewAr[16] = ""+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get language file name"+"\r\n"+"	function GetFileName($Id) {"+"\r\n"+"		global $EWR_LANGUAGE_FILE;"+"\r\n"+"		if (is_array($EWR_LANGUAGE_FILE)) {"+"\r\n"+"			$cnt = count($EWR_LANGUAGE_FILE);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++)"+"\r\n"+"				if ($EWR_LANGUAGE_FILE[$i][0] == $Id) {"+"\r\n"+"					return $this->LanguageFolder . $EWR_LANGUAGE_FILE[$i][2];"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get node attribute"+"\r\n"+"	function GetNodeAtt($Nodes, $Att) {"+"\r\n"+"		$value = ($Nodes) ? $this->Phrases->GetAttribute($Nodes, $Att) : \"\";"+"\r\n"+"		//return ewr_ConvertFromUtf8($value);"+"\r\n"+"		return $value;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set node attribute"+"\r\n"+"	function SetNodeAtt($Nodes, $Att, $Value) {"+"\r\n"+"		if ($Nodes)"+"\r\n"+"			$this->Phrases->SetAttribute($Nodes, $Att, $Value);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get locale phrase"+"\r\n"+"	function LocalePhrase($Id) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//locale/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return ewr_ConvertFromUtf8(@$this->Phrases['ew-language']['locale']['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set locale phrase"+"\r\n"+"	function setLocalePhrase($Id, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$this->SetNodeAtt($this->Phrases->SelectSingleNode(\"//locale/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\", $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['locale']['phrase'][strtolower($Id)]['attr']['value'] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get phrase"+"\r\n"+"	function Phrase($Id, $UseText = FALSE) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$ImageUrl = $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\"), \"imageurl\");"+"\r\n"+"			$ImageWidth = $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\"), \"imagewidth\");"+"\r\n"+"			$ImageHeight = $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\"), \"imageheight\");"+"\r\n"+"			$ImageClass = $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\"), \"class\");"+"\r\n"+"			$Text = $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$ImageUrl = ewr_ConvertFromUtf8(@$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr']['imageurl']);"+"\r\n"+"			$ImageWidth = ewr_ConvertFromUtf8(@$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr']['imagewidth']);"+"\r\n"+"			$ImageHeight = ewr_ConvertFromUtf8(@$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr']['imageheight']);"+"\r\n"+"			$ImageClass = ewr_ConvertFromUtf8(@$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr']['class']);"+"\r\n"+"			$Text = ewr_ConvertFromUtf8(@$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"		if (!$UseText && $ImageClass <> \"\") {"+"\r\n"+"			return \"<span data-phrase=\\\"\" . $Id . \"\\\" class=\\\"\" . $ImageClass . \"\\\" data-caption=\\\"\" . ewr_HtmlEncode($Text) . \"\\\"></span>\";"+"\r\n"+"		} elseif (!$UseText && $ImageUrl <> \"\") {"+"\r\n"+"			$style = ($ImageWidth <> \"\") ? \"width: \" . $ImageWidth . \"px;\" : \"\";"+"\r\n"+"			$style .= ($ImageHeight <> \"\") ? \"height: \" . $ImageHeight . \"px;\" : \"\";"+"\r\n"+"			return \"<img data-phrase=\\\"\" . $Id . \"\\\" src=\\\"\" . ewr_HtmlEncode($ImageUrl) . \"\\\" style=\\\"\" . $style . \"\\\" alt=\\\"\" . ewr_HtmlEncode($Text) . \"\\\" title=\\\"\" . ewr_HtmlEncode($Text) . \"\\\">\";"+"\r\n"+"		} else {"+"\r\n"+"			return $Text;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set phrase"+"\r\n"+"	function setPhrase($Id, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$this->SetNodeAtt($this->Phrases->SelectSingleNode(\"//global/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\", $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['global']['phrase'][strtolower($Id)]['attr']['value'] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get project phrase"+"\r\n"+"	function ProjectPhrase($Id) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//project/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return ewr_ConvertFromUtf8(@$this->Phrases['ew-language']['project']['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set project phrase"+"\r\n"+"	function setProjectPhrase($Id, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$this->SetNodeAtt($this->Phrases->SelectSingleNode(\"//project/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\", $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['project']['phrase'][strtolower($Id)]['attr']['value'] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get menu phrase"+"\r\n"+"	function MenuPhrase($MenuId, $Id) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//project/menu[@id='\" . $MenuId . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return ewr_ConvertFromUtf8(@$this->Phrases['ew-language']['project']['menu'][$MenuId]['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set menu phrase"+"\r\n"+"	function setMenuPhrase($MenuId, $Id, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$this->SetNodeAtt($this->Phrases->SelectSingleNode(\"//project/menu[@id='\" . $MenuId . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\", $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['project']['menu'][$MenuId]['phrase'][strtolower($Id)]['attr']['value'] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get table phrase"+"\r\n"+"	function TablePhrase($TblVar, $Id) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//project/table[@id='\" . strtolower($TblVar) . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return ewr_ConvertFromUtf8(@$this->Phrases['ew-language']['project']['table'][strtolower($TblVar)]['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set table phrase"+"\r\n"+"	function setTablePhrase($TblVar, $Id, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$this->SetNodeAtt($this->Phrases->SelectSingleNode(\"//project/table[@id='\" . strtolower($TblVar) . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\", $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['project']['table'][strtolower($TblVar)]['phrase'][strtolower($Id)]['attr']['value'] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get chart phrase"+"\r\n"+"	function ChartPhrase($TblVar, $ChtVar, $Id) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//project/table[@id='\" . strtolower($TblVar) . \"']/chart[@id='\" . strtolower($ChtVar) . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return ewr_ConvertFromUtf8(@$this->Phrases['ew-language']['project']['table'][strtolower($TblVar)]['chart'][strtolower($ChtVar)]['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set chart phrase"+"\r\n"+"	function setChartPhrase($TblVar, $FldVar, $Id, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$this->SetNodeAtt($this->Phrases->SelectSingleNode(\"//project/table[@id='\" . strtolower($TblVar) . \"']/chart[@id='\" . strtolower($ChtVar) . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\", $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['project']['table'][strtolower($TblVar)]['chart'][strtolower($FldVar)]['phrase'][strtolower($Id)]['attr']['value'] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get field phrase"+"\r\n"+"	function FieldPhrase($TblVar, $FldVar, $Id) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return $this->GetNodeAtt($this->Phrases->SelectSingleNode(\"//project/table[@id='\" . strtolower($TblVar) . \"']/field[@id='\" . strtolower($FldVar) . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\");"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return ewr_ConvertFromUtf8(@$this->Phrases['ew-language']['project']['table'][strtolower($TblVar)]['field'][strtolower($FldVar)]['phrase'][strtolower($Id)]['attr']['value']);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set field phrase"+"\r\n"+"	function setFieldPhrase($TblVar, $FldVar, $Id, $Value) {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			$this->SetNodeAtt($this->Phrases->SelectSingleNode(\"//project/table[@id='\" . strtolower($TblVar) . \"']/field[@id='\" . strtolower($FldVar) . \"']/phrase[@id='\" . strtolower($Id) . \"']\"), \"value\", $Value);"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			$this->Phrases['ew-language']['project']['table'][strtolower($TblVar)]['field'][strtolower($FldVar)]['phrase'][strtolower($Id)]['attr']['value'] = $Value;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Output XML as JSON"+"\r\n"+"	function XmlToJSON($XPath) {"+"\r\n"+"		$NodeList = $this->Phrases->SelectNodes($XPath);"+"\r\n"+"		$Str = \"{\";"+"\r\n"+"		foreach ($NodeList as $Node) {"+"\r\n"+"			$Id = $this->GetNodeAtt($Node, \"id\");"+"\r\n"+"			$Value = $this->GetNodeAtt($Node, \"value\");"+"\r\n"+"			$Str .= \"\\\"\" . ewr_JsEncode2($Id) . \"\\\":\\\"\" . ewr_JsEncode2($Value) . \"\\\",\";"+"\r\n"+"		}"+"\r\n"+"		if (substr($Str, -1) == \",\") $Str = substr($Str, 0, strlen($Str)-1);"+"\r\n"+"		$Str .= \"}\";"+"\r\n"+"		return $Str;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Output array as JSON"+"\r\n"+"	function ArrayToJSON($client) {"+"\r\n"+"		$ar = @$this->Phrases['ew-language']['global']['phrase'];"+"\r\n"+"		$Str = \"{\";"+"\r\n"+"		if (is_array($ar)) {"+"\r\n"+"			foreach ($ar as $id => $node) {"+"\r\n"+"				$is_client = @$node['attr']['client'] == '1';"+"\r\n"+"				$value = ewr_ConvertFromUtf8(@$node['attr']['value']);"+"\r\n"+"				if (!$client || ($client && $is_client))"+"\r\n"+"					$Str .= \"\\\"\" . ewr_JsEncode2($id) . \"\\\":\\\"\" . ewr_JsEncode2($value) . \"\\\",\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if (substr($Str, -1) == \",\") $Str = substr($Str, 0, strlen($Str)-1);"+"\r\n"+"		$Str .= \"}\";"+"\r\n"+"		return $Str;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Output all phrases as JSON"+"\r\n"+"	function AllToJSON() {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return \"var ewLanguage = new ewr_Language(\" . $this->XmlToJSON(\"//global/phrase\") . \");\";"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return \"var ewLanguage = new ewr_Language(\" . $this->ArrayToJSON(FALSE) . \");\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Output client phrases as JSON"+"\r\n"+"	function ToJSON() {"+"\r\n"+"		if (is_object($this->Phrases)) {"+"\r\n"+"			return \"var ewLanguage = new ewr_Language(\" . $this->XmlToJSON(\"//global/phrase[@client='1']\") . \");\";"+"\r\n"+"		} elseif (is_array($this->Phrases)) {"+"\r\n"+"			return \"var ewLanguage = new ewr_Language(\" . $this->ArrayToJSON(TRUE) . \");\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Output language selection form"+"\r\n"+"	function SelectionForm() {"+"\r\n"+"		global $EWR_LANGUAGE_FILE, $gsLanguage;"+"\r\n"+"		$form = \"\";"+"\r\n"+"		if (is_array($EWR_LANGUAGE_FILE)) {"+"\r\n"+"			$cnt = count($EWR_LANGUAGE_FILE);"+"\r\n"+"			if ($cnt > 1) {"+"\r\n"+"				for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"					$langid = $EWR_LANGUAGE_FILE[$i][0];"+"\r\n"+"					$langphrase = $EWR_LANGUAGE_FILE[$i][1];"+"\r\n"+"					$selected = ($langid == $gsLanguage) ? \" selected=\\\"selected\\\"\" : \"\";"+"\r\n"+"					$phrase = $this->Phrase($langid);"+"\r\n"+"					if ($phrase == \"\") // Use description for button"+"\r\n"+"						$phrase = $langphrase;"+"\r\n"+"					$form .= \"<option value=\\\"\" . $langid . \"\\\"\" . $selected . \">\" . $phrase . \"</option>\";"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($form <> \"\")"+"\r\n"+"			$form = \"<div class=\\\"ewLanguageOption\\\"><select class=\\\"form-control\\\" id=\\\"ewLanguage\\\" name=\\\"ewLanguage\\\" onchange=\\\"ewr_SetLanguage(this);\\\">\" . $form . \"</select></div>\";"+"\r\n"+"		return $form;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get numeric formatting information"+"\r\n"+"function ewr_LocaleConv() {"+"\r\n"+"	$info = defined(\"EWR_REPORT_DEFAULT_LOCALE\") ? json_decode(EWR_REPORT_DEFAULT_LOCALE, TRUE) : NULL;"+"\r\n"+"	return ($info) ? $info : localeconv();"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert XML to array"+"\r\n"+"function ewr_Xml2Array($contents) {"+"\r\n"+"	if (!$contents) return array(); "+"\r\n"+"	"+"\r\n"+"	if (!function_exists('xml_parser_create')) return FALSE;"+"\r\n"+"	"+"\r\n"+"	$get_attributes = 1; // Always get attributes. DO NOT CHANGE!"+"\r\n"+""+"\r\n"+"	// Get the XML Parser of PHP"+"\r\n"+"	$parser = xml_parser_create();"+"\r\n"+"	xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, \"UTF-8\"); // Always return in utf-8"+"\r\n"+"	xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);"+"\r\n"+"	xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);"+"\r\n"+"	xml_parse_into_struct($parser, trim($contents), $xml_values);"+"\r\n"+"	xml_parser_free($parser);"+"\r\n"+"	"+"\r\n"+"	if (!$xml_values) return;"+"\r\n"+"	"+"\r\n"+"	$xml_array = array();"+"\r\n"+"	$parents = array();"+"\r\n"+"	$opened_tags = array();"+"\r\n"+"	$arr = array();"+"\r\n"+"	"+"\r\n"+"	$current = &$xml_array;"+"\r\n"+"	"+"\r\n"+"	$repeated_tag_index = array(); // Multiple tags with same name will be turned into an array"+"\r\n"+"	"+"\r\n"+"	foreach ($xml_values as $data) {"+"\r\n"+"	"+"\r\n"+"		unset($attributes, $value); // Remove existing values"+"\r\n"+"		"+"\r\n"+"		// Extract these variables into the foreach scope"+"\r\n"+"		// - tag(string), type(string), level(int), attributes(array)"+"\r\n"+"		extract($data);"+"\r\n"+"		"+"\r\n"+"		$result = array();"+"\r\n"+"		 "+"\r\n"+"		if (isset($value))"+"\r\n"+"			$result['value'] = $value; // Put the value in a assoc array"+"\r\n"+"		"+"\r\n"+"		// Set the attributes"+"\r\n"+"		if (isset($attributes) and $get_attributes) {"+"\r\n"+"			foreach ($attributes as $attr => $val)"+"\r\n"+"				$result['attr'][$attr] = $val; // Set all the attributes in a array called 'attr'"+"\r\n"+"		} "+"\r\n"+"		"+"\r\n"+"		// See tag status and do the needed"+"\r\n"+"		if ($type == \"open\") { // The starting of the tag '<tag>'"+"\r\n"+"		"+"\r\n"+"			$parent[$level-1] = &$current;"+"\r\n"+"			if (!is_array($current) || !in_array($tag, array_keys($current))) { // Insert New tag"+"\r\n"+"				if ($tag <> 'ew-language' && @$result['attr']['id'] <> '') { // "+"\r\n"+"					$last_item_index = $result['attr']['id'];"+"\r\n"+"					$current[$tag][$last_item_index] = $result;"+"\r\n"+"					$repeated_tag_index[$tag.'_'.$level] = 1;"+"\r\n"+"					$current = &$current[$tag][$last_item_index];"+"\r\n"+"				} else {"+"\r\n"+"					$current[$tag] = $result;"+"\r\n"+"					$repeated_tag_index[$tag.'_'.$level] = 0;"+"\r\n"+"					$current = &$current[$tag];"+"\r\n"+"				}"+"\r\n"+"			} else { // Another element with the same tag name"+"\r\n"+"				if ($repeated_tag_index[$tag.'_'.$level] > 0) { // If there is a 0th element it is already an array"+"\r\n"+"					if (@$result['attr']['id'] <> '') {"+"\r\n"+"						$last_item_index = $result['attr']['id'];"+"\r\n"+"					} else {"+"\r\n"+"						$last_item_index = $repeated_tag_index[$tag.'_'.$level];"+"\r\n"+"					}"+"\r\n"+"					$current[$tag][$last_item_index] = $result;"+"\r\n"+"					$repeated_tag_index[$tag.'_'.$level]++;"+"\r\n"+"				} else { // Make the value an array if multiple tags with the same name appear together"+"\r\n"+"					$temp = $current[$tag];"+"\r\n"+"					$current[$tag] = array();"+"\r\n"+"					if (@$temp['attr']['id'] <> '') {"+"\r\n"+"						$current[$tag][$temp['attr']['id']] = $temp;"+"\r\n"+"					} else {"+"\r\n"+"						$current[$tag][] = $temp;"+"\r\n"+"					}"+"\r\n"+"					if (@$result['attr']['id'] <> '') {"+"\r\n"+"						$last_item_index = $result['attr']['id'];"+"\r\n"+"					} else {"+"\r\n"+"						$last_item_index = 1;"+"\r\n"+"					}"+"\r\n"+"					$current[$tag][$last_item_index] = $result;"+"\r\n"+"					$repeated_tag_index[$tag.'_'.$level] = 2;"+"\r\n"+"				} "+"\r\n"+"				$current = &$current[$tag][$last_item_index];"+"\r\n"+"			}"+"\r\n"+"		"+"\r\n"+"		} elseif ($type == \"complete\") { // Tags that ends in one line '<tag />'"+"\r\n"+"		"+"\r\n"+"			if (!isset($current[$tag])) { // New key"+"\r\n"+"				$current[$tag] = array(); // Always use array for \"complete\" type"+"\r\n"+"				if (@$result['attr']['id'] <> '') {"+"\r\n"+"					$current[$tag][$result['attr']['id']] = $result;"+"\r\n"+"				} else {"+"\r\n"+"					$current[$tag][] = $result;"+"\r\n"+"				}"+"\r\n"+"				$repeated_tag_index[$tag.'_'.$level] = 1;"+"\r\n"+"			} else { // Existing key"+"\r\n"+"				if (@$result['attr']['id'] <> '') {"+"\r\n"+"			  	$current[$tag][$result['attr']['id']] = $result;"+"\r\n"+"				} else {"+"\r\n"+"					$current[$tag][$repeated_tag_index[$tag.'_'.$level]] = $result;"+"\r\n"+"				}"+"\r\n"+"			  $repeated_tag_index[$tag.'_'.$level]++;"+"\r\n"+"			}"+"\r\n"+"		"+"\r\n"+"		} elseif ($type == 'close') { // End of tag '</tag>'"+"\r\n"+"			$current = &$parent[$level-1];"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	 "+"\r\n"+"	return($xml_array);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * XML document class"+"\r\n"+" */"+"\r\n"+"class crXMLDocument {"+"\r\n"+"	var $Encoding = \"utf-8\";"+"\r\n"+"	var $RootTagName;"+"\r\n"+"	var $RowTagName;"+"\r\n"+"	var $XmlDoc = FALSE;"+"\r\n"+"	var $XmlTbl;"+"\r\n"+"	var $XmlRow;"+"\r\n"+"	var $NullValue = 'NULL';"+"\r\n"+""+"\r\n"+"	function __construct($encoding = \"\") {"+"\r\n"+"		if ($encoding <> \"\")"+"\r\n"+"			$this->Encoding = $encoding;"+"\r\n"+"		if ($this->Encoding <> \"\") {"+"\r\n"+"			$this->XmlDoc = new DOMDocument(\"1.0\", strval($this->Encoding));"+"\r\n"+"		} else {"+"\r\n"+"			$this->XmlDoc = new DOMDocument(\"1.0\");"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	function Load($filename) {"+"\r\n"+"		$filepath = realpath($filename);"+"\r\n"+"		return $this->XmlDoc->load($filepath);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function &DocumentElement() {"+"\r\n"+"		$de = $this->XmlDoc->documentElement;"+"\r\n"+"		return $de;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function GetAttribute($element, $name) {"+"\r\n"+"		return ($element) ? ewr_ConvertFromUtf8($element->getAttribute($name)) : \"\";"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function SetAttribute($element, $name, $value) {"+"\r\n"+"		if ($element)"+"\r\n"+"			$element->setAttribute($name, ewr_ConvertToUtf8($value));"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function SelectSingleNode($query) {"+"\r\n"+"		$elements = $this->SelectNodes($query);"+"\r\n"+"		return ($elements->length > 0) ? $elements->item(0) : NULL;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function SelectNodes($query) {"+"\r\n"+"		$xpath = new DOMXPath($this->XmlDoc);"+"\r\n"+"		return $xpath->query($query);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function AddRoot($roottagname = 'table') {"+"\r\n"+"		$this->RootTagName = $roottagname;"+"\r\n"+"		$this->XmlTbl = $this->XmlDoc->createElement($this->RootTagName);"+"\r\n"+"		$this->XmlDoc->appendChild($this->XmlTbl);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	function AddRow($rowtagname = 'row') {"+"\r\n"+"		$this->RowTagName = $rowtagname;"+"\r\n"+"		$this->XmlRow = $this->XmlDoc->createElement($this->RowTagName);"+"\r\n"+"		if ($this->XmlTbl)"+"\r\n"+"			$this->XmlTbl->appendChild($this->XmlRow);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	function AddField($name, $value) {"+"\r\n"+"		if (is_null($value)) $value = $this->NullValue;"+"\r\n"+"		$value = ewr_ConvertToUtf8($value); // Convert to UTF-8"+"\r\n"+"		$xmlfld = $this->XmlDoc->createElement($name);"+"\r\n"+"		$this->XmlRow->appendChild($xmlfld);"+"\r\n"+"		$xmlfld->appendChild($this->XmlDoc->createTextNode($value));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	function XML() {"+"\r\n"+"		return $this->XmlDoc->saveXML();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Select nodes from XML document"+"\r\n"+"function &ewr_SelectNodes(&$xmldoc, $query) {"+"\r\n"+"	if ($xmldoc) {"+"\r\n"+"		$xpath = new DOMXPath($xmldoc);"+"\r\n"+"		return $xpath->query($query);"+"\r\n"+"	}"+"\r\n"+"	return NULL;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Select single node from XML document"+"\r\n"+"function &ewr_SelectSingleNode(&$xmldoc, $query) {"+"\r\n"+"	$elements = ewr_SelectNodes($xmldoc, $query);"+"\r\n"+"	return ($elements && $elements->length > 0) ? $elements->item(0) : NULL;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Debug timer"+"\r\n"+"class crTimer {"+"\r\n"+"	var $StartTime;"+"\r\n"+"	var $EndTime;"+"\r\n"+"	"+"\r\n"+"	function __construct($start = TRUE) {"+"\r\n"+"		if ($start)"+"\r\n"+"			$this->Start();"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function GetTime() {"+"\r\n"+"		list($usec, $sec) = explode(\" \", microtime());"+"\r\n"+"		return ((float)$usec + (float)$sec);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get script start time"+"\r\n"+"	function Start() {"+"\r\n"+"		if (EWR_DEBUG_ENABLED)"+"\r\n"+"			$this->StartTime = $this->GetTime();"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Display elapsed time (in seconds)"+"\r\n"+"	function Stop() {"+"\r\n"+"		if (EWR_DEBUG_ENABLED)"+"\r\n"+"			$this->EndTime = $this->GetTime();"+"\r\n"+"		if (isset($this->EndTime) && isset($this->StartTime) &&"+"\r\n"+"			$this->EndTime > $this->StartTime)"+"\r\n"+"			echo '<p>Page processing time: ' . ($this->EndTime - $this->StartTime) . ' seconds</p>';"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Breadcrumb class"+"\r\n"+" */"+"\r\n"+"class crBreadcrumb {"+"\r\n"+"	var $Links = array();"+"\r\n"+"	var $SessionLinks = array();"+"\r\n"+"	var $Visible = TRUE;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct() {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		$this->Links[] = array(\"home\", \"HomePage\", \"";
ewAr[17] = "\", \"ewHome\", \"\", FALSE); // Home"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if an item exists"+"\r\n"+"	function Exists($pageid, $table, $pageurl) {"+"\r\n"+"		if (is_array($this->Links)) {"+"\r\n"+"			$cnt = count($this->Links);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				@list($id, $title, $url, $tablevar, $cur) = $this->Links[$i];"+"\r\n"+"				if ($pageid == $id && $table == $tablevar && $pageurl == $url)"+"\r\n"+"					return TRUE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add breadcrumb"+"\r\n"+"	function Add($pageid, $pagetitle, $pageurl, $pageurlclass = \"\", $table = \"\", $current = FALSE) {"+"\r\n"+""+"\r\n"+"		// Load session links"+"\r\n"+"		$this->LoadSession();"+"\r\n"+""+"\r\n"+"		// Get list of master tables"+"\r\n"+"		$mastertable = array();"+"\r\n"+"		if ($table <> \"\") {"+"\r\n"+"			$tablevar = $table;"+"\r\n"+"			while (@$_SESSION[EWR_PROJECT_NAME . \"_\" . $tablevar . \"_\" . EWR_TABLE_MASTER_TABLE] <> \"\") {"+"\r\n"+"				$tablevar = $_SESSION[EWR_PROJECT_NAME . \"_\" . $tablevar . \"_\" . EWR_TABLE_MASTER_TABLE];"+"\r\n"+"				if (in_array($tablevar, $mastertable))"+"\r\n"+"					break;"+"\r\n"+"				$mastertable[] = $tablevar;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Add master links first"+"\r\n"+"		if (is_array($this->SessionLinks)) {"+"\r\n"+"			$cnt = count($this->SessionLinks);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				@list($id, $title, $url, $cls, $tbl, $cur) = $this->SessionLinks[$i];"+"\r\n"+"				if (in_array($tbl, $mastertable)) {"+"\r\n"+"					if ($url == $pageurl)"+"\r\n"+"						break;"+"\r\n"+"					if (!$this->Exists($id, $tbl, $url))"+"\r\n"+"						$this->Links[] = array($id, $title, $url, $cls, $tbl, FALSE);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Add this link"+"\r\n"+"		if (!$this->Exists($pageid, $table, $pageurl))"+"\r\n"+"			$this->Links[] = array($pageid, $pagetitle, $pageurl, $pageurlclass, $table, $current);"+"\r\n"+""+"\r\n"+"		// Save session links"+"\r\n"+"		$this->SaveSession();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Save links to Session"+"\r\n"+"	function SaveSession() {"+"\r\n"+"		$_SESSION[EWR_SESSION_BREADCRUMB] = $this->Links;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load links from Session"+"\r\n"+"	function LoadSession() {"+"\r\n"+"		if (is_array(@$_SESSION[EWR_SESSION_BREADCRUMB]))"+"\r\n"+"			$this->SessionLinks = $_SESSION[EWR_SESSION_BREADCRUMB];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load language phrase"+"\r\n"+"	function LanguagePhrase($title, $table, $current) {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		$wrktitle = ($title == $table) ? $ReportLanguage->TablePhrase($title, \"TblCaption\") : $ReportLanguage->Phrase($title);"+"\r\n"+"		if ($current)"+"\r\n"+"			$wrktitle = \"<span id=\\\"ewPageCaption\\\">\" . $wrktitle . \"</span>\";"+"\r\n"+"		return $wrktitle;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Render"+"\r\n"+"	function Render() {"+"\r\n"+"		if (!$this->Visible)"+"\r\n"+"			return;"+"\r\n"+"		$nav = \"<ul class=\\\"breadcrumb\\\">\";"+"\r\n"+"		if (is_array($this->Links)) {"+"\r\n"+"			$cnt = count($this->Links);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				list($id, $title, $url, $cls, $table, $cur) = $this->Links[$i];"+"\r\n"+"				if ($i < $cnt - 1) {"+"\r\n"+"					$nav .= \"<li>\";"+"\r\n"+"				} else {"+"\r\n"+"					$nav .= \"<li class=\\\"active\\\">\";"+"\r\n"+"					$url = \"\"; // No need to show url for current page"+"\r\n"+"				}"+"\r\n"+"				$text = $this->LanguagePhrase($title, $table, $cur);"+"\r\n"+"				$title = ewr_HtmlTitle($text);"+"\r\n"+"				if ($url <> \"\") {"+"\r\n"+"					$nav .= \"<a href=\\\"\" . ewr_GetUrl($url) . \"\\\"\";"+"\r\n"+"					if ($title <> \"\" && $title <> $text)"+"\r\n"+"						$nav .= \" title=\\\"\" . ewr_HtmlEncode($title) . \"\\\"\";"+"\r\n"+"					if ($cls <> \"\")"+"\r\n"+"						$nav .= \" class=\\\"\" . $cls . \"\\\"\";"+"\r\n"+"					$nav .= \">\" . $text . \"</a>\";"+"\r\n"+"				} else {"+"\r\n"+"					$nav .= $text;"+"\r\n"+"				}"+"\r\n"+"				$nav .= \"</li>\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$nav .= \"</ul>\";"+"\r\n"+"		echo $nav;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Table classes"+"\r\n"+" */"+"\r\n"+"// Common class for table and report"+"\r\n"+"class crTableBase {"+"\r\n"+""+"\r\n"+"	var $TableVar;"+"\r\n"+"	var $TableName;"+"\r\n"+"	var $TableType;"+"\r\n"+"	var $TableCaption = \"\";"+"\r\n"+""+"\r\n"+"	var $ShowCurrentFilter = EWR_SHOW_CURRENT_FILTER;"+"\r\n"+"	var $ShowDrillDownFilter = EWR_SHOW_DRILLDOWN_FILTER;"+"\r\n"+""+"\r\n"+"	var $CurrentOrder; // Current order"+"\r\n"+"	var $CurrentOrderType; // Current order type"+"\r\n"+""+"\r\n"+"	var $UseDrillDownPanel = EWR_USE_DRILLDOWN_PANEL; // Use drill down panel"+"\r\n"+""+"\r\n"+"	// Set table caption"+"\r\n"+"	function setTableCaption($v) {"+"\r\n"+"		$this->TableCaption = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Table caption"+"\r\n"+"	function TableCaption() {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		if ($this->TableCaption <> \"\")"+"\r\n"+"			return $this->TableCaption;"+"\r\n"+"		else"+"\r\n"+"			return $ReportLanguage->TablePhrase($this->TableVar, \"TblCaption\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session Group Per Page"+"\r\n"+"	function getGroupPerPage() {"+"\r\n"+"		return @$_SESSION[EWR_PROJECT_VAR . \"_\" . $this->TableVar . \"_grpperpage\"];"+"\r\n"+"	}"+"\r\n"+"	function setGroupPerPage($v) {"+"\r\n"+"		@$_SESSION[EWR_PROJECT_VAR . \"_\" . $this->TableVar . \"_grpperpage\"] = $v;"+"\r\n"+"	}"+"\r\n"+"	// Session Start Group"+"\r\n"+"	function getStartGroup() {"+"\r\n"+"		return @$_SESSION[EWR_PROJECT_VAR . \"_\" . $this->TableVar . \"_start\"];"+"\r\n"+"	}"+"\r\n"+"	function setStartGroup($v) {"+"\r\n"+"		@$_SESSION[EWR_PROJECT_VAR . \"_\" . $this->TableVar . \"_start\"] = $v;"+"\r\n"+"	}"+"\r\n"+"	// Session Order By"+"\r\n"+"	function getOrderBy() {"+"\r\n"+"		return @$_SESSION[EWR_PROJECT_VAR . \"_\" . $this->TableVar . \"_orderby\"];"+"\r\n"+"	}"+"\r\n"+"	function setOrderBy($v) {"+"\r\n"+"		@$_SESSION[EWR_PROJECT_VAR . \"_\" . $this->TableVar . \"_orderby\"] = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	var $fields = array();"+"\r\n"+"	var $Export; // Export"+"\r\n"+"	var $CustomExport; // Custom export"+"\r\n"+"	var $FirstRowData = array(); // First row data"+"\r\n"+"	var $ExportAll;"+"\r\n"+"	var $ExportPageBreakCount = 1; // Export page break count"+"\r\n"+"	var $ExportChartPageBreak = TRUE; // Page break for chart when export"+"\r\n"+"	var $PageBreakContent = EWR_EXPORT_PAGE_BREAK_CONTENT;"+"\r\n"+""+"\r\n"+"	var $UseTokenInUrl = EWR_USE_TOKEN_IN_URL;"+"\r\n"+""+"\r\n"+"	var $RowType; // Row type"+"\r\n"+"	var $RowTotalType; // Row total type"+"\r\n"+"	var $RowTotalSubType; // Row total subtype"+"\r\n"+"	var $RowGroupLevel; // Row group level"+"\r\n"+"	var $RowAttrs = array(); // Row attributes"+"\r\n"+""+"\r\n"+"	// Reset attributes for table object"+"\r\n"+"	function ResetAttrs() {"+"\r\n"+"		$this->RowAttrs = array();"+"\r\n"+"		foreach ($this->fields as $fld) {"+"\r\n"+"			$fld->ResetAttrs();"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Row attributes"+"\r\n"+"	function RowAttributes() {"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		foreach ($this->RowAttrs as $k => $v) {"+"\r\n"+"			$sAtt .= \" \" . $k . \"=\\\"\" . ewr_HtmlEncode($v) . \"\\\"\";"+"\r\n"+"		}"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Field object by fldvar"+"\r\n"+"	function &fields($fldvar) {"+"\r\n"+"		return $this->fields[$fldvar];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// URL encode"+"\r\n"+"	function UrlEncode($str) {"+"\r\n"+"		return urlencode($str);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Print"+"\r\n"+"	function Raw($str) {"+"\r\n"+"		return $str;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+"// Class for crosstab"+"\r\n"+"class crTableCrosstab extends crTableBase {"+"\r\n"+""+"\r\n"+"	// Summary cells"+"\r\n"+"	var $SummaryCellAttrs;"+"\r\n"+"	var $SummaryViewAttrs;"+"\r\n"+"	var $SummaryLinkAttrs;"+"\r\n"+"	var $SummaryCurrentValue;"+"\r\n"+"	var $SummaryViewValue;"+"\r\n"+"	var $CurrentIndex = -1;"+"\r\n"+""+"\r\n"+"	// Summary cell attributes"+"\r\n"+"	function SummaryCellAttributes($i) {"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		if (is_array($this->SummaryCellAttrs)) {"+"\r\n"+"			if ($i >= 0 && $i < count($this->SummaryCellAttrs)) {"+"\r\n"+"				$Attrs = $this->SummaryCellAttrs[$i];"+"\r\n"+"				if (is_array($Attrs)) {"+"\r\n"+"					foreach ($Attrs as $k => $v) {"+"\r\n"+"						if (trim($v) <> \"\")"+"\r\n"+"							$sAtt .= \" \" . $k . \"=\\\"\" . trim($v) . \"\\\"\";"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Summary view attributes"+"\r\n"+"	function SummaryViewAttributes($i) {"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		if (is_array($this->SummaryViewAttrs)) {"+"\r\n"+"			if ($i >= 0 && $i < count($this->SummaryViewAttrs)) {"+"\r\n"+"				$Attrs = $this->SummaryViewAttrs[$i];"+"\r\n"+"				if (is_array($Attrs)) {"+"\r\n"+"					foreach ($Attrs as $k => $v) {"+"\r\n"+"						if (trim($v) <> \"\")"+"\r\n"+"							$sAtt .= \" \" . $k . \"=\\\"\" . trim($v) . \"\\\"\";"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Summary link attributes"+"\r\n"+"	function SummaryLinkAttributes($i) {"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		if (is_array($this->SummaryLinkAttrs)) {"+"\r\n"+"			if ($i >= 0 && $i < count($this->SummaryLinkAttrs)) {"+"\r\n"+"				$Attrs = $this->SummaryLinkAttrs[$i];"+"\r\n"+"				if (is_array($Attrs)) {"+"\r\n"+"					foreach ($Attrs as $k => $v) {"+"\r\n"+"						if (trim($v) <> \"\") {"+"\r\n"+"							$sAtt .= \" \" . $k . \"=\\\"\" . trim($v) . \"\\\"\";"+"\r\n"+"						}"+"\r\n"+"					}"+"\r\n"+"					if (@$Attrs[\"onclick\"] <> \"\" && @$Attrs[\"href\"] == \"\")"+"\r\n"+"						$sAtt .= \" href=\\\"javascript:void(0);\\\"\";"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Field class"+"\r\n"+" */"+"\r\n"+"class crField {"+"\r\n"+""+"\r\n"+"	var $TblName; // Table name"+"\r\n"+"	var $TblVar; // Table variable name"+"\r\n"+"	var $FldName; // Field name"+"\r\n"+"	var $FldVar; // Field variable name"+"\r\n"+"	var $FldExpression; // Field expression (used in SQL)"+"\r\n"+"	var $FldDefaultErrMsg; // Default error message"+"\r\n"+"	var $FldType; // Field type"+"\r\n"+"	var $FldDataType; // PHP Report Maker Field type"+"\r\n"+"	var $FldDateTimeFormat; // Date time format"+"\r\n"+"	var $Count; // Count"+"\r\n"+"	var $SumValue; // Sum"+"\r\n"+"	var $AvgValue; // Average"+"\r\n"+"	var $MinValue; // Minimum"+"\r\n"+"	var $MaxValue; // Maximum"+"\r\n"+"	var $CntValue; // Count"+"\r\n"+"	var $SumViewValue; // Sum"+"\r\n"+"	var $AvgViewValue; // Average"+"\r\n"+"	var $MinViewValue; // Minimum"+"\r\n"+"	var $MaxViewValue; // Maximum"+"\r\n"+"	var $CntViewValue; // Count"+"\r\n"+"	var $OldValue; // Old Value"+"\r\n"+"	var $CurrentValue; // Current value"+"\r\n"+"	var $ViewValue; // View value"+"\r\n"+"	var $HrefValue; // Href value"+"\r\n"+"	var $DrillDownUrl = \"\"; // Drill down URL"+"\r\n"+"	var $CurrentFilter = \"\"; // Current filter in use"+"\r\n"+"	var $FormValue; // Form value"+"\r\n"+"	var $QueryStringValue; // QueryString value"+"\r\n"+"	var $DbValue; // Database value"+"\r\n"+"	var $ImageWidth = 0; // Image width"+"\r\n"+"	var $ImageHeight = 0; // Image height"+"\r\n"+"	var $ImageResize = FALSE; // Image resize"+"\r\n"+"	var $ResizeQuality = EWR_THUMBNAIL_DEFAULT_QUALITY; // Resize quality"+"\r\n"+"	var $IsBlobImage = FALSE; // Is blob image"+"\r\n"+"	var $Sortable = TRUE; // Sortable"+"\r\n"+"	var $GroupingFieldId = 0; // Grouping field id"+"\r\n"+"	var $UploadPath = EWR_UPLOAD_DEST_PATH; // Upload path"+"\r\n"+"	var $TruncateMemoRemoveHtml = FALSE; // Remove HTML from memo field"+"\r\n"+"	var $DefaultDecimalPrecision = EWR_DEFAULT_DECIMAL_PRECISION;"+"\r\n"+"	var $UseColorbox = EWR_USE_COLORBOX; // Use Colorbox"+"\r\n"+""+"\r\n"+"	var $CellAttrs = array(); // Cell attributes"+"\r\n"+"	var $ViewAttrs = array(); // View attributes"+"\r\n"+"	var $LinkAttrs = array(); // Href attributes"+"\r\n"+"	var $EditAttrs = array(); // Edit attributes"+"\r\n"+"	var $PlaceHolder = \"\";"+"\r\n"+""+"\r\n"+"	var $FldGroupByType; // Group By Type"+"\r\n"+"	var $FldGroupInt; // Group Interval"+"\r\n"+"	var $FldGroupSql; // Group SQL"+"\r\n"+"	var $GroupDbValues; // Group DB Values"+"\r\n"+"	var $GroupViewValue; // Group View Value"+"\r\n"+"	var $GroupSummaryOldValue; // Group Summary Old Value"+"\r\n"+"	var $GroupSummaryValue; // Group Summary Value"+"\r\n"+"	var $GroupSummaryViewValue; // Group Summary View Value"+"\r\n"+"	var $SqlSelect; // Field SELECT"+"\r\n"+"	var $SqlGroupBy; // Field GROUP BY"+"\r\n"+"	var $SqlOrderBy; // Field ORDER BY"+"\r\n"+"	var $ValueList; // Value List"+"\r\n"+"	var $SelectionList; // Selection List"+"\r\n"+"	var $DefaultSelectionList; // Default Selection List"+"\r\n"+"	var $AdvancedFilters; // Advanced Filters"+"\r\n"+"	var $RangeFrom; // Range From"+"\r\n"+"	var $RangeTo; // Range To"+"\r\n"+"	var $DropDownList; // Dropdown List"+"\r\n"+"	var $DropDownValue; // Dropdown Value"+"\r\n"+"	var $DefaultDropDownValue; // Default Dropdown Value"+"\r\n"+"	var $DateFilter; // Date Filter"+"\r\n"+"	var $SearchValue; // Search Value 1"+"\r\n"+"	var $SearchValue2; // Search Value 2"+"\r\n"+"	var $SearchOperator; // Search Operator 1"+"\r\n"+"	var $SearchOperator2; // Search Operator 2"+"\r\n"+"	var $SearchCondition; // Search Condition"+"\r\n"+"	var $DefaultSearchValue; // Default Search Value 1"+"\r\n"+"	var $DefaultSearchValue2; // Default Search Value 2"+"\r\n"+"	var $DefaultSearchOperator; // Default Search Operator 1"+"\r\n"+"	var $DefaultSearchOperator2; // Default Search Operator 2"+"\r\n"+"	var $DefaultSearchCondition; // Default Search Condition"+"\r\n"+"	var $FldDelimiter = \"\"; // Field delimiter (e.g. comma) for delimiter separated value"+"\r\n"+"	var $Visible = TRUE; // Visible"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($tblvar, $tblname, $fldvar, $fldname, $fldexpression, $fldtype, $flddatatype, $flddtfmt) {"+"\r\n"+"		$this->TblVar = $tblvar;"+"\r\n"+"		$this->TblName = $tblname;"+"\r\n"+"		$this->FldVar = $fldvar;"+"\r\n"+"		$this->FldName = $fldname;"+"\r\n"+"		$this->FldExpression = $fldexpression;"+"\r\n"+"		$this->FldType = $fldtype;"+"\r\n"+"		$this->FldDataType = $flddatatype;"+"\r\n"+"		$this->FldDateTimeFormat = $flddtfmt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	var $Caption = \"\";"+"\r\n"+""+"\r\n"+"	// Set field caption"+"\r\n"+"	function setFldCaption($v) {"+"\r\n"+"		$this->Caption = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Field caption"+"\r\n"+"	function FldCaption() {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		if ($this->Caption <> \"\")"+"\r\n"+"			return $this->Caption;"+"\r\n"+"		else"+"\r\n"+"			return $ReportLanguage->FieldPhrase($this->TblVar, substr($this->FldVar, 2), \"FldCaption\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Field title"+"\r\n"+"	function FldTitle() {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		return $ReportLanguage->FieldPhrase($this->TblVar, substr($this->FldVar, 2), \"FldTitle\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Field image alt"+"\r\n"+"	function FldAlt() {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		return $ReportLanguage->FieldPhrase($this->TblVar, substr($this->FldVar, 2), \"FldAlt\");"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Field error message"+"\r\n"+"	function FldErrMsg() {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		$err = $ReportLanguage->FieldPhrase($this->TblVar, substr($this->FldVar, 2), \"FldErrMsg\");"+"\r\n"+"		if ($err == \"\") $err = $this->FldDefaultErrMsg . \" - \" . $this->FldCaption();"+"\r\n"+"		return $err;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Reset attributes for field object"+"\r\n"+"	function ResetAttrs() {"+"\r\n"+"		$this->CellAttrs = array();"+"\r\n"+"		$this->ViewAttrs = array();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// View Attributes"+"\r\n"+"	function ViewAttributes() {"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		$sStyle = \"\";"+"\r\n"+"		if (intval($this->ImageWidth) > 0 && (!$this->ImageResize || ($this->ImageResize && intval($this->ImageHeight) <= 0)))"+"\r\n"+"			$sStyle .= \"width: \" . intval($this->ImageWidth) . \"px; \";"+"\r\n"+"		if (intval($this->ImageHeight) > 0 && (!$this->ImageResize || ($this->ImageResize && intval($this->ImageWidth) <= 0)))"+"\r\n"+"			$sStyle .= \"height: \" . intval($this->ImageHeight) . \"px; \";"+"\r\n"+"		$sStyle = trim($sStyle);"+"\r\n"+"		if (@$this->ViewAttrs[\"style\"] <> \"\")"+"\r\n"+"			$sStyle .= \" \" . $this->ViewAttrs[\"style\"];"+"\r\n"+"		if (trim($sStyle) <> \"\")"+"\r\n"+"			$sAtt .= \" style=\\\"\" . trim($sStyle) . \"\\\"\";"+"\r\n"+"		foreach ($this->ViewAttrs as $k => $v) {"+"\r\n"+"			if ($k <> \"style\" && trim($v) <> \"\")"+"\r\n"+"				$sAtt .= \" \" . $k . \"=\\\"\" . trim($v) . \"\\\"\";"+"\r\n"+"		}"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Link Attributes"+"\r\n"+"	function LinkAttributes() {"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		$sHref = trim($this->HrefValue);"+"\r\n"+"		foreach ($this->LinkAttrs as $k => $v) {"+"\r\n"+"			if (trim($v) <> \"\") {"+"\r\n"+"				if ($k == \"href\") {"+"\r\n"+"					if ($sHref == \"\")"+"\r\n"+"						$sHref = $v;"+"\r\n"+"				} else {"+"\r\n"+"					$sAtt .= \" \" . $k . \"=\\\"\" . trim($v) . \"\\\"\";"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($sHref <> \"\")"+"\r\n"+"			$sAtt .= \" href=\\\"\" . trim($sHref) . \"\\\"\";"+"\r\n"+"		elseif (trim(@$this->LinkAttrs[\"onclick\"]) <> \"\")"+"\r\n"+"			$sAtt .= \" href=\\\"javascript:void(0);\\\"\";"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Cell attributes"+"\r\n"+"	function CellAttributes() {"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		foreach ($this->CellAttrs as $k => $v) {"+"\r\n"+"			if (trim($v) <> \"\")"+"\r\n"+"				$sAtt .= \" \" . $k . \"=\\\"\" . trim($v) . \"\\\"\";"+"\r\n"+"		}"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Edit Attributes"+"\r\n"+"	function EditAttributes() {"+"\r\n"+"		$sAtt = \"\";"+"\r\n"+"		foreach ($this->EditAttrs as $k => $v) {"+"\r\n"+"			if (trim($v) <> \"\")"+"\r\n"+"				$sAtt .= \" \" . $k . \"=\\\"\" . trim($v) . \"\\\"\";"+"\r\n"+"		}"+"\r\n"+"		return $sAtt;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Sort"+"\r\n"+"	function getSort() {"+"\r\n"+"		return @$_SESSION[EWR_PROJECT_VAR . \"_\" . $this->TblVar . \"_\" . EWR_TABLE_SORT . \"_\" . $this->FldVar];"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function setSort($v) {"+"\r\n"+"		if (@$_SESSION[EWR_PROJECT_VAR . \"_\" . $this->TblVar . \"_\" . EWR_TABLE_SORT . \"_\" . $this->FldVar] <> $v) {"+"\r\n"+"			$_SESSION[EWR_PROJECT_VAR . \"_\" . $this->TblVar . \"_\" . EWR_TABLE_SORT . \"_\" . $this->FldVar] = $v;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function ReverseSort() {"+"\r\n"+"		return ($this->getSort() == \"ASC\") ? \"DESC\" : \"ASC\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// List view value"+"\r\n"+"	function ListViewValue() {"+"\r\n"+"		$value = trim(strval($this->ViewValue));"+"\r\n"+"		if ($value <> \"\") {"+"\r\n"+"			$value2 = trim(preg_replace('/<[^img][^>]*>/i', '', strval($value)));"+"\r\n"+"			return ($value2 <> \"\") ? $this->ViewValue : \"&nbsp;\";"+"\r\n"+"		} else {"+"\r\n"+"			return \"&nbsp;\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Form value"+"\r\n"+"	function setFormValue($v) {"+"\r\n"+"		$this->FormValue = ewr_StripSlashes($v);"+"\r\n"+"		if (is_array($this->FormValue))"+"\r\n"+"			$this->FormValue = implode(\",\", $this->FormValue);"+"\r\n"+"		$this->CurrentValue = $this->FormValue;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// QueryString value"+"\r\n"+"	function setQueryStringValue($v) {"+"\r\n"+"		$this->QueryStringValue = ewr_StripSlashes($v);"+"\r\n"+"		$this->CurrentValue = $this->QueryStringValue;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Database value"+"\r\n"+"	function setDbValue($v) {"+"\r\n"+"		$this->OldValue = $this->DbValue;"+"\r\n"+"		if (EWR_IS_MSSQL && ($this->FldType == 131 || $this->FldType == 139)) // MS SQL adNumeric/adVarNumeric field"+"\r\n"+"			$this->DbValue = floatval($v);"+"\r\n"+"		else"+"\r\n"+"			$this->DbValue = $v;"+"\r\n"+"		$this->CurrentValue = $this->DbValue;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Group value"+"\r\n"+"	function GroupValue() {"+"\r\n"+"		return $this->getGroupValue($this->CurrentValue);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Group old value"+"\r\n"+"	function GroupOldValue() {"+"\r\n"+"		return $this->getGroupValue($this->OldValue);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get group value"+"\r\n"+"	function getGroupValue($v) {"+"\r\n"+"		if ($this->GroupingFieldId == 1) {"+"\r\n"+"			return $v;"+"\r\n"+"		} elseif (is_array($this->GroupDbValues)) {"+"\r\n"+"			return @$this->GroupDbValues[$v];"+"\r\n"+"		} elseif ($this->FldGroupByType <> \"\" && $this->FldGroupByType <> \"n\") {"+"\r\n"+"			return ewr_GroupValue($this, $v);"+"\r\n"+"		} else {"+"\r\n"+"			return $v;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get temp image"+"\r\n"+"	function GetTempImage() {"+"\r\n"+"		if ($this->FldDataType == EWR_DATATYPE_BLOB) {"+"\r\n"+"			$wrkdata = $this->DbValue;"+"\r\n"+"			if (!empty($wrkdata)) {"+"\r\n"+"				if ($this->ImageResize) {"+"\r\n"+"					$wrkwidth = $this->ImageWidth;"+"\r\n"+"					$wrkheight = $this->ImageHeight;"+"\r\n"+"					ewr_ResizeBinary($wrkdata, $wrkwidth, $wrkheight, $this->ResizeQuality);"+"\r\n"+"				}"+"\r\n"+"				return ewr_TmpImage($wrkdata);"+"\r\n"+"			}"+"\r\n"+"		} else {"+"\r\n"+"			$wrkfile = $this->DbValue;"+"\r\n"+"			if (empty($wrkfile)) $wrkfile = $this->CurrentValue;"+"\r\n"+"			if (!empty($wrkfile)) {"+"\r\n"+"				$tmpfiles = explode(EWR_MULTIPLE_UPLOAD_SEPARATOR, $wrkfile);"+"\r\n"+"				$tmpimage = \"\";"+"\r\n"+"				foreach ($tmpfiles as $tmpfile) {"+"\r\n"+"					if ($tmpfile <> \"\") {"+"\r\n"+"						$imagefn = ewr_UploadPathEx(TRUE, $this->UploadPath) . $tmpfile;"+"\r\n"+"						if ($this->ImageResize) {"+"\r\n"+"							$wrkwidth = $this->ImageWidth;"+"\r\n"+"							$wrkheight = $this->ImageHeight;"+"\r\n"+"							$wrkdata = ewr_ResizeFileToBinary($imagefn, $wrkwidth, $wrkheight, $this->ResizeQuality);"+"\r\n"+"							if ($tmpimage <> \"\")"+"\r\n"+"								$tmpimage .= \",\";"+"\r\n"+"							$tmpimage .= ewr_TmpImage($wrkdata);"+"\r\n"+"						} else {"+"\r\n"+"							if ($tmpimage <> \"\")"+"\r\n"+"								$tmpimage .= \",\";"+"\r\n"+"							$tmpimage .= ewr_ConvertFullUrl($this->UploadPath . $tmpfile);"+"\r\n"+"						}"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				return $tmpimage;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Javascript for drill down"+"\r\n"+"function ewr_DrillDownJs($url, $id, $hdr, $usepanel = TRUE, $objid = \"\", $event = TRUE) {"+"\r\n"+"	if (trim($url) == \"\") {"+"\r\n"+"		return \"\";"+"\r\n"+"	} else {"+"\r\n"+"		if ($usepanel) {"+"\r\n"+"			$obj = ($objid == \"\") ? \"this\" : \"'\" . ewr_JsEncode($objid) . \"'\";"+"\r\n"+"			if ($event) {"+"\r\n"+"				$wrkurl = preg_replace('/&(?!amp;)/', '&amp;', $url); // Replace & to &amp;"+"\r\n"+"				return \"ewr_ShowDrillDown(event, \" . $obj . \", '\" . ewr_JsEncode($wrkurl) . \"', '\" . ewr_JsEncode($id) . \"', '\" . ewr_JsEncode($hdr) . \"'); return false;\";"+"\r\n"+"			} else {"+"\r\n"+"				return \"ewr_ShowDrillDown(null, \" . $obj . \", '\" . ewr_JsEncode($url) . \"', '\" . ewr_JsEncode($id) . \"', '\" . ewr_JsEncode($hdr) . \"');\";"+"\r\n"+"			}"+"\r\n"+"		} else {"+"\r\n"+"			$wrkurl = str_replace(\"?d=1&\", \"?d=2&\", $url); // Change d parameter to 2"+"\r\n"+"			return \"ewr_Redirect('\" . ewr_JsEncode($wrkurl) . \"');\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Chart class"+"\r\n"+" */"+"\r\n"+"class crChart {"+"\r\n"+""+"\r\n"+"	var $TblName; // Table name"+"\r\n"+"	var $TblVar; // Table variable name"+"\r\n"+"	var $ChartName; // Chart name"+"\r\n"+"	var $ChartVar; // Chart variable name"+"\r\n"+"	var $ChartXFldName; // Chart X Field name"+"\r\n"+"	var $ChartYFldName; // Chart Y Field name"+"\r\n"+"	var $ChartSFldName; // Chart Series Field name"+"\r\n"+"	var $ChartType; // Chart Type"+"\r\n"+"	var $ChartSortType; // Chart Sort Type"+"\r\n"+"	var $ChartSummaryType; // Chart Summary Type"+"\r\n"+"	var $ChartWidth; // Chart Width"+"\r\n"+"	var $ChartHeight; // Chart Height"+"\r\n"+"	var $ChartGridHeight = 200; // Chart grid height"+"\r\n"+"	var $ChartGridConfig;"+"\r\n"+"	var $ChartAlign; // Chart Align"+"\r\n"+"	var $ChartDrillDownUrl = \"\"; // Chart drill down URL"+"\r\n"+"	var $UseDrillDownPanel = EWR_USE_DRILLDOWN_PANEL; // Use drill down panel"+"\r\n"+"	var $ChartDefaultDecimalPrecision = EWR_DEFAULT_DECIMAL_PRECISION;"+"\r\n"+""+"\r\n"+"	var $SqlSelect;"+"\r\n"+"	var $SqlGroupBy;"+"\r\n"+"	var $SqlOrderBy;"+"\r\n"+"	var $XAxisDateFormat;"+"\r\n"+"	var $NameDateFormat;"+"\r\n"+"	var $SeriesDateType;"+"\r\n"+"	var $SqlSelectSeries;"+"\r\n"+"	var $SqlGroupBySeries;"+"\r\n"+"	var $SqlOrderBySeries;"+"\r\n"+""+"\r\n"+"	var $UseGridComponent = FALSE;"+"\r\n"+"	var $ChartSeriesSql;"+"\r\n"+"	var $ChartSql;"+"\r\n"+"	var $PageBreak = FALSE;"+"\r\n"+"	var $PageBreakType = \"\";"+"\r\n"+"	var $PageBreakContent = \"\";"+"\r\n"+"	var $ShowChart = TRUE;"+"\r\n"+"	var $ShowTempImage = FALSE;"+"\r\n"+"	var $DrillDownInPanel = FALSE;"+"\r\n"+""+"\r\n"+"	var $ID;"+"\r\n"+"	var $Parms = array();"+"\r\n"+"	var $Trends;"+"\r\n"+"	var $Data;"+"\r\n"+"	var $ViewData;"+"\r\n"+"	var $Series;"+"\r\n"+"	var $XmlDoc;"+"\r\n"+"	var $XmlRoot;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($tblvar, $tblname, $chartvar, $chartname, $xfld, $yfld, $sfld, $type, $smrytype, $width, $height, $align=\"\") {"+"\r\n"+"		$this->TblVar = $tblvar;"+"\r\n"+"		$this->TblName = $tblname;"+"\r\n"+"		$this->ChartVar = $chartvar;"+"\r\n"+"		$this->ChartName = $chartname;"+"\r\n"+"		$this->ChartXFldName = $xfld;"+"\r\n"+"		$this->ChartYFldName = $yfld;"+"\r\n"+"		$this->ChartSFldName = $sfld;"+"\r\n"+"		$this->ChartType = $type;"+"\r\n"+"		$this->ChartSummaryType = $smrytype;"+"\r\n"+"		$this->ChartWidth = $width;"+"\r\n"+"		$this->ChartHeight = $height;"+"\r\n"+"		$this->ChartAlign = $align;"+"\r\n"+"		$this->ID = NULL;"+"\r\n"+"		$this->Parms = NULL;"+"\r\n"+"		$this->Trends = NULL;"+"\r\n"+"		$this->Data = NULL;"+"\r\n"+"		$this->Series = NULL;"+"\r\n"+"		$this->XmlDoc = new DOMDocument(\"1.0\", \"utf-8\");"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	var $Caption = \"\";"+"\r\n"+""+"\r\n"+"	// Set field caption"+"\r\n"+"	function setChartCaption($v) {"+"\r\n"+"		$this->Caption = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Chart caption"+"\r\n"+"	function ChartCaption() {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		if ($this->Caption <> \"\")"+"\r\n"+"			return $this->Caption;"+"\r\n"+"		else"+"\r\n"+"			return $ReportLanguage->ChartPhrase($this->TblVar, $this->ChartVar, \"ChartCaption\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Function XAxisName"+"\r\n"+"	function ChartXAxisName() {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		return $ReportLanguage->ChartPhrase($this->TblVar, $this->ChartVar, \"ChartXAxisName\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Function YAxisName"+"\r\n"+"	function ChartYAxisName() {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		return $ReportLanguage->ChartPhrase($this->TblVar, $this->ChartVar, \"ChartYAxisName\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Function PYAxisName"+"\r\n"+"	function ChartPYAxisName() {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		return $ReportLanguage->ChartPhrase($this->TblVar, $this->ChartVar, \"ChartPYAxisName\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Function SYAxisName"+"\r\n"+"	function ChartSYAxisName() {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		return $ReportLanguage->ChartPhrase($this->TblVar, $this->ChartVar, \"ChartSYAxisName\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Sort"+"\r\n"+"	function getSort() {"+"\r\n"+"		return @$_SESSION[EWR_PROJECT_VAR . \"_\" . $this->TblVar . \"_\" . EWR_TABLE_SORTCHART . \"_\" . $this->ChartVar];"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function setSort($v) {"+"\r\n"+"		if (@$_SESSION[EWR_PROJECT_VAR . \"_\" . $this->TblVar . \"_\" . EWR_TABLE_SORTCHART . \"_\" . $this->ChartVar] <> $v) {"+"\r\n"+"			$_SESSION[EWR_PROJECT_VAR . \"_\" . $this->TblVar . \"_\" . EWR_TABLE_SORTCHART . \"_\" . $this->ChartVar] = $v;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set chart parameters"+"\r\n"+"	function SetChartParm($Name, $Value, $Output) {"+"\r\n"+"		$this->Parms[$Name] = array($Name, $Value, $Output);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set chart parameters"+"\r\n"+"	function SetChartParms($parms) {"+"\r\n"+"		if (is_array($parms)) {"+"\r\n"+"			foreach ($parms as $parm) {"+"\r\n"+"				if (!isset($parm[2]))"+"\r\n"+"					$parm[2] = TRUE;"+"\r\n"+"				$this->Parms[$parm[0]] = $parm;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set up default chart parm"+"\r\n"+"	function SetupDefaultChartParm($key, $value) {"+"\r\n"+"		if (is_array($this->Parms)) {"+"\r\n"+"			$parm = $this->LoadParm($key);"+"\r\n"+"			if (is_null($parm)) {"+"\r\n"+"				$this->Parms[$key] = array($key, $value, TRUE);"+"\r\n"+"			} elseif ($parm == \"\") {"+"\r\n"+"				$this->SaveParm($key, $value);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load chart parm"+"\r\n"+"	function LoadParm($key) {"+"\r\n"+"		if (is_array($this->Parms) && array_key_exists($key, $this->Parms))"+"\r\n"+"			return $this->Parms[$key][1];"+"\r\n"+"		return NULL;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Save chart parm"+"\r\n"+"	function SaveParm($key, $value) {"+"\r\n"+"		if (is_array($this->Parms)) {"+"\r\n"+"			if (array_key_exists($key, $this->Parms))"+"\r\n"+"				$this->Parms[$key][1] = $value;"+"\r\n"+"			else"+"\r\n"+"				$this->Parms[$key] = array($key, $value, TRUE);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Process chart parms"+"\r\n"+"	function ProcessChartParms(&$Parms) {"+"\r\n"+"		if ($this->IsFCFChart())"+"\r\n"+"			return;"+"\r\n"+"	"+"\r\n"+"		$arParms[] = array(\"shownames\", \"showLabels\");"+"\r\n"+"		$arParms[] = array(\"showhovercap\", \"showToolTip\");"+"\r\n"+"		$arParms[] = array(\"rotateNames\", \"rotateLabels\");"+"\r\n"+"		$arParms[] = array(\"showColumnShadow\", \"showShadow\");"+"\r\n"+"		$arParms[] = array(\"showBarShadow\", \"showShadow\");"+"\r\n"+"		$arParms[] = array(\"hoverCapBgColor\", \"toolTipBgColor\");"+"\r\n"+"		$arParms[] = array(\"hoverCapBorderColor\", \"toolTipBorderColor\");"+"\r\n"+"		$arParms[] = array(\"hoverCapSepChar\", \"toolTipSepChar\");"+"\r\n"+"		$arParms[] = array(\"showAnchors\", \"drawAnchors\");"+"\r\n"+"		"+"\r\n"+"		$cht_type = $this->LoadParm(\"type\");"+"\r\n"+"		if ($cht_type == 20) { // Candlestick // v8"+"\r\n"+"			$arParms[] = array(\"yAxisMaxValue\", \"pYAxisMaxValue\");"+"\r\n"+"			$arParms[] = array(\"yAxisMinValue\", \"pYAxisMinValue\");"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Rename chart parm"+"\r\n"+"		foreach ($arParms as $p) {"+"\r\n"+"			list($fromParm, $toParm) = $p;"+"\r\n"+"			if (array_key_exists($fromParm, $Parms) && !array_key_exists($toParm, $Parms)) {"+"\r\n"+"				$Parms[$toParm] = array($toParm, $Parms[$fromParm][1], TRUE);"+"\r\n"+"				unset($Parms[$fromParm]);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	function LoadChartParms() {"+"\r\n"+""+"\r\n"+"		// Initialize default values"+"\r\n"+"		$this->SetupDefaultChartParm(\"caption\", \"Chart\");"+"\r\n"+""+"\r\n"+"		// Show names/values/hover"+"\r\n"+"		$this->SetupDefaultChartParm(\"shownames\", \"1\"); // Default show names"+"\r\n"+"		$this->SetupDefaultChartParm(\"showvalues\", \"1\"); // Default show values"+"\r\n"+"		"+"\r\n"+"		// Process chart parms"+"\r\n"+"		$this->ProcessChartParms($this->Parms);"+"\r\n"+""+"\r\n"+"		// Get showvalues/showhovercap"+"\r\n"+"		$cht_showValues = (bool)$this->LoadParm(\"showvalues\");"+"\r\n"+"		$cht_showHoverCap = (bool)$this->LoadParm(\"showhovercap\") || (bool)$this->LoadParm(\"showToolTip\"); // v8"+"\r\n"+"		"+"\r\n"+"		// Tooltip // v8"+"\r\n"+"		if ($cht_showHoverCap && !$this->LoadParm(\"showToolTip\"))"+"\r\n"+"			$this->SaveParm(\"showToolTip\", \"1\");"+"\r\n"+""+"\r\n"+"		// Format percent for Pie charts"+"\r\n"+"		$cht_showPercentageValues = $this->LoadParm(\"showPercentageValues\");"+"\r\n"+"		$cht_showPercentageInLabel = $this->LoadParm(\"showPercentageInLabel\");"+"\r\n"+"		$cht_type = $this->LoadParm(\"type\");"+"\r\n"+"		if ($cht_type == 2 || $cht_type == 6 || $cht_type == 8 || $cht_type == 101) {"+"\r\n"+"			if (($cht_showHoverCap == \"1\" && $cht_showPercentageValues == \"1\") ||"+"\r\n"+"			($cht_showValues == \"1\" && $cht_showPercentageInLabel == \"1\")) {"+"\r\n"+"				$this->SetupDefaultChartParm(\"formatNumber\", \"1\");"+"\r\n"+"				$this->SaveParm(\"formatNumber\", \"1\");"+"\r\n"+"			}"+"\r\n"+"		} elseif ($cht_type == 20) { // Candlestick"+"\r\n"+"			$this->SetupDefaultChartParm(\"bearBorderColor\", \"E33C3C\");"+"\r\n"+"			$this->SetupDefaultChartParm(\"bearFillColor\", \"E33C3C\");"+"\r\n"+"			$this->SetupDefaultChartParm(\"showVolumeChart\", \"0\"); // v8"+"\r\n"+"			if ($this->LoadParm(\"showAsBars\"))"+"\r\n"+"				$this->SaveParm(\"plotPriceAs\", \"BAR\");"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Hide legend for single series (Bar 3D / Column 2D / Line 2D / Area 2D)"+"\r\n"+"		$scrollchart = (intval($this->LoadParm(\"numVisiblePlot\")) > 0 && ($cht_type == 1 || $cht_type == 4 || $cht_type == 7)) ? 1 : 0;"+"\r\n"+"		$cht_single_series = ($cht_type == 104 || $scrollchart == 1) ? 1 : 0;"+"\r\n"+"		if ($cht_single_series == 1) {"+"\r\n"+"			$this->SetupDefaultChartParm(\"showLegend\", \"0\");"+"\r\n"+"			$this->SaveParm(\"showLegend\", \"0\");"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load view data"+"\r\n"+"	function LoadViewData() {"+"\r\n"+"		$sdt = $this->SeriesDateType;"+"\r\n"+"		$xdt = $this->XAxisDateFormat;"+"\r\n"+"		$ndt = ($this->ChartType == 20) ? $this->NameDateFormat : \"\";"+"\r\n"+"		if ($sdt <> \"\") $xdt = $sdt;"+"\r\n"+"		$this->ViewData = array();"+"\r\n"+"		if ($sdt == \"\" && $xdt == \"\" && $ndt == \"\") { // No formatting, just copy"+"\r\n"+"			$this->ViewData = $this->Data;"+"\r\n"+"		} elseif (is_array($this->Data)) { // Format data"+"\r\n"+"			$cntData = count($this->Data);"+"\r\n"+"			for ($i = 0; $i < $cntData; $i++) {"+"\r\n"+"				$temp = array();"+"\r\n"+"				$chartrow = $this->Data[$i];"+"\r\n"+"				$cntRow = count($chartrow);"+"\r\n"+"				$temp[0] = ewr_ChartXValue($chartrow[0], $xdt); // X value"+"\r\n"+"				$temp[1] = ewr_ChartSeriesValue($chartrow[1], $sdt); // Series value"+"\r\n"+"				for ($j = 2; $j < $cntRow; $j++) {"+"\r\n"+"					if ($ndt <> \"\" && $j == $cntRow-1)"+"\r\n"+"						$temp[$j] = ewr_ChartXValue($chartrow[$j], $ndt); // Name value"+"\r\n"+"					else"+"\r\n"+"						$temp[$j] = $chartrow[$j]; // Y values"+"\r\n"+"				}"+"\r\n"+"				$this->ViewData[] = $temp;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Chart Xml"+"\r\n"+"	function ChartXml() {"+"\r\n"+""+"\r\n"+"		$this->LoadViewData();"+"\r\n"+""+"\r\n"+"	";
ewAr[18] = ""+"\r\n"+"		$this->Chart_Rendering();"+"\r\n"+"	";
ewAr[19] = ""+"\r\n"+""+"\r\n"+"		$cht_type = $this->LoadParm(\"type\");"+"\r\n"+""+"\r\n"+"		// Format line color for Multi-Series Column Dual Y chart"+"\r\n"+"		$cht_lineColor = ($cht_type == 18 || $cht_type == 19) ? $this->LoadParm(\"lineColor\") : \"\";"+"\r\n"+""+"\r\n"+"		$chartseries = &$this->Series;"+"\r\n"+"		$chartdata = &$this->ViewData;"+"\r\n"+"		$cht_series = ((intval($cht_type) >= 9 && intval($cht_type) <= 19) || (intval($cht_type) >= 102 && intval($cht_type) <= 103)) ? 1 : 0; // $cht_series = 1 (Multi series charts)"+"\r\n"+"		$cht_series_type = $this->LoadParm(\"seriestype\");"+"\r\n"+"		$cht_alpha = $this->LoadParm(\"alpha\");"+"\r\n"+""+"\r\n"+"		// Hide legend for single series (Bar 3D / Column 2D / Line 2D / Area 2D)"+"\r\n"+"		$scrollchart = (intval($this->LoadParm(\"numVisiblePlot\")) > 0 && ($cht_type == 1 || $cht_type == 4 || $cht_type == 7)) ? 1 : 0;"+"\r\n"+"		$cht_single_series = ($cht_type == 104 || $scrollchart == 1) ? 1 : 0;"+"\r\n"+""+"\r\n"+"		if (is_array($chartdata)) {"+"\r\n"+"			$this->WriteChartHeader(); // Write chart header"+"\r\n"+""+"\r\n"+"			// Candlestick"+"\r\n"+"			if ($cht_type == 20) {"+"\r\n"+""+"\r\n"+"				// Write candlestick cat"+"\r\n"+"				if (count($chartdata[0]) >= 7) {"+"\r\n"+"					$cats = $this->XmlDoc->createElement(\"categories\");"+"\r\n"+"					$this->XmlRoot->appendChild($cats);"+"\r\n"+"					$cntcat = count($chartdata);"+"\r\n"+"					for ($i = 0; $i < $cntcat; $i++) {"+"\r\n"+"						$xindex = $i+1;"+"\r\n"+"						$name = $chartdata[$i][6];"+"\r\n"+"						if ($name <> \"\")"+"\r\n"+"							$this->WriteChartCandlestickCatContent($cats, $xindex, $name);"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+""+"\r\n"+"				// Write candlestick data"+"\r\n"+"				$data = $this->XmlDoc->createElement(EWR_FUSIONCHARTS_FREE ? \"data\" : \"dataset\");"+"\r\n"+"				$this->XmlRoot->appendChild($data);"+"\r\n"+"				$cntdata = count($chartdata);"+"\r\n"+"				for ($i = 0; $i < $cntdata; $i++) {"+"\r\n"+"					$open = is_null($chartdata[$i][2]) ? 0 : (float)$chartdata[$i][2];"+"\r\n"+"					$high = is_null($chartdata[$i][3]) ? 0 : (float)$chartdata[$i][3];"+"\r\n"+"					$low = is_null($chartdata[$i][4]) ? 0 : (float)$chartdata[$i][4];"+"\r\n"+"					$close = is_null($chartdata[$i][5]) ? 0 : (float)$chartdata[$i][5];"+"\r\n"+"					$xindex = $i+1;"+"\r\n"+"					$lnk = $this->GetChartLink($this->ChartDrillDownUrl, $this->Data[$i]);"+"\r\n"+"					$this->WriteChartCandlestickContent($data, $open, $high, $low, $close, $xindex, $lnk);"+"\r\n"+"				}"+"\r\n"+""+"\r\n"+"			// Multi series"+"\r\n"+"			} else if ($cht_series == 1) {"+"\r\n"+""+"\r\n"+"				// Multi-Y values"+"\r\n"+"				if ($cht_series_type == \"1\") {"+"\r\n"+""+"\r\n"+"					// Write cat"+"\r\n"+"					$cats = $this->XmlDoc->createElement(\"categories\");"+"\r\n"+"					$this->XmlRoot->appendChild($cats);"+"\r\n"+"					$cntcat = count($chartdata);"+"\r\n"+"					for ($i = 0; $i < $cntcat; $i++) {"+"\r\n"+"						$name = $this->ChartFormatName($chartdata[$i][0]);"+"\r\n"+"						$this->WriteChartCatContent($cats, $name);"+"\r\n"+"					}"+"\r\n"+""+"\r\n"+"					// Write series"+"\r\n"+"					$cntdata = count($chartdata);"+"\r\n"+"					$cntseries = count($chartseries);"+"\r\n"+"					if ($cntseries > count($chartdata[0])-2) $cntseries = count($chartdata[0])-2;"+"\r\n"+"					for ($i = 0; $i < $cntseries; $i++) {"+"\r\n"+"						$color = $this->GetPaletteColor($i);"+"\r\n"+"						$bShowSeries = EWR_CHART_SHOW_BLANK_SERIES;"+"\r\n"+"						$dataset = $this->XmlDoc->createElement(\"dataset\");"+"\r\n"+"						$this->WriteChartSeriesHeader($dataset, $chartseries[$i], $color, $cht_alpha, $cht_lineColor);"+"\r\n"+"						$bWriteSeriesHeader = TRUE;"+"\r\n"+"						for ($j = 0; $j < $cntdata; $j++) {"+"\r\n"+"							$val = $chartdata[$j][$i+2];"+"\r\n"+"							$val = (is_null($val)) ? 0 : (float)$val;"+"\r\n"+"							if ($val <> 0) $bShowSeries = TRUE;"+"\r\n"+"							$lnk = $this->GetChartLink($this->ChartDrillDownUrl, $this->Data[$j]);"+"\r\n"+"							$this->WriteChartSeriesContent($dataset, $val, \"\", \"\", $lnk);"+"\r\n"+"						}"+"\r\n"+"						if ($bShowSeries)"+"\r\n"+"							$this->XmlRoot->appendChild($dataset);"+"\r\n"+"					}"+"\r\n"+""+"\r\n"+"				// Series field"+"\r\n"+"				} else {"+"\r\n"+""+"\r\n"+"					// Get series names"+"\r\n"+"					if (is_array($chartseries)) {"+"\r\n"+"						$nSeries = count($chartseries);"+"\r\n"+"					} else {"+"\r\n"+"						$nSeries = 0;"+"\r\n"+"					}"+"\r\n"+""+"\r\n"+"					// Write cat"+"\r\n"+"					$cats = $this->XmlDoc->createElement(\"categories\");"+"\r\n"+"					$this->XmlRoot->appendChild($cats);"+"\r\n"+"					$chartcats = array();"+"\r\n"+"					$cntdata = count($chartdata);"+"\r\n"+"					for ($i = 0; $i < $cntdata; $i++) {"+"\r\n"+"						$name = $chartdata[$i][0];"+"\r\n"+"						if (!in_array($name, $chartcats)) {"+"\r\n"+"							$this->WriteChartCatContent($cats, $name);"+"\r\n"+"							$chartcats[] = $name;"+"\r\n"+"						}"+"\r\n"+"					}"+"\r\n"+""+"\r\n"+"					// Write series"+"\r\n"+"					for ($i = 0; $i < $nSeries; $i++) {"+"\r\n"+"						$seriesname = (is_array($chartseries[$i])) ? $chartseries[$i][0] : $chartseries[$i];"+"\r\n"+"						$color = $this->GetPaletteColor($i);"+"\r\n"+"						$bShowSeries = EWR_CHART_SHOW_BLANK_SERIES;"+"\r\n"+"						$dataset = $this->XmlDoc->createElement(\"dataset\");"+"\r\n"+"						$this->WriteChartSeriesHeader($dataset, $chartseries[$i], $color, $cht_alpha, $cht_lineColor);"+"\r\n"+"						$cntcats = count($chartcats);"+"\r\n"+"						$cntdata = count($chartdata);"+"\r\n"+"						for ($j = 0; $j < $cntcats; $j++) {"+"\r\n"+"							$val = 0;"+"\r\n"+"							$lnk = \"\";"+"\r\n"+"							for ($k = 0; $k < $cntdata; $k++) {"+"\r\n"+"								if ($chartdata[$k][0] == $chartcats[$j] && $chartdata[$k][1] == $seriesname) {"+"\r\n"+"									$val = $chartdata[$k][2];"+"\r\n"+"									$val = (is_null($val)) ? 0 : (float)$val;"+"\r\n"+"									if ($val <> 0) $bShowSeries = TRUE;"+"\r\n"+"									$lnk = $this->GetChartLink($this->ChartDrillDownUrl, $this->Data[$k]);"+"\r\n"+"									break;"+"\r\n"+"								}"+"\r\n"+"							}"+"\r\n"+"							$this->WriteChartSeriesContent($dataset, $val, \"\", \"\", $lnk);"+"\r\n"+"						}"+"\r\n"+"						if ($bShowSeries)"+"\r\n"+"							$this->XmlRoot->appendChild($dataset);"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+""+"\r\n"+"			// Show single series"+"\r\n"+"			} elseif ($cht_single_series == 1) {"+"\r\n"+""+"\r\n"+"				// Write multiple cats"+"\r\n"+"				$cats = $this->XmlDoc->createElement(\"categories\");"+"\r\n"+"				$this->XmlRoot->appendChild($cats);"+"\r\n"+"				$cntcat = count($chartdata);"+"\r\n"+"				for ($i = 0; $i < $cntcat; $i++) {"+"\r\n"+"					$name = $this->ChartFormatName($chartdata[$i][0]);"+"\r\n"+"					if ($chartdata[$i][1] <> \"\") "+"\r\n"+"						$name .= \", \" . $chartdata[$i][1];"+"\r\n"+"					$this->WriteChartCatContent($cats, $name);"+"\r\n"+"				}"+"\r\n"+""+"\r\n"+"				// Write series"+"\r\n"+"				$toolTipSep = $this->LoadParm(\"toolTipSepChar\");"+"\r\n"+"				if ($toolTipSep == \"\") $toolTipSep = \":\";"+"\r\n"+"				$cntdata = count($chartdata);"+"\r\n"+"				$dataset = $this->XmlDoc->createElement(\"dataset\");"+"\r\n"+"				$this->WriteChartSeriesHeader($dataset, \"\", \"\", $cht_alpha, $cht_lineColor);"+"\r\n"+"				for ($i = 0; $i < $cntdata; $i++) {"+"\r\n"+"					$name = $this->ChartFormatName($chartdata[$i][0]);"+"\r\n"+"					if ($chartdata[$i][1] <> \"\") "+"\r\n"+"						$name .= \", \" . $chartdata[$i][1];"+"\r\n"+"					$val = $chartdata[$i][2];"+"\r\n"+"					$val = (is_null($val)) ? 0 : (float)$val;"+"\r\n"+"					$color = $this->GetPaletteColor($i);"+"\r\n"+"					$toolText = $name . $toolTipSep . $this->ChartFormatNumber($val);"+"\r\n"+"					$lnk = $this->GetChartLink($this->ChartDrillDownUrl, $this->Data[$i]);"+"\r\n"+"					$this->WriteChartSeriesContent($dataset, $val, $color, $cht_alpha, $lnk, $toolText);"+"\r\n"+"					$this->XmlRoot->appendChild($dataset);"+"\r\n"+"				}"+"\r\n"+""+"\r\n"+"			// Single series"+"\r\n"+"			} else {"+"\r\n"+""+"\r\n"+"				$cntdata = count($chartdata);"+"\r\n"+"				for ($i = 0; $i < $cntdata; $i++) {"+"\r\n"+"					$name = $this->ChartFormatName($chartdata[$i][0]);"+"\r\n"+"					$color = $this->GetPaletteColor($i);"+"\r\n"+"					if ($chartdata[$i][1] <> \"\") "+"\r\n"+"						$name .= \", \" . $chartdata[$i][1];"+"\r\n"+"					$val = $chartdata[$i][2];"+"\r\n"+"					$val = (is_null($val)) ? 0 : (float)$val;"+"\r\n"+"					$lnk = $this->GetChartLink($this->ChartDrillDownUrl, $this->Data[$i]);"+"\r\n"+"					$this->WriteChartContent($this->XmlRoot, $name, $val, $color, $cht_alpha, $lnk); // Get chart content"+"\r\n"+"				}"+"\r\n"+""+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"			// Get trend lines"+"\r\n"+"			$this->WriteChartTrendLines();"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+"		$wrk = $this->XmlDoc->saveXML();"+"\r\n"+""+"\r\n"+"	";
ewAr[20] = ""+"\r\n"+"		$this->Chart_Rendered($wrk);"+"\r\n"+"	";
ewAr[21] = ""+"\r\n"+""+"\r\n"+"		return $this->XmlRoot ? $wrk : \"\";"+"\r\n"+""+"\r\n"+"		//ewr_Trace($wrk);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Show Chart Xml"+"\r\n"+"	function ShowChartXml() {"+"\r\n"+"		// Build chart content"+"\r\n"+"		$sChartContent = $this->ChartXml();"+"\r\n"+"		header(\"Content-Type: text/xml; charset=UTF-8\");"+"\r\n"+"		// Write utf-8 BOM"+"\r\n"+"		echo \"\\xEF\\xBB\\xBF\";"+"\r\n"+"		// Write utf-8 encoding"+"\r\n"+"		echo \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\";"+"\r\n"+"		// Write content"+"\r\n"+"		echo $sChartContent;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Show Chart Text"+"\r\n"+"	function ShowChartText() {"+"\r\n"+"		// Build chart content"+"\r\n"+"		$sChartContent = $this->ChartXml();"+"\r\n"+"		header(\"Content-Type: text/plain; charset=UTF-8\");"+"\r\n"+"		// Write content"+"\r\n"+"		echo $sChartContent;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get color"+"\r\n"+"	function GetPaletteColor($i) {"+"\r\n"+"		$colorpalette = $this->LoadParm(\"colorpalette\");"+"\r\n"+"		$ar_cht_colorpalette = explode(\"|\", $colorpalette);"+"\r\n"+"		if (is_array($ar_cht_colorpalette))"+"\r\n"+"			$cntar = count($ar_cht_colorpalette);"+"\r\n"+"		return $ar_cht_colorpalette[$i % $cntar];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Convert to HTML color"+"\r\n"+"	function ColorCode($c) {"+"\r\n"+"		if ($this->IsFCFChart()) {"+"\r\n"+"			$color = str_replace(\"#\", \"\", $c); // Remove #"+"\r\n"+"			if (strlen($color) == 3) // Convert RGB to RRGGBB"+"\r\n"+"				return substr($color,0,1) . substr($color,0,1) . substr($color,1,1) . substr($color,1,1) . substr($color,2,1) . substr($color,2,1);"+"\r\n"+"			else // Fill to 6 digits"+"\r\n"+"				return str_pad($color, 6, \"0\", STR_PAD_LEFT);"+"\r\n"+"		} else {"+"\r\n"+"			return $c;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Output chart header"+"\r\n"+"	function WriteChartHeader() {"+"\r\n"+"		$cht_parms = $this->Parms;"+"\r\n"+"		$chartElement = (EWR_FUSIONCHARTS_FREE && $this->ChartType == 20) ? \"graph\" : \"chart\";"+"\r\n"+"		$chart = $this->XmlDoc->createElement($chartElement);"+"\r\n"+"		$this->XmlRoot = &$chart;"+"\r\n"+"		$this->XmlDoc->appendChild($chart);"+"\r\n"+"		if (is_array($cht_parms)) {"+"\r\n"+"			foreach ($cht_parms as $parm) {"+"\r\n"+"				if ($parm[2])"+"\r\n"+"					$this->WriteAtt($chart, $parm[0], $parm[1]);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get TrendLine XML"+"\r\n"+"	// <trendlines>"+"\r\n"+"	//    <line startvalue='0.8' displayValue='Good' color='FF0000' thickness='1' isTrendZone='0'/>"+"\r\n"+"	//    <line startvalue='-0.4' displayValue='Bad' color='009999' thickness='1' isTrendZone='0'/>"+"\r\n"+"	// </trendlines>"+"\r\n"+"	function WriteChartTrendLines() {"+"\r\n"+"		$cht_trends = $this->Trends;"+"\r\n"+"		if (is_array($cht_trends)) {"+"\r\n"+"			foreach ($cht_trends as $trend) {"+"\r\n"+"				$trends = $this->XmlDoc->createElement('trendlines');"+"\r\n"+"				$this->XmlRoot->appendChild($trends);"+"\r\n"+"				// Get all trend lines"+"\r\n"+"				$this->WriteChartTrendLine($trends, $trend);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Output trend line"+"\r\n"+"	function WriteChartTrendLine(&$node, $ar) {"+"\r\n"+"		$line = $this->XmlDoc->createElement('line');"+"\r\n"+"		@list($startval, $endval, $color, $dispval, $thickness, $trendzone, $showontop, $alpha, $tooltext, $valueonright, $dashed, $dashlen, $dashgap, $parentyaxis) = $ar;"+"\r\n"+"		$this->WriteAtt($line, \"startValue\", $startval); // Starting y value"+"\r\n"+"		if ($endval <> 0)"+"\r\n"+"			$this->WriteAtt($line, \"endValue\", $endval); // Ending y value"+"\r\n"+"		$this->WriteAtt($line, \"color\", $this->CheckColorCode($color)); // Color"+"\r\n"+"		if ($dispval <> \"\")"+"\r\n"+"			$this->WriteAtt($line, \"displayValue\", $dispval); // Display value"+"\r\n"+"		if ($thickness > 0)"+"\r\n"+"			$this->WriteAtt($line, \"thickness\", $thickness); // Thickness"+"\r\n"+"		$this->WriteAtt($line, \"isTrendZone\", $trendzone); // Display trend as zone or line"+"\r\n"+"		$this->WriteAtt($line, \"showOnTop\", $showontop); // Show on top"+"\r\n"+"		if ($alpha > 0)"+"\r\n"+"			$this->WriteAtt($line, \"alpha\", $alpha); // Alpha"+"\r\n"+"		if ($tooltext <> \"\")"+"\r\n"+"			$this->WriteAtt($line, \"toolText\", $tooltext); // Tool text"+"\r\n"+"		if ($valueonright <> \"0\")"+"\r\n"+"			$this->WriteAtt($line, \"valueOnRight\", $valueonright); // Value on right"+"\r\n"+"		if ($dashed <> \"0\") {"+"\r\n"+"			$this->WriteAtt($line, \"dashed\", $dashed); // Dashed trend line"+"\r\n"+"			$this->WriteAtt($line, \"dashLen\", $dashlen); // Dashed trend length"+"\r\n"+"			$this->WriteAtt($line, \"dashGap\", $dashgap); // Dashed line gap"+"\r\n"+"		}"+"\r\n"+"		if ($parentyaxis <> \"\")"+"\r\n"+"			$this->WriteAtt($line, \"parentYAxis\", $parentyaxis); // Parent Y Axis"+"\r\n"+"		$node->appendChild($line);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Series header/footer XML (multi series)"+"\r\n"+"	function WriteChartSeriesHeader(&$node, $series, $color, $alpha, $linecolor) {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		$seriesname = is_array($series) ? $series[0] : $series;"+"\r\n"+"		if (is_null($seriesname)) {"+"\r\n"+"			$seriesname = $ReportLanguage->Phrase(\"NullLabel\");"+"\r\n"+"		} elseif ($seriesname == \"\") {"+"\r\n"+"			$seriesname = $ReportLanguage->Phrase(\"EmptyLabel\");"+"\r\n"+"		}"+"\r\n"+"		$this->WriteAtt($node, \"seriesname\", $seriesname);"+"\r\n"+"		if (is_array($series)) {"+"\r\n"+"			if ($series[1] == \"S\" && $linecolor <> \"\")"+"\r\n"+"				$this->WriteAtt($node, \"color\", $this->ColorCode($linecolor));"+"\r\n"+"			else"+"\r\n"+"				$this->WriteAtt($node, \"color\", $this->ColorCode($color));"+"\r\n"+"		} else {"+"\r\n"+"				$this->WriteAtt($node, \"color\", $this->ColorCode($color));"+"\r\n"+"		}"+"\r\n"+"		$this->WriteAtt($node, \"alpha\", $alpha);"+"\r\n"+"		if (is_array($series))"+"\r\n"+"			$this->WriteAtt($node, \"parentYAxis\", $series[1]);"+"\r\n"+"	";
ewAr[22] = ""+"\r\n"+"		$this->Chart_DataRendered($node);"+"\r\n"+"	";
ewAr[23] = ""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Series content XML (multi series)"+"\r\n"+"	function WriteChartSeriesContent(&$node, $val, $color = \"\", $alpha = \"\", $lnk = \"\", $toolText = \"\") {"+"\r\n"+"		$set = $this->XmlDoc->createElement('set');"+"\r\n"+"		if ($this->IsStackedChart() && $val == 0 && !EWR_CHART_SHOW_ZERO_IN_STACK_CHART)"+"\r\n"+"			$this->WriteAtt($set, \"value\", \"\");"+"\r\n"+"		else"+"\r\n"+"			$this->WriteAtt($set, \"value\", $this->ChartFormatNumber($val));"+"\r\n"+"		if ($color <> \"\")"+"\r\n"+"			$this->WriteAtt($set, \"color\", $this->ColorCode($color));"+"\r\n"+"		if ($alpha <> \"\")"+"\r\n"+"			$this->WriteAtt($set, \"alpha\", $alpha);"+"\r\n"+"		if ($lnk <> \"\")"+"\r\n"+"			$this->WriteAtt($set, \"link\", $lnk);"+"\r\n"+"		if ($toolText <> \"\")"+"\r\n"+"			$this->WriteAtt($set, \"toolText\", $toolText);"+"\r\n"+"	";
ewAr[24] = ""+"\r\n"+"		$this->Chart_DataRendered($set);"+"\r\n"+"	";
ewAr[25] = ""+"\r\n"+"		$node->appendChild($set);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Category content XML (Candlestick category)"+"\r\n"+"	function WriteChartCandlestickCatContent(&$node, $xindex, $name) {"+"\r\n"+"		$cat = $this->XmlDoc->createElement(\"category\");"+"\r\n"+"		$this->WriteAtt($cat, EWR_FUSIONCHARTS_FREE ? \"name\" : \"label\", $name);"+"\r\n"+"		$this->WriteAtt($cat, EWR_FUSIONCHARTS_FREE ? \"xindex\" : \"x\", $xindex);"+"\r\n"+"		$this->WriteAtt($cat, \"showline\", \"1\");"+"\r\n"+"	";
ewAr[26] = ""+"\r\n"+"		$this->Chart_DataRendered($cat);"+"\r\n"+"	";
ewAr[27] = ""+"\r\n"+"		$node->appendChild($cat);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Chart content XML (Candlestick)"+"\r\n"+"	function WriteChartCandlestickContent(&$node, $open, $high, $low, $close, $xindex, $lnk = \"\") {"+"\r\n"+"		$set = $this->XmlDoc->createElement(\"set\");"+"\r\n"+"		$this->WriteAtt($set, \"open\", $this->ChartFormatNumber($open));"+"\r\n"+"		$this->WriteAtt($set, \"high\", $this->ChartFormatNumber($high));"+"\r\n"+"		$this->WriteAtt($set, \"low\", $this->ChartFormatNumber($low));"+"\r\n"+"		$this->WriteAtt($set, \"close\", $this->ChartFormatNumber($close));"+"\r\n"+"		if ($xindex <> \"\")"+"\r\n"+"			$this->WriteAtt($set, EWR_FUSIONCHARTS_FREE ? \"xindex\" : \"x\", $xindex);"+"\r\n"+"		if ($lnk <> \"\")"+"\r\n"+"			$this->WriteAtt($set, \"link\", $lnk);"+"\r\n"+"	";
ewAr[28] = ""+"\r\n"+"		$this->Chart_DataRendered($set);"+"\r\n"+"	";
ewAr[29] = ""+"\r\n"+"		$node->appendChild($set);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Format name for chart"+"\r\n"+"	function ChartFormatName($name) {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		if (is_null($name)) {"+"\r\n"+"			return $ReportLanguage->Phrase(\"NullLabel\");"+"\r\n"+"		} elseif ($name == \"\") {"+"\r\n"+"			return $ReportLanguage->Phrase(\"EmptyLabel\");"+"\r\n"+"		} else {"+"\r\n"+"			return $name;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Write attribute"+"\r\n"+"	function WriteAtt(&$node, $name, $val) {"+"\r\n"+"		$val = $this->CheckColorCode(strval($val));"+"\r\n"+"		$val = $this->ChartEncode($val);"+"\r\n"+"		if ($node->hasAttribute($name)) {"+"\r\n"+"			$node->getAttributeNode($name)->value = ewr_XmlEncode(ewr_ConvertToUtf8($val));"+"\r\n"+"		} else {"+"\r\n"+"			$att = $this->XmlDoc->createAttribute($name);"+"\r\n"+"			$att->value = ewr_XmlEncode(ewr_ConvertToUtf8($val));"+"\r\n"+"			$node->appendChild($att);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check color code"+"\r\n"+"	function CheckColorCode($val) {"+"\r\n"+"		if ($this->IsFCFChart() && substr($val, 0, 1) == \"#\" && strlen($val) == 7) {"+"\r\n"+"			return substr($val, 1);"+"\r\n"+"		} else {"+"\r\n"+"			return $val;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Is stack chart"+"\r\n"+"	function IsStackedChart() {"+"\r\n"+"		return in_array($this->ChartType, array(14,15,16,17));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// FusionCharts Free type"+"\r\n"+"	function IsFCFChart() {"+"\r\n"+"		return EWR_FUSIONCHARTS_FREE && ($this->ChartType == 20 || $this->ChartType == 21 || $this->ChartType == 22);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Encode \"+\" as \"%2B\" for FusionChartsFree"+"\r\n"+"	function ChartEncode($val) {"+"\r\n"+"		return ($this->IsFCFChart()) ? str_replace(\"+\", \"%2B\", $val) : $val;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Format number for chart"+"\r\n"+"	function ChartFormatNumber($v) {"+"\r\n"+"		$cht_decimalprecision = $this->LoadParm(\"decimals\");"+"\r\n"+"		if (is_null($cht_decimalprecision)) {"+"\r\n"+"			if ($this->ChartDefaultDecimalPrecision >= 0)"+"\r\n"+"				$cht_decimalprecision = $this->ChartDefaultDecimalPrecision; // Use default precision"+"\r\n"+"			else"+"\r\n"+"				$cht_decimalprecision = (($v-(int)$v) == 0) ? 0 : strlen(abs($v-(int)$v))-2; // Use original decimal precision"+"\r\n"+"		}"+"\r\n"+"		return number_format($v, $cht_decimalprecision, '.', '');"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Category content XML (multi series)"+"\r\n"+"	function WriteChartCatContent(&$node, $name) {"+"\r\n"+"		$cat = $this->XmlDoc->createElement(\"category\");"+"\r\n"+"		$this->WriteAtt($cat, \"label\", $name);"+"\r\n"+"	";
ewAr[30] = ""+"\r\n"+"		$this->Chart_DataRendered($cat);"+"\r\n"+"	";
ewAr[31] = ""+"\r\n"+"		$node->appendChild($cat);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Chart content XML"+"\r\n"+"	function WriteChartContent(&$node, $name, $val, $color, $alpha, $lnk) {"+"\r\n"+"		$cht_shownames = $this->LoadParm(\"shownames\");"+"\r\n"+"		$set = $this->XmlDoc->createElement(\"set\");"+"\r\n"+"		$this->WriteAtt($set, ($this->IsFCFChart()) ? \"name\" : \"label\", $name);"+"\r\n"+"		$this->WriteAtt($set, \"value\", $this->ChartFormatNumber($val));"+"\r\n"+"		$this->WriteAtt($set, \"color\", $this->ColorCode($color));"+"\r\n"+"		$this->WriteAtt($set, \"alpha\", $alpha);"+"\r\n"+"		$this->WriteAtt($set, \"link\", $lnk);"+"\r\n"+"		if ($cht_shownames == \"1\")"+"\r\n"+"			$this->WriteAtt($set, \"showName\", \"1\");"+"\r\n"+"	";
ewAr[32] = ""+"\r\n"+"		$this->Chart_DataRendered($set);"+"\r\n"+"	";
ewAr[33] = ""+"\r\n"+"		$node->appendChild($set);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get chart link"+"\r\n"+"	function GetChartLink($src, $row) {"+"\r\n"+"		if ($src <> \"\" && is_array($row)) {"+"\r\n"+"			$cntrow = count($row);"+"\r\n"+"			$lnk = $src;"+"\r\n"+"			$sdt = $this->SeriesDateType;"+"\r\n"+"			$xdt = $this->XAxisDateFormat;"+"\r\n"+"			$ndt = ($this->ChartType == 20) ? $this->NameDateFormat : \"\";"+"\r\n"+"			if ($sdt <> \"\") $xdt = $sdt;"+"\r\n"+"			if (preg_match(\"/&t=([^&]+)&/\", $lnk, $m))"+"\r\n"+"				$tblcaption = $GLOBALS[\"ReportLanguage\"]->TablePhrase($m[1], 'TblCaption');"+"\r\n"+"			else"+"\r\n"+"				$tblcaption = \"\";"+"\r\n"+"			for ($i = 0; $i < $cntrow; $i++) { // Link format: %i:Parameter:FieldType%"+"\r\n"+"				if (preg_match(\"/%\" . $i . \":([^%:]*):([\\d]+)%/\", $lnk, $m)) {"+"\r\n"+"					$fldtype = ewr_FieldDataType($m[2]);"+"\r\n"+"					if ($i == 0) { // Format X SQL"+"\r\n"+"						$lnk = str_replace($m[0], ewr_Encrypt(ewr_ChartXSQL(\"@\" . $m[1], $fldtype, $row[$i], $xdt)), $lnk);"+"\r\n"+"					} elseif ($i == 1) { // Format Series SQL"+"\r\n"+"						$lnk = str_replace($m[0], ewr_Encrypt(ewr_ChartSeriesSQL(\"@\" . $m[1], $fldtype, $row[$i], $sdt)), $lnk);"+"\r\n"+"					} else {"+"\r\n"+"						$lnk = str_replace($m[0], ewr_Encrypt(\"@\" . $m[1] . \" = \" . ewr_QuotedValue($row[$i], $fldtype)), $lnk);"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			return \"javascript:\" . ewr_DrillDownJs($lnk, $this->ID, $tblcaption, $this->UseDrillDownPanel, \"div_\" . $this->ID, FALSE);"+"\r\n"+"		} else {"+"\r\n"+"			return \"\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Show chart (FusionCharts)"+"\r\n"+"	function ShowChartFC($xml, $scroll = FALSE, $drilldown = FALSE) {"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		$typ = $this->ChartType; // Chart type (1/2/3/4/...)"+"\r\n"+"		$id = $this->ID; // Chart ID"+"\r\n"+"		$parms = $this->Parms; // \"bgcolor=FFFFFF|...\""+"\r\n"+"		$trends = $this->Trends; // Trend lines"+"\r\n"+"		$data = $this->Data;"+"\r\n"+"		$series = $this->Series;"+"\r\n"+"		$width = $this->ChartWidth;"+"\r\n"+"		$height = $this->ChartHeight;"+"\r\n"+"		$align = $this->ChartAlign;"+"\r\n"+"		if (empty($typ))"+"\r\n"+"			$typ = 1;"+"\r\n"+""+"\r\n"+"		// Get chart path / swf"+"\r\n"+"		$fcfchart = $this->IsFCFChart();"+"\r\n"+"		$showgrid = $this->UseGridComponent;"+"\r\n"+"		if ($typ > 8 && $typ <> 104 && $typ <> 22 && $typ <> 101) $showgrid = FALSE;"+"\r\n"+""+"\r\n"+"		$charttype = \"\";"+"\r\n"+"		switch ($typ) {"+"\r\n"+""+"\r\n"+"			// Single Series"+"\r\n"+"			case 1:	$charttype = ($scroll) ? \"scrollcolumn2d\" : \"column2d\"; break; // Column 2D"+"\r\n"+"			case 2:	$charttype = \"pie2d\"; break; // Pie 2D"+"\r\n"+"			case 3:	$charttype = \"bar2d\"; break; // Bar 2D"+"\r\n"+"			case 4: $charttype = ($scroll) ? \"scrollline2d\" : \"line\"; break; // Line 2D"+"\r\n"+"			case 5: $charttype = \"column3d\"; break; // Column 3D"+"\r\n"+"			case 6: $charttype = \"pie3d\"; break; // Pie 3D"+"\r\n"+"			case 7: $charttype = ($scroll) ? \"scrollarea2d\" : \"area2d\"; break; // Area 2D"+"\r\n"+"			case 8: $charttype = \"doughnut2d\"; break; // Doughnut 2D"+"\r\n"+"			"+"\r\n"+"			// Multi Series"+"\r\n"+"			case 9: $charttype = ($scroll) ? \"scrollcolumn2d\" : \"mscolumn2d\"; break; // Multi-series Column 2D"+"\r\n"+"			case 10: $charttype = \"mscolumn3d\"; break; // Multi-series Column 3D"+"\r\n"+"			case 11: $charttype = ($scroll) ? \"scrollline2d\" : \"msline\"; break; // Multi-series Line 2D"+"\r\n"+"			case 12: $charttype = ($scroll) ? \"scrollarea2d\" : \"msarea\"; break; // Multi-series Area 2D"+"\r\n"+"			case 13: $charttype = \"msbar2d\"; break; // Multi-series Bar 2D"+"\r\n"+"			"+"\r\n"+"			// Stacked"+"\r\n"+"			case 14: $charttype = ($scroll) ? \"scrollstackedcolumn2d\" : $charttype = \"stackedcolumn2d\"; break; // Stacked Column 2D"+"\r\n"+"			case 15: $charttype = \"stackedcolumn3d\"; break; // Stacked Column 3D"+"\r\n"+"			case 16: $charttype = \"stackedarea2d\"; break; // Stacked Area 2D"+"\r\n"+"			case 17: $charttype = \"stackedbar2d\"; break; // Stacked Bar 2D"+"\r\n"+"			"+"\r\n"+"			// Combination"+"\r\n"+"			case 18: $charttype = ($scroll) ? \"scrollcombidy2d\" : \"mscombidy2d\"; break; // Multi-series Column 2D Line Dual Y Chart"+"\r\n"+"			case 19: $charttype = \"mscolumn3dlinedy\"; break; // Multi-series Column 3D Line Dual Y Chart"+"\r\n"+"			"+"\r\n"+"			// Financial"+"\r\n"+"			case 20: $charttype = EWR_FUSIONCHARTS_FREE ? EWR_FUSIONCHARTS_FREE_CHART_PATH . \"FCF_Candlestick.swf\" : \"candlestick\"; break; // Candlestick"+"\r\n"+"			"+"\r\n"+"			// Other"+"\r\n"+"			case 21: $charttype = EWR_FUSIONCHARTS_FREE ? EWR_FUSIONCHARTS_FREE_CHART_PATH . \"FCF_Gantt.swf\" : \"gantt\"; break; // Gantt"+"\r\n"+"			case 22: $charttype = EWR_FUSIONCHARTS_FREE ? EWR_FUSIONCHARTS_FREE_CHART_PATH . \"FCF_Funnel.swf\" : \"funnel\"; break; // Funnel"+"\r\n"+"			"+"\r\n"+"			// Additional FusionCharts"+"\r\n"+"			case 101: $charttype = \"doughnut3d\"; break; // Doughnut 3D"+"\r\n"+"			case 102: $charttype = \"msbar3d\"; break; // Multi-series Bar 3D"+"\r\n"+"			case 103: $charttype = \"stackedbar3d\"; break; // Stacked Bar 3D"+"\r\n"+"			case 104: $charttype = \"msbar3d\"; break; // Bar 3D (using Multi-series Bar 3D for single series)"+"\r\n"+"			"+"\r\n"+"			// Default"+"\r\n"+"			default: $charttype = \"column2d\"; // Default = Column 2D"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Set width, height and align"+"\r\n"+"		if (is_numeric($width) && is_numeric($height)) {"+"\r\n"+"			$wrkwidth = $width;"+"\r\n"+"			$wrkheight = $height;"+"\r\n"+"		} else { // Default"+"\r\n"+"			$wrkwidth = EWR_CHART_WIDTH;"+"\r\n"+"			$wrkheight = EWR_CHART_HEIGHT;"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Output JavaScript for FC"+"\r\n"+"		$chartxml = $xml;"+"\r\n"+"		if ($chartxml == \"\") $chartxml = $fcfchart ? \"<graph/>\" : \"\"; // Empty chart"+"\r\n"+"		$chartid = \"chart_\" . $id;"+"\r\n"+"		if ($drilldown) $chartid .= \"_\" . ewr_Random();"+"\r\n"+"		if ($fcfchart && ewr_IsMobile()) {"+"\r\n"+"			$wrk = \"<div>\" . $ReportLanguage->Phrase(\"BrowserNoFlashSupport\") . \"</div>\";"+"\r\n"+"		} else {"+"\r\n"+"			$wrk = \"<script type=\\\"text/javascript\\\">\\n\";"+"\r\n"+"			$wrk .= \"var chartoptions = { \\\"width\\\": \" . $wrkwidth . \", \\\"height\\\": \" . $wrkheight . \",\\n\" ."+"\r\n"+"				\"\\t\\\"id\\\": \\\"\" . $chartid . \"\\\", \\\"type\\\": \\\"\" . $charttype . \"\\\" };\\n\";"+"\r\n"+"			$wrk .= \"var chartxml = \\\"\" . ewr_EscapeJs($chartxml) . \"\\\";\\n\";"+"\r\n"+"			if ($fcfchart) {"+"\r\n"+"				$wrk .= \"var cht_$id = new FusionChartsFree(chartoptions.type, chartoptions.id, chartoptions.width, chartoptions.height);\\n\";"+"\r\n"+"				$wrk .= \"cht_$id.addParam(\\\"wmode\\\", \\\"transparent\\\");\\n\";"+"\r\n"+"				$wrk .= \"cht_$id.setDataXML(chartxml);\\n\";"+"\r\n"+"			} else {"+"\r\n"+"				$wrk .= \"var cht_$id = new FusionCharts(chartoptions);\\n\";"+"\r\n"+"				$wrk .= \"cht_$id.setXMLData(chartxml);\\n\";"+"\r\n"+"				$wrk .= ($drilldown) ? \"ewrDrillCharts[ewrDrillCharts.length] = cht_$id.id;\\n\" :"+"\r\n"+"					\"ewrExportCharts[ewrExportCharts.length] = cht_$id.id;\\n\"; // Export chart"+"\r\n"+"			}"+"\r\n"+"			$wrk .= \"var f = \" . CurrentPage()->PageObjName . \".Chart_Rendering;\\n\";"+"\r\n"+"			$wrk .= \"if (typeof f == \\\"function\\\") f(cht_$id, 'chart_$id');\\n\";"+"\r\n"+"			$wrk .= \"cht_$id.render(\\\"div_\" . $id . \"\\\");\\n\";"+"\r\n"+"			$wrk .= \"f = \" . CurrentPage()->PageObjName . \".Chart_Rendered;\\n\";"+"\r\n"+"			$wrk .= \"if (typeof f == \\\"function\\\") f(cht_$id, 'chart_$id');\\n\";"+"\r\n"+""+"\r\n"+"			// Grid component"+"\r\n"+"			if ($showgrid && $chartxml <> \"\") {"+"\r\n"+""+"\r\n"+"				// Load Bar2D XML for Bar3D"+"\r\n"+"				if ($typ == 104) {"+"\r\n"+"					$this->SetChartParm(\"type\", \"3\", FALSE); // Reset to 2D"+"\r\n"+"					$this->XmlDoc = new DOMDocument(\"1.0\", \"utf-8\");"+"\r\n"+"					$chartxml = $this->ChartXml();"+"\r\n"+"					$this->SetChartParm(\"type\", \"104\", FALSE); // Restore chart type"+"\r\n"+"				}"+"\r\n"+""+"\r\n"+"				// Remove clickurl first"+"\r\n"+"				$doc = new DOMDocument();"+"\r\n"+"				$doc->loadXML($chartxml);"+"\r\n"+"				$doc->documentElement->setAttribute(\"clickurl\", \"\");"+"\r\n"+"				$chartgridxml = $doc->saveXML();"+"\r\n"+""+"\r\n"+"				$gridid = $id . \"_grid\";"+"\r\n"+"				$chartid = \"chart_\" . $gridid;"+"\r\n"+"				if ($drilldown) $chartid .= \"_\" . ewr_Random();"+"\r\n"+"				$wrkgridheight = $this->ChartGridHeight;"+"\r\n"+"				$wrk .= \"chartxml = \\\"\" . ewr_EscapeJs($chartgridxml) . \"\\\";\\n\";"+"\r\n"+"				$wrk .= \"chartoptions = { \\\"width\\\": \" . $wrkwidth . \", \\\"height\\\": \" . $wrkgridheight . \",\\n\" ."+"\r\n"+"					\"\\t\\\"id\\\": \\\"\" . $chartid . \"\\\", \\\"type\\\": \\\"ssgrid\\\" };\\n\";"+"\r\n"+"				$wrk .= \"var cht_$gridid = new FusionCharts(chartoptions);\\n\";"+"\r\n"+"				$wrk .= \"cht_$gridid.setXMLData(chartxml);\\n\";"+"\r\n"+"				$wrk .= ($drilldown) ? \"ewrDrillCharts[ewrDrillCharts.length] = cht_$gridid.id;\\n\" :"+"\r\n"+"					\"ewrExportCharts[ewrExportCharts.length] = cht_$gridid.id;\\n\"; // Export chart"+"\r\n"+"				// Set Grid specific parameters"+"\r\n"+"				if ($this->ChartGridConfig)"+"\r\n"+"					$wrk .= \"cht_$gridid.configure(\" . $this->ChartGridConfig . \");\\n\";"+"\r\n"+"				$wrk .= \"cht_$gridid.render(\\\"div_\" . $gridid . \"\\\");\\n\";"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"			// Debug mode"+"\r\n"+"			if (!$fcfchart && EWR_DEBUG_ENABLED)"+"\r\n"+"				$wrk .= \"FusionCharts[\\\"debugger\\\"].enable(true, function(message) { console.log(message); });\\n\";"+"\r\n"+""+"\r\n"+"			$wrk .= \"</script>\\n\";"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Show XML for debug"+"\r\n"+"		if (EWR_DEBUG_ENABLED)"+"\r\n"+"			$wrk .= \"<p>(Chart XML): \" . ewr_HtmlEncode($chartxml) . \"</p>\";"+"\r\n"+"		return $wrk;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[34] = ""+"\r\n"+"	";
ewAr[35] = ""+"\r\n"+"	";
ewAr[36] = ""+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"//"+"\r\n"+"// Column class"+"\r\n"+"//"+"\r\n"+"class crCrosstabColumn {"+"\r\n"+"	var $Caption;"+"\r\n"+"	var $Value;"+"\r\n"+"	var $Visible;"+"\r\n"+""+"\r\n"+"	function __construct($value, $caption, $visible = TRUE) {"+"\r\n"+"		$this->Caption = $caption;"+"\r\n"+"		$this->Value = $value;"+"\r\n"+"		$this->Visible = $visible;"+"\r\n"+"    }"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"//"+"\r\n"+"// Advanced filter class"+"\r\n"+"//"+"\r\n"+"class crAdvancedFilter {"+"\r\n"+"	var $ID;"+"\r\n"+"	var $Name;"+"\r\n"+"	var $FunctionName;"+"\r\n"+"	var $Enabled = TRUE;"+"\r\n"+""+"\r\n"+"	function __construct($filterid, $filtername, $filterfunc) {"+"\r\n"+"		$this->ID = $filterid;"+"\r\n"+"		$this->Name = $filtername;"+"\r\n"+"		$this->FunctionName = $filterfunc;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"";
ewAr[37] = ""+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Menu class"+"\r\n"+" */"+"\r\n"+"class crMenu {"+"\r\n"+""+"\r\n"+"	var $Id;"+"\r\n"+"	var $MenuBarClassName = EWR_MENUBAR_CLASSNAME;"+"\r\n"+"	var $MenuClassName = EWR_MENU_CLASSNAME;"+"\r\n"+"	var $SubMenuClassName = EWR_SUBMENU_CLASSNAME;"+"\r\n"+"	var $SubMenuDropdownImage = EWR_SUBMENU_DROPDOWN_IMAGE;"+"\r\n"+"	var $SubMenuDropdownIconClassName = EWR_SUBMENU_DROPDOWN_ICON_CLASSNAME;"+"\r\n"+"	var $MenuDividerClassName = EWR_MENU_DIVIDER_CLASSNAME;"+"\r\n"+"	var $MenuItemClassName = EWR_MENU_ITEM_CLASSNAME;"+"\r\n"+"	var $SubMenuItemClassName = EWR_SUBMENU_ITEM_CLASSNAME;"+"\r\n"+"	var $MenuActiveItemClassName = EWR_MENU_ACTIVE_ITEM_CLASS;"+"\r\n"+"	var $SubMenuActiveItemClassName = EWR_SUBMENU_ACTIVE_ITEM_CLASS;"+"\r\n"+"	var $MenuRootGroupTitleAsSubMenu = EWR_MENU_ROOT_GROUP_TITLE_AS_SUBMENU;"+"\r\n"+"	var $ShowRightMenu = EWR_SHOW_RIGHT_MENU;"+"\r\n"+"	var $MenuLinkDropdownClass = \"\";"+"\r\n"+"	var $MenuLinkClassName = \"\";"+"\r\n"+"	var $IsMobile = FALSE;"+"\r\n"+"	var $IsRoot = FALSE;"+"\r\n"+"	var $NoItem = NULL;"+"\r\n"+"	var $ItemData = array();"+"\r\n"+""+"\r\n"+"	function __construct($id, $mobile = FALSE) {"+"\r\n"+"		$this->Id = $id;"+"\r\n"+"		$this->IsMobile = $mobile;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add a menu item"+"\r\n"+"	function AddMenuItem($id, $name, $text, $url, $parentid = -1, $src = \"\", $allowed = TRUE, $grouptitle = FALSE, $customurl = FALSE) {"+"\r\n"+"		$item = new crMenuItem($id, $name, $text, $url, $parentid, $src, $allowed, $grouptitle, $customurl);"+"\r\n"+"		$item->Parent = &$this;"+"\r\n"+""+"\r\n"+"		// Fire MenuItem_Adding event"+"\r\n"+"		if (function_exists(\"MenuItem_Adding\") && !MenuItem_Adding($item))"+"\r\n"+"			return;"+"\r\n"+""+"\r\n"+"		if ($item->ParentId < 0) {"+"\r\n"+"			$this->AddItem($item);"+"\r\n"+"		} else {"+"\r\n"+"			if ($oParentMenu = &$this->FindItem($item->ParentId))"+"\r\n"+"				$oParentMenu->AddItem($item, $this->IsMobile);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add item to internal array"+"\r\n"+"	function AddItem($item) {"+"\r\n"+"		$this->ItemData[] = $item;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Clear all menu items"+"\r\n"+"	function Clear() {"+"\r\n"+"		$this->ItemData = array();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Find item"+"\r\n"+"	function &FindItem($id) {"+"\r\n"+"		$cnt = count($this->ItemData);"+"\r\n"+"		for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"			$item = &$this->ItemData[$i];"+"\r\n"+"			if ($item->Id == $id) {"+"\r\n"+"				return $item;"+"\r\n"+"			} elseif (!is_null($item->SubMenu)) {"+"\r\n"+"				if ($subitem = &$item->SubMenu->FindItem($id))"+"\r\n"+"					return $subitem;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$noitem = $this->NoItem;"+"\r\n"+"		return $noitem;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Find item by menu text"+"\r\n"+"	function &FindItemByText($txt) {"+"\r\n"+"		$cnt = count($this->ItemData);"+"\r\n"+"		for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"			$item = &$this->ItemData[$i];"+"\r\n"+"			if ($item->Text == $txt) {"+"\r\n"+"				return $item;"+"\r\n"+"			} elseif (!is_null($item->SubMenu)) {"+"\r\n"+"				if ($subitem = &$item->SubMenu->FindItemByText($txt))"+"\r\n"+"					return $subitem;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$noitem = $this->NoItem;"+"\r\n"+"		return $noitem;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get menu item count"+"\r\n"+"	function Count() {"+"\r\n"+"		return count($this->ItemData);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Move item to position"+"\r\n"+"	function MoveItem($Text, $Pos) {"+"\r\n"+"		$cnt = count($this->ItemData);"+"\r\n"+"		if ($Pos < 0) {"+"\r\n"+"			$Pos = 0;"+"\r\n"+"		} elseif ($Pos >= $cnt) {"+"\r\n"+"			$Pos = $cnt - 1;"+"\r\n"+"		}"+"\r\n"+"		$item = NULL;"+"\r\n"+"		$cnt = count($this->ItemData);"+"\r\n"+"		for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"			if ($this->ItemData[$i]->Text == $Text) {"+"\r\n"+"				$item = $this->ItemData[$i];"+"\r\n"+"				break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($item) {"+"\r\n"+"			unset($this->ItemData[$i]);"+"\r\n"+"			$this->ItemData = array_merge(array_slice($this->ItemData, 0, $Pos),"+"\r\n"+"				array($item), array_slice($this->ItemData, $Pos));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if sub menu should be shown"+"\r\n"+"	function RenderSubMenu($item) {"+"\r\n"+"		if (!is_null($item->SubMenu)) {"+"\r\n"+"			foreach ($item->SubMenu->ItemData as $subitem) {"+"\r\n"+"				if ($item->SubMenu->RenderItem($subitem))"+"\r\n"+"					return TRUE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if a menu item should be shown"+"\r\n"+"	function RenderItem($item) {"+"\r\n"+"		if (!is_null($item->SubMenu)) {"+"\r\n"+"			foreach ($item->SubMenu->ItemData as $subitem) {"+"\r\n"+"				if ($item->SubMenu->RenderItem($subitem))"+"\r\n"+"					return TRUE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return ($item->Allowed && $item->Url <> \"\");"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Check if this menu should be rendered"+"\r\n"+"	function RenderMenu() {"+"\r\n"+"		foreach ($this->ItemData as $item) {"+"\r\n"+"			if ($this->RenderItem($item))"+"\r\n"+"				return TRUE;"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Render the menu"+"\r\n"+"	function Render($ret = FALSE) {"+"\r\n"+"		if (function_exists(\"Menu_Rendering\") && $this->IsRoot) Menu_Rendering($this);"+"\r\n"+"		if (!$this->RenderMenu())"+"\r\n"+"			return;"+"\r\n"+"		if (!$this->IsMobile) {"+"\r\n"+"			if ($this->IsRoot) {"+"\r\n"+"				$str = \"<ul\";"+"\r\n"+"				if ($this->Id <> \"\") {"+"\r\n"+"					if (is_numeric($this->Id)) {"+"\r\n"+"						$str .= \" id=\\\"menu_\" . $this->Id . \"\\\"\";"+"\r\n"+"					} else {"+"\r\n"+"						$str .= \" id=\\\"\" . $this->Id . \"\\\"\";"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				$str .= \" class=\\\"\" . $this->MenuClassName . \"\\\">\\n\";"+"\r\n"+"			} else {"+"\r\n"+"				$str = \"<ul class=\\\"\" . $this->SubMenuClassName . \"\\\" role=\\\"menu\\\">\\n\";"+"\r\n"+"			}"+"\r\n"+"		} else {"+"\r\n"+"			$str = \"\";"+"\r\n"+"		}"+"\r\n"+"		$gcnt = 0; // Group count"+"\r\n"+"		$gtitle = FALSE; // Last item is group title"+"\r\n"+"		$i = 0; // Menu item count"+"\r\n"+"		$cururl = substr(ewr_CurrentUrl(), strrpos(ewr_CurrentUrl(), \"/\")+1);"+"\r\n"+"		foreach ($this->ItemData as $item) {"+"\r\n"+"			if ($this->RenderItem($item)) {"+"\r\n"+"				$i++;"+"\r\n"+"				if (!$this->IsMobile && $gtitle && ($gcnt >= 1 || $this->IsRoot)) // Add divider for previous group"+"\r\n"+"					$str .= \"<li class=\\\"\" . $this->MenuDividerClassName . \"\\\"></li>\\n\";"+"\r\n"+"				if ($item->GroupTitle && (!$this->IsRoot || !$this->MenuRootGroupTitleAsSubMenu)) { // Group title"+"\r\n"+"					$gtitle = TRUE;"+"\r\n"+"					$gcnt += 1;"+"\r\n"+"					if (strval($item->Text) <> \"\") {"+"\r\n"+"						if ($this->IsMobile)"+"\r\n"+"							$str .= \"<li data-role=\\\"list-divider\\\">\" . $item->Text . \"</li>\\n\";"+"\r\n"+"						else"+"\r\n"+"							$str .= \"<li class=\\\"dropdown-header\\\">\" . $item->Text . \"</li>\\n\";"+"\r\n"+"					}"+"\r\n"+"					if (!is_null($item->SubMenu)) {"+"\r\n"+"						foreach ($item->SubMenu->ItemData as $subitem) {"+"\r\n"+"							$liclass = !is_null($subitem->SubMenu) && $this->RenderSubMenu($subitem) ? $this->SubMenuItemClassName : \"\";"+"\r\n"+"							$aclass = \"\";"+"\r\n"+"							if (!$subitem->IsCustomUrl && ewr_CurrentPage() == ewr_GetPageName($subitem->Url) || $subitem->IsCustomUrl && $cururl == $subitem->Url) {"+"\r\n"+"								ewr_AppendClass($liclass, $this->MenuActiveItemClassName);"+"\r\n"+"								$subitem->Url = \"javascript:void(0);\";"+"\r\n"+"							}"+"\r\n"+"							if ($this->RenderItem($subitem)) {"+"\r\n"+"								if ($this->IsMobile && $item->GroupTitle)"+"\r\n"+"									ewr_AppendClass($aclass, \"ewIndent\");"+"\r\n"+"								$str .= $subitem->Render($aclass, $liclass, $this->IsMobile) . \"\\n\"; // Create <LI>"+"\r\n"+"							}"+"\r\n"+"						}"+"\r\n"+"					}"+"\r\n"+"				} else {"+"\r\n"+"					$gtitle = FALSE;"+"\r\n"+"					$liclass = !is_null($item->SubMenu) && $this->RenderSubMenu($item) ? ($this->IsRoot ? $this->MenuItemClassName : $this->SubMenuItemClassName) : \"\";"+"\r\n"+"					$aclass = \"\";"+"\r\n"+"					if (!$item->IsCustomUrl && ewr_CurrentPage() == ewr_GetPageName($item->Url) || $item->IsCustomUrl && $cururl == $item->Url) {"+"\r\n"+"						if ($this->IsRoot)"+"\r\n"+"							ewr_AppendClass($liclass, $this->MenuActiveItemClassName);"+"\r\n"+"						else"+"\r\n"+"							ewr_AppendClass($liclass, $this->SubMenuActiveItemClassName);"+"\r\n"+"						$item->Url = \"javascript:void(0);\";"+"\r\n"+"					}"+"\r\n"+"					$str .= $item->Render($aclass, $liclass, $this->IsMobile) . \"\\n\"; // Create <LI>"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($this->IsMobile) {"+"\r\n"+"			$str = \"<ul data-role=\\\"listview\\\" data-filter=\\\"true\\\">\" . $str . \"</ul>\\n\";"+"\r\n"+"		} elseif ($this->IsRoot) {"+"\r\n"+"			$str .= \"</ul>\\n\";"+"\r\n"+"			if (EWR_MENUBAR_BRAND <> \"\") {"+"\r\n"+"				$brandhref = (EWR_MENUBAR_BRAND_HYPERLINK == \"\") ? \"#\" : EWR_MENUBAR_BRAND_HYPERLINK;"+"\r\n"+"				$str = \"<a class=\\\"navbar-brand hidden-xs\\\" href=\\\"\" . ewr_HtmlEncode($brandhref) . \"\\\">\" . EWR_MENUBAR_BRAND . \"</a>\" . $str;"+"\r\n"+"			}"+"\r\n"+"			// Add right menu"+"\r\n"+"			if ($this->ShowRightMenu)"+"\r\n"+"				$str .= \"<ul class=\\\"nav navbar-nav navbar-right\\\"></ul>\";"+"\r\n"+"			if ($this->MenuBarClassName <> \"\")"+"\r\n"+"				$str = \"<div class=\\\"\" . $this->MenuBarClassName . \"\\\">\" . $str . \"</div>\";"+"\r\n"+"		} else {"+"\r\n"+"			$str .= \"</ul>\\n\";"+"\r\n"+"		}"+"\r\n"+"		if ($ret) // Return as string"+"\r\n"+"			return $str;"+"\r\n"+"		echo $str; // Output"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Menu item class"+"\r\n"+"class crMenuItem {"+"\r\n"+""+"\r\n"+"	var $Id;"+"\r\n"+"	var $Name;"+"\r\n"+"	var $Text;"+"\r\n"+"	var $Url;"+"\r\n"+"	var $ParentId; "+"\r\n"+"	var $SubMenu = NULL; // Data type = crMenu"+"\r\n"+"	var $Source;"+"\r\n"+"	var $Allowed = TRUE;"+"\r\n"+"	var $Target;"+"\r\n"+"	var $GroupTitle;"+"\r\n"+"	var $IsCustomUrl;"+"\r\n"+"	var $Parent;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct($id, $name, $text, $url, $parentid = -1, $src = \"\", $allowed = TRUE, $grouptitle = FALSE, $customurl = FALSE) {"+"\r\n"+"		$this->Id = $id;"+"\r\n"+"		$this->Name = $name;"+"\r\n"+"		$this->Text = $text;"+"\r\n"+"		$this->Url = $url;"+"\r\n"+"		$this->ParentId = $parentid;"+"\r\n"+"		$this->Source = $src;"+"\r\n"+"		$this->Allowed = $allowed;"+"\r\n"+"		$this->GroupTitle = $grouptitle;"+"\r\n"+"		$this->IsCustomUrl = $customurl;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add submenu item"+"\r\n"+"	function AddItem($item, $mobile = FALSE) {"+"\r\n"+"		if (is_null($this->SubMenu)) {"+"\r\n"+"			$this->SubMenu = new crMenu($this->Id, $mobile);"+"\r\n"+"			$this->SubMenu->MenuBarClassName = $this->Parent->MenuBarClassName;"+"\r\n"+"			$this->SubMenu->MenuClassName = $this->Parent->MenuClassName;"+"\r\n"+"			$this->SubMenu->SubMenuClassName = $this->Parent->SubMenuClassName;"+"\r\n"+"			$this->SubMenu->SubMenuDropdownImage = $this->Parent->SubMenuDropdownImage;"+"\r\n"+"			$this->SubMenu->SubMenuDropdownIconClassName = $this->Parent->SubMenuDropdownIconClassName;"+"\r\n"+"			$this->SubMenu->MenuDividerClassName = $this->Parent->MenuDividerClassName;"+"\r\n"+"			$this->SubMenu->MenuItemClassName = $this->Parent->MenuItemClassName;"+"\r\n"+"			$this->SubMenu->SubMenuItemClassName = $this->Parent->SubMenuItemClassName;"+"\r\n"+"			$this->SubMenu->MenuActiveItemClassName = $this->Parent->MenuActiveItemClassName;"+"\r\n"+"			$this->SubMenu->SubMenuActiveItemClassName = $this->Parent->SubMenuActiveItemClassName;"+"\r\n"+"			$this->SubMenu->MenuRootGroupTitleAsSubMenu = $this->Parent->MenuRootGroupTitleAsSubMenu;"+"\r\n"+"			$this->SubMenu->MenuLinkDropdownClass = $this->Parent->MenuLinkDropdownClass;"+"\r\n"+"			$this->SubMenu->MenuLinkClassName = $this->Parent->MenuLinkClassName;"+"\r\n"+"		}"+"\r\n"+"		$this->SubMenu->AddItem($item);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Render"+"\r\n"+"	function Render($aclass = \"\", $liclass = \"\", $mobile = FALSE) {"+"\r\n"+"		// Create <A>"+"\r\n"+"		$url = ewr_GetUrl($this->Url);"+"\r\n"+"		if (!is_null($this->SubMenu))"+"\r\n"+"			$submenuhtml = $this->SubMenu->Render(TRUE);"+"\r\n"+"		else"+"\r\n"+"			$submenuhtml = \"\";"+"\r\n"+"		if ($mobile) {"+"\r\n"+"			//###$url = str_replace(\"#\",\"?chart=\",$url);"+"\r\n"+"			if ($url == \"\") $url = \"#\";"+"\r\n"+"			$attrs = array(\"class\" => $aclass, \"rel\" => ($url != \"#\") ? \"external\" : \"\", \"href\" => $url, \"target\" => $this->Target);"+"\r\n"+"		} else {"+"\r\n"+"			if ($url == \"\") $url = \"#\";"+"\r\n"+"			if (!is_null($this->SubMenu) && $this->SubMenu->MenuLinkDropdownClass <> \"\" && $submenuhtml <> \"\")"+"\r\n"+"				ewr_PrependClass($aclass, $this->SubMenu->MenuLinkDropdownClass);"+"\r\n"+"			$attrs = array(\"class\" => $aclass, \"href\" => $url, \"target\" => $this->Target);"+"\r\n"+"		}"+"\r\n"+"		$text = $this->Text;"+"\r\n"+"		if (!is_null($this->SubMenu) && $submenuhtml <> \"\") {"+"\r\n"+"			if ($this->Parent->SubMenuDropdownIconClassName <> \"\")"+"\r\n"+"				$text .= \"<span class=\\\"\" . $this->Parent->SubMenuDropdownIconClassName . \"\\\"></span>\";"+"\r\n"+"			if ($this->Parent->SubMenuDropdownImage <> \"\" && $this->ParentId == -1)"+"\r\n"+"				$text .= $this->Parent->SubMenuDropdownImage;"+"\r\n"+"		}"+"\r\n"+"		$innerhtml = ewr_HtmlElement(\"a\", $attrs, $text);"+"\r\n"+"		if (!is_null($this->SubMenu)) {"+"\r\n"+"			if ($url <> \"#\" && $this->SubMenu->MenuLinkClassName <> \"\" && $submenuhtml <> \"\") { // Add click link for mobile menu"+"\r\n"+"				$attrs2 = array(\"class\" => \"ewMenuLink\", \"href\" => $url);"+"\r\n"+"				$text2 = \"<span class=\\\"\" . $this->SubMenu->MenuLinkClassName . \"\\\"></span>\";"+"\r\n"+"				$innerhtml = ewr_HtmlElement(\"a\", $attrs2, $text2) . $innerhtml;"+"\r\n"+"			}"+"\r\n"+"			if ($mobile && $this->Url <> \"#\")"+"\r\n"+"				$innerhtml .= $innerhtml;"+"\r\n"+"			$innerhtml .= $submenuhtml;"+"\r\n"+"		}"+"\r\n"+"		// Create <LI>"+"\r\n"+"		return ewr_HtmlElement(\"li\", array(\"id\" => $this->Name, \"class\" => $liclass), $innerhtml);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Menu Rendering event"+"\r\n"+"";
ewAr[38] = ""+"\r\n"+"// MenuItem Adding event"+"\r\n"+"";
ewAr[39] = ""+"\r\n"+""+"\r\n"+"";
ewAr[40] = ""+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * List option collection class"+"\r\n"+" */"+"\r\n"+"class crListOptions {"+"\r\n"+"	var $Items = array();"+"\r\n"+"	var $CustomItem = \"\";"+"\r\n"+"	var $Tag = \"td\";"+"\r\n"+"	var $TagClassName = \"\";"+"\r\n"+"	var $TableVar = \"\";"+"\r\n"+"	var $RowCnt = \"\";"+"\r\n"+"	var $ScriptType = \"block\";"+"\r\n"+"	var $ScriptId = \"\";"+"\r\n"+"	var $ScriptClassName = \"\";"+"\r\n"+"	var $JavaScript = \"\";"+"\r\n"+"	var $RowSpan = 1;"+"\r\n"+"	var $UseDropDownButton = FALSE;"+"\r\n"+"	var $UseButtonGroup = FALSE;"+"\r\n"+"	var $ButtonClass = \"\";"+"\r\n"+"	var $GroupOptionName = \"button\";"+"\r\n"+"	var $DropDownButtonPhrase = \"\";"+"\r\n"+"	var $UseImageAndText = FALSE;"+"\r\n"+""+"\r\n"+"	// Check visible"+"\r\n"+"	function Visible() {"+"\r\n"+"		foreach ($this->Items as $item) {"+"\r\n"+"			if ($item->Visible)"+"\r\n"+"				return TRUE;"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check group option visible"+"\r\n"+"	function GroupOptionVisible() {"+"\r\n"+"		$cnt = 0;"+"\r\n"+"		foreach ($this->Items as $item) {"+"\r\n"+"			if ($item->Name <> $this->GroupOptionName && "+"\r\n"+"				(($item->Visible && $item->ShowInDropDown && $this->UseDropDownButton) ||"+"\r\n"+"				($item->Visible && $item->ShowInButtonGroup && $this->UseButtonGroup))) {"+"\r\n"+"				$cnt += 1;"+"\r\n"+"				if ($this->UseDropDownButton && $cnt > 1)"+"\r\n"+"					return TRUE;"+"\r\n"+"				elseif ($this->UseButtonGroup)"+"\r\n"+"					return TRUE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add and return a new option"+"\r\n"+"	function &Add($Name) {"+"\r\n"+"		$item = new crListOption($Name);"+"\r\n"+"		$item->Parent = &$this;"+"\r\n"+"		$this->Items[$Name] = $item;"+"\r\n"+"		return $item;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load default settings"+"\r\n"+"	function LoadDefault() {"+"\r\n"+"		$this->CustomItem = \"\";"+"\r\n"+"		foreach ($this->Items as $key => $item)"+"\r\n"+"			$this->Items[$key]->Body = \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Hide all options"+"\r\n"+"	function HideAllOptions($Lists=array()) {"+"\r\n"+"		foreach ($this->Items as $key => $item)"+"\r\n"+"			if (!in_array($key, $Lists))"+"\r\n"+"				$this->Items[$key]->Visible = FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Show all options"+"\r\n"+"	function ShowAllOptions() {"+"\r\n"+"		foreach ($this->Items as $key => $item)"+"\r\n"+"			$this->Items[$key]->Visible = TRUE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get item by name"+"\r\n"+"	// Predefined names: view/edit/copy/delete/detail_<DetailTable>/userpermission/checkbox"+"\r\n"+"	function &GetItem($Name) {"+"\r\n"+"		$item = array_key_exists($Name, $this->Items) ? $this->Items[$Name] : NULL;"+"\r\n"+"		return $item;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get item position"+"\r\n"+"	function ItemPos($Name) {"+"\r\n"+"		$pos = 0;"+"\r\n"+"		foreach ($this->Items as $item) {"+"\r\n"+"			if ($item->Name == $Name)"+"\r\n"+"				return $pos;"+"\r\n"+"			$pos++;"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Move item to position"+"\r\n"+"	function MoveItem($Name, $Pos) {"+"\r\n"+"		$cnt = count($this->Items);"+"\r\n"+"		if ($Pos < 0) // If negative, count from the end"+"\r\n"+"			$Pos = $cnt + $Pos;"+"\r\n"+"		if ($Pos < 0)"+"\r\n"+"			$Pos = 0;"+"\r\n"+"		if ($Pos >= $cnt)"+"\r\n"+"			$Pos = $cnt - 1;"+"\r\n"+"		$item = $this->GetItem($Name);"+"\r\n"+"		if ($item) {"+"\r\n"+"			unset($this->Items[$Name]);"+"\r\n"+"			$this->Items = array_merge(array_slice($this->Items, 0, $Pos),"+"\r\n"+"				array($Name => $item), array_slice($this->Items, $Pos));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Render list options"+"\r\n"+"	function Render($Part, $Pos=\"\", $RowCnt=\"\", $ScriptType=\"block\", $ScriptId=\"\", $ScriptClassName=\"\") {"+"\r\n"+""+"\r\n"+"		if ($this->CustomItem == \"\" && $groupitem = &$this->GetItem($this->GroupOptionName) && $this->ShowPos($groupitem->OnLeft, $Pos)) {"+"\r\n"+"			if ($this->UseDropDownButton) { // Render dropdown"+"\r\n"+"				$buttonvalue = \"\";"+"\r\n"+"				$cnt = 0;"+"\r\n"+"				foreach ($this->Items as $item) {"+"\r\n"+"					if ($item->Name <> $this->GroupOptionName && $item->Visible && $item->ShowInDropDown) {"+"\r\n"+"						$buttonvalue .= $item->Body;"+"\r\n"+"						$cnt += 1;"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				if ($cnt <= 1) {"+"\r\n"+"					$this->UseDropDownButton = FALSE; // No need to use drop down button"+"\r\n"+"				} else {"+"\r\n"+"					$groupitem->Body = $this->RenderDropDownButton($buttonvalue, $Pos);"+"\r\n"+"					$groupitem->Visible = TRUE;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			if (!$this->UseDropDownButton && $this->UseButtonGroup) { // Render button group"+"\r\n"+"				$visible = FALSE;"+"\r\n"+"				$buttongroups = array();"+"\r\n"+"				foreach ($this->Items as $item) {"+"\r\n"+"					if ($item->Name <> $this->GroupOptionName && $item->Visible && $item->ShowInButtonGroup && $item->Body <> \"\") {"+"\r\n"+"						$visible = TRUE;"+"\r\n"+"						$buttonvalue = ($this->UseImageAndText) ? $item->GetImageAndText($item->Body) : $item->Body;"+"\r\n"+"						if (!array_key_exists($item->ButtonGroupName, $buttongroups)) $buttongroups[$item->ButtonGroupName] = \"\";"+"\r\n"+"						$buttongroups[$item->ButtonGroupName] .= $buttonvalue;"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				$groupitem->Body = \"\";"+"\r\n"+"				foreach ($buttongroups as $buttongroup => $buttonvalue)"+"\r\n"+"					$groupitem->Body .= $this->RenderButtonGroup($buttonvalue);"+"\r\n"+"				if ($visible)"+"\r\n"+"				$groupitem->Visible = TRUE;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		$this->RenderEx($Part, $Pos, $RowCnt, $ScriptType, $ScriptId, $ScriptClassName);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	function RenderEx($Part, $Pos=\"\", $RowCnt=\"\", $ScriptType=\"block\", $ScriptId=\"\", $ScriptClassName=\"\") {"+"\r\n"+"		$this->RowCnt = $RowCnt;"+"\r\n"+"		$this->ScriptType = $ScriptType;"+"\r\n"+"		$this->ScriptId = $ScriptId;"+"\r\n"+"		$this->ScriptClassName = $ScriptClassName;"+"\r\n"+"		$this->JavaScript = \"\";"+"\r\n"+"		//$this->Tag = ($Pos <> \"\" && $Pos <> \"bottom\") ? \"td\" : \"span\";"+"\r\n"+"		$this->Tag = ($Pos <> \"\" && $Pos <> \"bottom\") ? \"td\" : \"div\";"+"\r\n"+"		if ($this->CustomItem <> \"\") {"+"\r\n"+"			$cnt = 0;"+"\r\n"+"			$opt = NULL;"+"\r\n"+"			foreach ($this->Items as &$item) {"+"\r\n"+"				if ($this->ShowItem($item, $ScriptId, $Pos))"+"\r\n"+"					$cnt++;"+"\r\n"+"				if ($item->Name == $this->CustomItem)"+"\r\n"+"					$opt = &$item;"+"\r\n"+"			}"+"\r\n"+"			$bUseButtonGroup = $this->UseButtonGroup; // Backup options"+"\r\n"+"			$bUseImageAndText = $this->UseImageAndText;"+"\r\n"+"			$this->UseButtonGroup = TRUE; // Show button group for custom item"+"\r\n"+"			$this->UseImageAndText = TRUE; // Use image and text for custom item"+"\r\n"+"			if (is_object($opt) && $cnt > 0) {"+"\r\n"+"				if ($ScriptId <> \"\" || $this->ShowPos($opt->OnLeft, $Pos)) {"+"\r\n"+"					echo $opt->Render($Part, $cnt);"+"\r\n"+"				} else {"+"\r\n"+"					echo $opt->Render(\"\", $cnt);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			$this->UseButtonGroup = $bUseButtonGroup; // Restore options"+"\r\n"+"			$this->UseImageAndText = $bUseImageAndText;"+"\r\n"+"		} else {"+"\r\n"+"			foreach ($this->Items as &$item) {"+"\r\n"+"				if ($this->ShowItem($item, $ScriptId, $Pos))"+"\r\n"+"					echo $item->Render($Part, 1);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	function ShowItem($item, $ScriptId, $Pos) {"+"\r\n"+"		$show = $item->Visible && ($ScriptId <> \"\" || $this->ShowPos($item->OnLeft, $Pos));"+"\r\n"+"		if ($show)"+"\r\n"+"			if ($this->UseDropDownButton)"+"\r\n"+"				$show = ($item->Name == $this->GroupOptionName || !$item->ShowInDropDown);"+"\r\n"+"			elseif ($this->UseButtonGroup)"+"\r\n"+"				$show = ($item->Name == $this->GroupOptionName || !$item->ShowInButtonGroup);"+"\r\n"+"		return $show;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	function ShowPos($OnLeft, $Pos) {"+"\r\n"+"		return ($OnLeft && $Pos == \"left\") || (!$OnLeft && $Pos == \"right\") || ($Pos == \"\") || ($Pos == \"bottom\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Concat options and return concatenated HTML"+"\r\n"+"	// - pattern - regular expression pattern for matching the option names, e.g. '/^detail_/'"+"\r\n"+"	function Concat($pattern, $separator = \"\") {"+"\r\n"+"		$ar = array();"+"\r\n"+"		$keys = array_keys($this->Items);"+"\r\n"+"		foreach ($keys as $key) {"+"\r\n"+"			if (preg_match($pattern, $key) && trim($this->Items[$key]->Body) <> \"\")"+"\r\n"+"				$ar[] = $this->Items[$key]->Body;"+"\r\n"+"		}"+"\r\n"+"		return implode($separator, $ar);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Merge options to the first option and return it"+"\r\n"+"	// - pattern - regular expression pattern for matching the option names, e.g. '/^detail_/'"+"\r\n"+"	function &Merge($pattern, $separator = \"\") {"+"\r\n"+"		$keys = array_keys($this->Items);"+"\r\n"+"		$first = NULL;"+"\r\n"+"		foreach ($keys as $key) {"+"\r\n"+"			if (preg_match($pattern, $key)) {"+"\r\n"+"				if (!$first) {"+"\r\n"+"					$first = $this->Items[$key];"+"\r\n"+"					$first->Body = $this->Concat($pattern, $separator);"+"\r\n"+"				} else {"+"\r\n"+"					$this->Items[$key]->Visible = FALSE;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $first;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get button group link"+"\r\n"+"	function RenderButtonGroup($body) {"+"\r\n"+"		// Get all hidden inputs"+"\r\n"+"		// format: <input type=\"hidden\" ...>"+"\r\n"+"//		$inputs = array();"+"\r\n"+"//		if (preg_match_all('/<input\\s+([^>]*)>/i', $body, $inputmatches, PREG_SET_ORDER)) {"+"\r\n"+"//			foreach ($inputmatches as $inputmatch) {"+"\r\n"+"//				$body = str_replace($inputmatch[0], '', $body); "+"\r\n"+"//				if (preg_match('/\\s+type\\s*=\\s*[\\'\"]hidden[\\'\"]/i', $inputmatch[0])) // Match type='hidden'"+"\r\n"+"//					$inputs[] = $inputmatch[0];"+"\r\n"+"//			}"+"\r\n"+"//		}"+"\r\n"+"		// Get all buttons"+"\r\n"+"		// format: <div class=\"btn-group\">...</div>"+"\r\n"+"		$btns = array();"+"\r\n"+"		if (preg_match_all('/<div\\s+class\\s*=\\s*[\\'\"]btn-group[\\'\"]([^>]*)>([\\s\\S]*?)<\\/div\\s*>/i', $body, $btnmatches, PREG_SET_ORDER)) {"+"\r\n"+"			foreach ($btnmatches as $btnmatch) {"+"\r\n"+"				$body = str_replace($btnmatch[0], '', $body); "+"\r\n"+"				$btns[] = $btnmatch[0];"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$links = '';"+"\r\n"+"		// Get all links/buttons"+"\r\n"+"		// format: <a ...>...</a> / <button ...>...</button>"+"\r\n"+"		if (preg_match_all('/<(a|button)([^>]*)>([\\s\\S]*?)<\\/(a|button)\\s*>/i', $body, $matches, PREG_SET_ORDER)) {"+"\r\n"+"			foreach ($matches as $match) {"+"\r\n"+"				$tag = $match[1];"+"\r\n"+"				if (preg_match('/\\s+class\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $match[2], $submatches)) { // Match class='class'"+"\r\n"+"					$class = $submatches[1];"+"\r\n"+"					$attrs = str_replace($submatches[0], '', $match[2]);"+"\r\n"+"				} else {"+"\r\n"+"					$class = '';"+"\r\n"+"					$attrs = $match[2];"+"\r\n"+"				}"+"\r\n"+"				$caption = $match[3];"+"\r\n"+"				if (strpos($class, 'btn btn-default') === FALSE) // Prepend button classes"+"\r\n"+"					ewr_PrependClass($class, 'btn btn-default');"+"\r\n"+"				if ($this->ButtonClass <> \"\")"+"\r\n"+"					ewr_AppendClass($class, $this->ButtonClass);"+"\r\n"+"				$attrs = ' class=\"' . $class . '\" ' . $attrs;"+"\r\n"+" 				$link ='<' . $tag . $attrs . '>' . $caption . '</' . $tag . '>';"+"\r\n"+"				$links .= $link;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($links <> \"\")"+"\r\n"+"			$btngroup = '<div class=\"btn-group ewButtonGroup\">' . $links . '</div>';"+"\r\n"+"		else"+"\r\n"+"			$btngroup = \"\";"+"\r\n"+"		foreach ($btns as $btn)"+"\r\n"+"			$btngroup .= $btn;"+"\r\n"+"		//foreach ($inputs as $input)"+"\r\n"+"		//	$btngroup .= $input;"+"\r\n"+"		return $btngroup;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Render drop down button"+"\r\n"+"	function RenderDropDownButton($body, $pos) {"+"\r\n"+""+"\r\n"+"		// Get all hidden inputs"+"\r\n"+"		// format: <input type=\"hidden\" ...>"+"\r\n"+""+"\r\n"+"//		$inputs = array();"+"\r\n"+"//		if (preg_match_all('/<input\\s+([^>]*)>/i', $body, $inputmatches, PREG_SET_ORDER)) {"+"\r\n"+"//			foreach ($inputmatches as $inputmatch) {"+"\r\n"+"//				$body = str_replace($inputmatch[0], '', $body); "+"\r\n"+"//				if (preg_match('/\\s+type\\s*=\\s*[\\'\"]hidden[\\'\"]/i', $inputmatch[0])) // Match type='hidden'"+"\r\n"+"//					$inputs[] = $inputmatch[0];"+"\r\n"+"//			}"+"\r\n"+"//		}"+"\r\n"+""+"\r\n"+"		// Remove toggle button first <button ... data-toggle=\"dropdown\">...</button>"+"\r\n"+"		if (preg_match_all('/<button\\s+([\\s\\S]*?)data-toggle\\s*=\\s*[\\'\"]dropdown[\\'\"]\\s*>([\\s\\S]*?)<\\/button\\s*>/i', $body, $btnmatches, PREG_SET_ORDER)) {"+"\r\n"+"			foreach ($btnmatches as $btnmatch)"+"\r\n"+"				$body = str_replace($btnmatch[0], '', $body);"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Get all links/buttons <a ...>...</a> / <button ...>...</button>"+"\r\n"+"		if (!preg_match_all('/<(a|button)([^>]*)>([\\s\\S]*?)<\\/(a|button)\\s*>/i', $body, $matches, PREG_SET_ORDER))"+"\r\n"+"			return '';"+"\r\n"+"		$links = '';"+"\r\n"+"		$submenu = FALSE;"+"\r\n"+"		$submenulink = \"\";"+"\r\n"+"		$submenulinks = \"\";"+"\r\n"+"		foreach ($matches as $match) {"+"\r\n"+"			$tag = $match[1];"+"\r\n"+"			if (preg_match('/\\s+data-action\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $match[2], $actionmatches)) { // Match data-action='action'"+"\r\n"+"				$action = $actionmatches[1];"+"\r\n"+"			} else {"+"\r\n"+"				$action = '';"+"\r\n"+"			}"+"\r\n"+"			if (preg_match('/\\s+class\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $match[2], $submatches)) { // Match class='class'"+"\r\n"+"				$class = preg_replace('/btn[\\S]*\\s+/i', '', $submatches[1]);"+"\r\n"+"				$attrs = str_replace($submatches[0], '', $match[2]);"+"\r\n"+"			} else {"+"\r\n"+"				$class = '';"+"\r\n"+"				$attrs = $match[2];"+"\r\n"+"			}"+"\r\n"+"			$attrs = preg_replace('/\\s+title\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', '', $attrs); // Remove title='title'"+"\r\n"+"			if (preg_match('/\\s+data-caption\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $attrs, $submatches)) // Match data-caption='caption'"+"\r\n"+"				$caption = $submatches[1];"+"\r\n"+"			else"+"\r\n"+"				$caption = '';"+"\r\n"+"			$attrs = ' class=\"' . $class . '\" ' . $attrs;"+"\r\n"+"			if (strtolower($tag) == \"button\") // Add href for button"+"\r\n"+"				$attrs .= ' href=\"javascript:void(0);\"';"+"\r\n"+"			if ($this->UseImageAndText) { // Image and text"+"\r\n"+"				if (preg_match('/<img([^>]*)>/i', $match[3], $submatch)) // <img> tag"+"\r\n"+"					$caption = $submatch[0] . '&nbsp;&nbsp;' . $caption;"+"\r\n"+"				elseif (preg_match('/<span([^>]*)>([\\s\\S]*?)<\\/span\\s*>/i', $match[3], $submatch)) // <span class='class'></span> tag"+"\r\n"+"					if (preg_match('/\\s+class\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $submatch[1], $submatches)) // Match class='class'"+"\r\n"+"						$caption = $submatch[0] . '&nbsp;&nbsp;' . $caption;"+"\r\n"+"			}"+"\r\n"+"			if ($caption == '')"+"\r\n"+"				$caption = $match[3];"+"\r\n"+"			$link = '<a' . $attrs . '>' . $caption . '</a>';"+"\r\n"+"			if ($action == 'list') { // Start new submenu"+"\r\n"+"				if ($submenu) { // End previous submenu"+"\r\n"+"					if ($submenulinks <> '') { // Set up submenu"+"\r\n"+"						$links .= '<li class=\"dropdown-submenu\">' . $submenulink . '<ul class=\"dropdown-menu\">' . $submenulinks . '</ul></li>';"+"\r\n"+"					} else {"+"\r\n"+"						$links .= '<li>' . $submenulink . '</li>';"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				$submenu = TRUE;"+"\r\n"+"				$submenulink = $link;"+"\r\n"+"				$submenulinks = \"\";"+"\r\n"+"			} else {"+"\r\n"+"				if ($action == '' && $submenu) { // End previous submenu"+"\r\n"+"					if ($submenulinks <> '') { // Set up submenu"+"\r\n"+"						$links .= '<li class=\"dropdown-submenu\">' . $submenulink . '<ul class=\"dropdown-menu\">' . $submenulinks . '</ul></li>';"+"\r\n"+"					} else {"+"\r\n"+"						$links .= '<li>' . $submenulink . '</li>';"+"\r\n"+"					}"+"\r\n"+"					$submenu = FALSE;"+"\r\n"+"				}"+"\r\n"+"				if ($submenu)"+"\r\n"+"					$submenulinks .= '<li>' . $link . '</li>';"+"\r\n"+"				else"+"\r\n"+"					$links .= '<li>' . $link . '</li>';"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if ($links <> \"\") {"+"\r\n"+"			if ($submenu) { // End previous submenu"+"\r\n"+"				if ($submenulinks <> '') { // Set up submenu"+"\r\n"+"					$links .= '<li class=\"dropdown-submenu\">' . $submenulink . '<ul class=\"dropdown-menu\">' . $submenulinks . '</ul></li>';"+"\r\n"+"				} else {"+"\r\n"+"					$links .= '<li>' . $submenulink . '</li>';"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			$buttonclass = \"dropdown-toggle btn btn-default\";"+"\r\n"+"			if ($this->ButtonClass <> \"\")"+"\r\n"+"				ewr_AppendClass($buttonclass, $this->ButtonClass);"+"\r\n"+"			$buttontitle = ewr_HtmlTitle($this->DropDownButtonPhrase);"+"\r\n"+"			$buttontitle = ($this->DropDownButtonPhrase <> $buttontitle) ? ' title=\"' . $buttontitle . '\"' : '';"+"\r\n"+"			$button = '<button class=\"' . $buttonclass . '\"' . $buttontitle . ' data-toggle=\"dropdown\">' . $this->DropDownButtonPhrase . '<span class=\"caret\"></span></button><ul class=\"dropdown-menu ewMenu\">' . $links . '</ul>';"+"\r\n"+"			if ($pos == \"bottom\") // Use dropup"+"\r\n"+"				$btndropdown = '<div class=\"btn-group dropup ewButtonDropdown\">' . $button . '</div>';"+"\r\n"+"			else"+"\r\n"+"				$btndropdown = '<div class=\"btn-group ewButtonDropdown\">' . $button . '</div>';"+"\r\n"+"		} else {"+"\r\n"+"			$btndropdown = \"\";"+"\r\n"+"		}"+"\r\n"+"		//foreach ($inputs as $input)"+"\r\n"+"			//$btndropdown .= $input;"+"\r\n"+"		return $btndropdown;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * List option class"+"\r\n"+" */"+"\r\n"+"class crListOption {"+"\r\n"+"	var $Name;"+"\r\n"+"	var $OnLeft;"+"\r\n"+"	var $CssStyle;"+"\r\n"+"	var $CssClass;"+"\r\n"+"	var $Visible = TRUE;"+"\r\n"+"	var $Header;"+"\r\n"+"	var $Body;"+"\r\n"+"	var $Footer;"+"\r\n"+"	var $Parent;"+"\r\n"+"	var $ShowInButtonGroup = TRUE;"+"\r\n"+"	var $ShowInDropDown = TRUE;"+"\r\n"+"	var $ButtonGroupName = \"_default\";"+"\r\n"+""+"\r\n"+"	function __construct($Name) {"+"\r\n"+"		$this->Name = $Name;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	function MoveTo($Pos) {"+"\r\n"+"		$this->Parent->MoveItem($this->Name, $Pos);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	function Render($Part, $ColSpan = 1) {"+"\r\n"+"		$tagclass = $this->Parent->TagClassName;"+"\r\n"+"		if ($Part == \"header\") {"+"\r\n"+"			if ($tagclass == \"\") $tagclass = \"ewListOptionHeader\";"+"\r\n"+"			$value = $this->Header;"+"\r\n"+"		} elseif ($Part == \"body\") {"+"\r\n"+"			if ($tagclass == \"\") $tagclass = \"ewListOptionBody\";"+"\r\n"+"			if ($this->Parent->Tag <> \"td\")"+"\r\n"+"				ewr_AppendClass($tagclass, \"ewListOptionSeparator\");"+"\r\n"+"			$value = $this->Body;"+"\r\n"+"		} elseif ($Part == \"footer\") {"+"\r\n"+"			if ($tagclass == \"\") $tagclass = \"ewListOptionFooter\";"+"\r\n"+"			$value = $this->Footer;"+"\r\n"+"		} else {"+"\r\n"+"			$value = $Part;"+"\r\n"+"		}"+"\r\n"+"		if (strval($value) == \"\" && $this->Parent->Tag == \"span\" && $this->Parent->ScriptId == \"\")"+"\r\n"+"			return \"\";"+"\r\n"+"		$res = ($value <> \"\") ? $value : \"&nbsp;\";"+"\r\n"+"		ewr_AppendClass($tagclass, $this->CssClass);"+"\r\n"+"		$attrs = array(\"class\" => $tagclass,  \"style\" => $this->CssStyle, \"data-name\" => $this->Name);"+"\r\n"+"		if (strtolower($this->Parent->Tag) == \"td\" && $this->Parent->RowSpan > 1)"+"\r\n"+"			$attrs[\"rowspan\"] = $this->Parent->RowSpan;"+"\r\n"+"		if (strtolower($this->Parent->Tag) == \"td\" && $ColSpan > 1)"+"\r\n"+"			$attrs[\"colspan\"] = $ColSpan;"+"\r\n"+"		$name = $this->Parent->TableVar . \"_\" . $this->Name;"+"\r\n"+"		if ($this->Name <> $this->Parent->GroupOptionName) {"+"\r\n"+"			if (!in_array($this->Name, array('checkbox', 'rowcnt'))) {"+"\r\n"+"				if ($this->Parent->UseImageAndText)"+"\r\n"+"					$res = $this->GetImageAndText($res);"+"\r\n"+"				if ($this->Parent->UseButtonGroup && $this->ShowInButtonGroup) {"+"\r\n"+"					$res = $this->Parent->RenderButtonGroup($res);"+"\r\n"+"					if ($this->OnLeft && strtolower($this->Parent->Tag) == \"td\" && $ColSpan > 1)"+"\r\n"+"						$res = '<div style=\"text-align: right\">' . $res . '</div>';"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			if ($Part == \"header\")"+"\r\n"+"				$res = \"<span id=\\\"elh_\" . $name . \"\\\" class=\\\"\" . $name . \"\\\">\" . $res . \"</span>\";"+"\r\n"+"			else if ($Part == \"body\")"+"\r\n"+"				$res = \"<span id=\\\"el\" . $this->Parent->RowCnt . \"_\" . $name . \"\\\" class=\\\"\" . $name . \"\\\">\" . $res . \"</span>\";"+"\r\n"+"			else if ($Part == \"footer\")"+"\r\n"+"				$res = \"<span id=\\\"elf_\" . $name . \"\\\" class=\\\"\" . $name . \"\\\">\" . $res . \"</span>\";"+"\r\n"+"		}"+"\r\n"+"		$tag = ($this->Parent->Tag == \"td\" && $Part == \"header\") ? \"th\" : $this->Parent->Tag;"+"\r\n"+"		if ($this->Parent->UseButtonGroup && $this->ShowInButtonGroup)"+"\r\n"+"			$attrs[\"style\"] .= \"white-space: nowrap;\";"+"\r\n"+"		$res = ewr_HtmlElement($tag, $attrs, $res);"+"\r\n"+"		return $res;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get image and text link"+"\r\n"+"	function GetImageAndText($body) {"+"\r\n"+"		if (!preg_match_all('/<a([^>]*)>([\\s\\S]*?)<\\/a\\s*>/i', $body, $matches, PREG_SET_ORDER))"+"\r\n"+"			return $body;"+"\r\n"+"		foreach ($matches as $match) {"+"\r\n"+"			if (preg_match('/\\s+data-caption\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $match[1], $submatches)) { // Match data-caption='caption'"+"\r\n"+"				$caption = $submatches[1];"+"\r\n"+"				if (preg_match('/<img([^>]*)>/i', $match[2])) // Image and text"+"\r\n"+"					$body = str_replace($match[2], $match[2] . '&nbsp;&nbsp;' . $caption, $body);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $body;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Advanced Security class"+"\r\n"+" */"+"\r\n"+"class crAdvancedSecurity {"+"\r\n"+""+"\r\n"+"	var $UserLevel = array(); // All User Levels"+"\r\n"+"	var $UserLevelPriv = array(); // All User Level permissions"+"\r\n"+"	var $UserLevelID = array(); // User Level ID array"+"\r\n"+"	var $UserID = array(); // User ID array"+"\r\n"+"	"+"\r\n"+"	var $CurrentUserLevelID;"+"\r\n"+"	var $CurrentUserLevel; // Permissions"+"\r\n"+"	var $CurrentUserID;"+"\r\n"+"	var $CurrentParentUserID;"+"\r\n"+""+"\r\n"+"	// Constructor"+"\r\n"+"	function __construct() {"+"\r\n"+""+"\r\n"+"		// Init User Level"+"\r\n"+"		$this->CurrentUserLevelID = $this->SessionUserLevelID();"+"\r\n"+"		if (is_numeric($this->CurrentUserLevelID) && intval($this->CurrentUserLevelID) >= -1) {"+"\r\n"+"			$this->UserLevelID[] = $this->CurrentUserLevelID;"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Init User ID"+"\r\n"+"		$this->CurrentUserID = $this->SessionUserID();"+"\r\n"+"		$this->CurrentParentUserID = $this->SessionParentUserID();"+"\r\n"+""+"\r\n"+"		// Load user level"+"\r\n"+"		$this->LoadUserLevel();"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session User ID"+"\r\n"+"	function SessionUserID() {"+"\r\n"+"		return strval(@$_SESSION[EWR_SESSION_USER_ID]);"+"\r\n"+"	}"+"\r\n"+"	function setSessionUserID($v) {"+"\r\n"+"		$_SESSION[EWR_SESSION_USER_ID] = trim(strval($v));"+"\r\n"+"		$this->CurrentUserID = trim(strval($v));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session Parent User ID"+"\r\n"+"	function SessionParentUserID() {"+"\r\n"+"		return strval(@$_SESSION[EWR_SESSION_PARENT_USER_ID]);"+"\r\n"+"	}"+"\r\n"+"	function setSessionParentUserID($v) {"+"\r\n"+"		$_SESSION[EWR_SESSION_PARENT_USER_ID] = trim(strval($v));"+"\r\n"+"		$this->CurrentParentUserID = trim(strval($v));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session User Level ID"+"\r\n"+"	function SessionUserLevelID() {"+"\r\n"+"		return @$_SESSION[EWR_SESSION_USER_LEVEL_ID];"+"\r\n"+"	}"+"\r\n"+"	function setSessionUserLevelID($v) {"+"\r\n"+"		$_SESSION[EWR_SESSION_USER_LEVEL_ID] = $v;"+"\r\n"+"		$this->CurrentUserLevelID = $v;"+"\r\n"+"		if (is_numeric($v) && $v >= -1)"+"\r\n"+"			$this->UserLevelID = array($v);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Session User Level value"+"\r\n"+"	function SessionUserLevel() {"+"\r\n"+"		return @$_SESSION[EWR_SESSION_USER_LEVEL];"+"\r\n"+"	}"+"\r\n"+"	function setSessionUserLevel($v) {"+"\r\n"+"		$_SESSION[EWR_SESSION_USER_LEVEL] = $v;"+"\r\n"+"		$this->CurrentUserLevel = $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Current user name"+"\r\n"+"	function getCurrentUserName() {"+"\r\n"+"		return strval(@$_SESSION[EWR_SESSION_USER_NAME]);"+"\r\n"+"	}"+"\r\n"+"	function setCurrentUserName($v) {"+"\r\n"+"		$_SESSION[EWR_SESSION_USER_NAME] = $v;"+"\r\n"+"	}"+"\r\n"+"	function CurrentUserName() {"+"\r\n"+"		return $this->getCurrentUserName();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Current User ID"+"\r\n"+"	function CurrentUserID() {"+"\r\n"+"		return $this->CurrentUserID;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Current Parent User ID"+"\r\n"+"	function CurrentParentUserID() {"+"\r\n"+"		return $this->CurrentParentUserID;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Current User Level ID"+"\r\n"+"	function CurrentUserLevelID() {"+"\r\n"+"		return $this->CurrentUserLevelID;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Current User Level value"+"\r\n"+"	function CurrentUserLevel() {"+"\r\n"+"		return $this->CurrentUserLevel;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Can list"+"\r\n"+"	function CanList() {"+"\r\n"+"		return (($this->CurrentUserLevel & EWR_ALLOW_LIST) == EWR_ALLOW_LIST);"+"\r\n"+"	}"+"\r\n"+"	function setCanList($b) {"+"\r\n"+"		if ($b) {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel | EWR_ALLOW_LIST);"+"\r\n"+"		} else {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel & (~ EWR_ALLOW_LIST));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Can report"+"\r\n"+"	function CanReport() {"+"\r\n"+"		return (($this->CurrentUserLevel & EWR_ALLOW_REPORT) == EWR_ALLOW_REPORT);"+"\r\n"+"	}"+"\r\n"+"	function setCanReport($b) {"+"\r\n"+"		if ($b) {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel | EWR_ALLOW_REPORT);"+"\r\n"+"		} else {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel & (~ EWR_ALLOW_REPORT));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Can admin"+"\r\n"+"	function CanAdmin() {"+"\r\n"+"		return (($this->CurrentUserLevel & EWR_ALLOW_ADMIN) == EWR_ALLOW_ADMIN);"+"\r\n"+"	}"+"\r\n"+"	function setCanAdmin($b) {"+"\r\n"+"		if ($b) {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel | EWR_ALLOW_ADMIN);"+"\r\n"+"		} else {"+"\r\n"+"			$this->CurrentUserLevel = ($this->CurrentUserLevel & (~ EWR_ALLOW_ADMIN));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Last URL"+"\r\n"+"	function LastUrl() {"+"\r\n"+"		return @$_COOKIE[EWR_PROJECT_VAR]['LastUrl'];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Save last URL"+"\r\n"+"	function SaveLastUrl() {"+"\r\n"+"		$s = ewr_ServerVar(\"SCRIPT_NAME\");"+"\r\n"+"		$q = ewr_ServerVar(\"QUERY_STRING\");"+"\r\n"+"		if ($q <> \"\") $s .= \"?\" . $q;"+"\r\n"+"		if ($this->LastUrl() == $s) $s = \"\";"+"\r\n"+"		@setcookie(EWR_PROJECT_VAR . '[LastUrl]', $s);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Auto login"+"\r\n"+"	function AutoLogin() {"+"\r\n"+"		if (@$_COOKIE[EWR_PROJECT_VAR]['AutoLogin'] == \"autologin\") {"+"\r\n"+"			$usr = ewr_Decrypt(@$_COOKIE[EWR_PROJECT_VAR]['Username'], EWR_RANDOM_KEY);"+"\r\n"+"			$pwd = ewr_Decrypt(@$_COOKIE[EWR_PROJECT_VAR]['Password'], EWR_RANDOM_KEY);"+"\r\n"+"			$AutoLogin = $this->ValidateUser($usr, $pwd, TRUE);"+"\r\n"+"		} else {"+"\r\n"+"			$AutoLogin = FALSE;"+"\r\n"+"		}"+"\r\n"+"		return $AutoLogin;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Validate user"+"\r\n"+"	function ValidateUser($usr, $pwd, $autologin) {"+"\r\n"+"		global $conn, $ReportLanguage;"+"\r\n"+"		$ValidateUser = FALSE;"+"\r\n"+"		$CustomValidateUser = FALSE;"+"\r\n"+""+"\r\n"+"	";
ewAr[41] = ""+"\r\n"+"		// Call User Custom Validate event"+"\r\n"+"		if (EWR_USE_CUSTOM_LOGIN) {"+"\r\n"+"			$CustomValidateUser = $this->User_CustomValidate($usr, $pwd);"+"\r\n"+"			if ($CustomValidateUser) {"+"\r\n"+"				$_SESSION[EWR_SESSION_STATUS] = \"login\";"+"\r\n"+"				$this->setCurrentUserName($usr); // Load user name"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	";
ewAr[42] = ""+"\r\n"+""+"\r\n"+"	";
ewAr[43] = "	"+"\r\n"+"		// Check hard coded admin first"+"\r\n"+"		if (!$ValidateUser) {"+"\r\n"+""+"\r\n"+"			if (EWR_CASE_SENSITIVE_PASSWORD) {"+"\r\n"+"				$ValidateUser = (!$CustomValidateUser && EWR_ADMIN_USER_NAME == $usr && EWR_ADMIN_PASSWORD == $pwd) ||"+"\r\n"+"								($CustomValidateUser && EWR_ADMIN_USER_NAME == $usr);"+"\r\n"+"			} else {"+"\r\n"+"				$ValidateUser = (!$CustomValidateUser && strtolower(EWR_ADMIN_USER_NAME) == strtolower($usr)"+"\r\n"+"								&& strtolower(EWR_ADMIN_PASSWORD) == strtolower($pwd)) ||"+"\r\n"+"								($CustomValidateUser && strtolower(EWR_ADMIN_USER_NAME) == strtolower($usr));"+"\r\n"+"			}"+"\r\n"+"			if ($ValidateUser) {"+"\r\n"+"				$_SESSION[EWR_SESSION_STATUS] = \"login\";"+"\r\n"+"				$_SESSION[EWR_SESSION_SYSTEM_ADMIN] = 1; // System Administrator"+"\r\n"+"				$this->setCurrentUserName(\"Administrator\"); // Load user name"+"\r\n"+""+"\r\n"+"		";
ewAr[44] = "	"+"\r\n"+"				$this->setSessionUserID(-1); // System Administrator"+"\r\n"+"		";
ewAr[45] = ""+"\r\n"+"		";
ewAr[46] = "	"+"\r\n"+"				$this->setSessionUserLevelID(-1); // System Administrator"+"\r\n"+"				$this->SetUpUserLevel();"+"\r\n"+"		";
ewAr[47] = ""+"\r\n"+""+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+"	";
ewAr[48] = ""+"\r\n"+""+"\r\n"+"	";
ewAr[49] = ""+"\r\n"+"		// Check other users"+"\r\n"+"		if (!$ValidateUser) {"+"\r\n"+""+"\r\n"+"		";
ewAr[50] = ""+"\r\n"+"			if (!is_numeric($usr)) return $CustomValidateUser;"+"\r\n"+"		";
ewAr[51] = ""+"\r\n"+""+"\r\n"+"			$sFilter = str_replace(\"%u\", ewr_AdjustSql($usr), EWR_USER_NAME_FILTER);"+"\r\n"+""+"\r\n"+"		";
ewAr[52] = ""+"\r\n"+"			$sFilter .= \" AND \" . EWR_USER_ACTIVATE_FILTER;"+"\r\n"+"		";
ewAr[53] = ""+"\r\n"+""+"\r\n"+"			$sSql = EWR_LOGIN_SELECT_SQL . \" WHERE \" . $sFilter;"+"\r\n"+""+"\r\n"+"			if ($rs = $conn->Execute($sSql)) {"+"\r\n"+"				if (!$rs->EOF) {"+"\r\n"+"					$ValidateUser = $CustomValidateUser || ewr_ComparePassword($rs->fields('";
ewAr[54] = "'), $pwd);"+"\r\n"+""+"\r\n"+"					if ($ValidateUser) {"+"\r\n"+"						$_SESSION[EWR_SESSION_STATUS] = \"login\";"+"\r\n"+"		";
ewAr[55] = ""+"\r\n"+"						$_SESSION[EWR_SESSION_SYSTEM_ADMIN] = 0; // Non System Administrator"+"\r\n"+"						$this->setCurrentUserName(";
ewAr[56] = "); // Load user name"+"\r\n"+"		";
ewAr[57] = ""+"\r\n"+"						$this->setSessionUserID(";
ewAr[58] = "); // Load User ID"+"\r\n"+"		";
ewAr[59] = ""+"\r\n"+"						$this->setSessionParentUserID(";
ewAr[60] = "); // Load parent User ID"+"\r\n"+"		";
ewAr[61] = ""+"\r\n"+"						if (is_null(";
ewAr[62] = ")) {"+"\r\n"+"							$this->setSessionUserLevelID(0);"+"\r\n"+"						} else {"+"\r\n"+"							$this->setSessionUserLevelID(intval(";
ewAr[63] = ")); // Load User Level"+"\r\n"+"						}"+"\r\n"+"						$this->SetUpUserLevel();"+"\r\n"+"		";
ewAr[64] = ""+"\r\n"+"		";
ewAr[65] = ""+"\r\n"+"						// Call User Validated event"+"\r\n"+"						$row = $rs->fields;"+"\r\n"+"						$this->User_Validated($row);"+"\r\n"+"		";
ewAr[66] = ""+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				$rs->Close();"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	";
ewAr[67] = ""+"\r\n"+""+"\r\n"+"		if ($CustomValidateUser)"+"\r\n"+"			return $CustomValidateUser;"+"\r\n"+""+"\r\n"+"		if (!$ValidateUser)"+"\r\n"+"			$_SESSION[EWR_SESSION_STATUS] = \"\"; // Clear login status"+"\r\n"+"		"+"\r\n"+"		return $ValidateUser;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[68] = ""+"\r\n"+""+"\r\n"+"	// Load user level from config file"+"\r\n"+"	function LoadUserLevelFromConfigFile(&$arUserLevel, &$arUserLevelPriv, &$arTable, $userpriv = FALSE) {"+"\r\n"+""+"\r\n"+"		// User Level definitions"+"\r\n"+"		array_splice($arUserLevel, 0);"+"\r\n"+"		array_splice($arUserLevelPriv, 0);"+"\r\n"+"		array_splice($arTable, 0);"+"\r\n"+""+"\r\n"+"		// Load user level from config files"+"\r\n"+"		$doc = new crXMLDocument();"+"\r\n"+"		$folder = ewr_AppRoot() . EWR_CONFIG_FILE_FOLDER;"+"\r\n"+""+"\r\n"+"		// Load user level settings from main config file"+"\r\n"+"		$ProjectID = CurrentProjectID();"+"\r\n"+"		$file = $folder . EWR_PATH_DELIMITER . $ProjectID . \".xml\";"+"\r\n"+"		if (file_exists($file) && $doc->Load($file) && (($projnode = $doc->SelectSingleNode(\"//configuration/project\")) != NULL)) {"+"\r\n"+"			$userlevel = $doc->GetAttribute($projnode, \"userlevel\");"+"\r\n"+"			$usergroup = explode(\";\", $userlevel);"+"\r\n"+"			foreach ($usergroup as $group) {"+"\r\n"+"				@list($id, $name, $priv) = explode(\",\", $group, 3);"+"\r\n"+"				// Remove quotes"+"\r\n"+"				if (strlen($name) >= 2 && substr($name,0,1) == \"\\\"\" && substr($name,-1) == \"\\\"\")"+"\r\n"+"					$name = substr($name,1,strlen($name)-2);"+"\r\n"+"				$arUserLevel[] = array($id, $name);"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"			// Load from main config file"+"\r\n"+"			$this->LoadUserLevelFromXml($folder, $doc, $arUserLevelPriv, $arTable, $userpriv);"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Warn user if user level not setup"+"\r\n"+"		if (count($arUserLevel) == 0) {"+"\r\n"+"			die(\"Unable to load user level from config file: \" . $file);"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Load user priv settings from all config files"+"\r\n"+"		if ($dir_handle = opendir($folder)) {"+"\r\n"+"			while (FALSE !== ($file = readdir($dir_handle))) {"+"\r\n"+"				if ($file == \".\" || $file == \"..\" || !is_file($folder . EWR_PATH_DELIMITER . $file))"+"\r\n"+"					continue;"+"\r\n"+"				$pathinfo = pathinfo($file);"+"\r\n"+"				if (isset($pathinfo[\"extension\"]) && strtolower($pathinfo[\"extension\"]) == \"xml\") {"+"\r\n"+"					if ($file <> $ProjectID . \".xml\")"+"\r\n"+"						$this->LoadUserLevelFromXml($folder, $file, $arUserLevelPriv, $arTable, $userpriv);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	function LoadUserLevelFromXml($folder, $file, &$arUserLevelPriv, &$arTable, $userpriv) {"+"\r\n"+""+"\r\n"+"		if (is_string($file)) {"+"\r\n"+"			$file = $folder . EWR_PATH_DELIMITER . $file;"+"\r\n"+"			$doc = new crXMLDocument();"+"\r\n"+"			$doc->Load($file);"+"\r\n"+"		} else {"+"\r\n"+"			$doc = $file;"+"\r\n"+"		}"+"\r\n"+"		if ($doc instanceof crXMLDocument) {"+"\r\n"+""+"\r\n"+"			// Load project id"+"\r\n"+"			$projid = \"\";"+"\r\n"+"			$projfile = \"\";"+"\r\n"+"			if (($projnode = $doc->SelectSingleNode(\"//configuration/project\")) != NULL) {"+"\r\n"+"				$projid = $doc->GetAttribute($projnode, \"id\");"+"\r\n"+"				$projfile = $doc->GetAttribute($projnode, \"file\");"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"			// Load user priv"+"\r\n"+"			$tablelist = $doc->SelectNodes(\"//configuration/project/table\");"+"\r\n"+"			foreach ($tablelist as $table) {"+"\r\n"+"				$tablevar = $doc->GetAttribute($table, \"id\");"+"\r\n"+"				$tablename = $doc->GetAttribute($table, \"name\");"+"\r\n"+"				$tablecaption = $doc->GetAttribute($table, \"caption\");"+"\r\n"+"				$userlevel = $doc->GetAttribute($table, \"userlevel\");"+"\r\n"+"				$priv = $doc->GetAttribute($table, \"priv\");"+"\r\n"+"				if (!$userpriv || ($userpriv && $priv == \"1\")) {"+"\r\n"+"					$usergroup = explode(\";\", $userlevel);"+"\r\n"+"					foreach($usergroup as $group) {"+"\r\n"+"						@list($id, $name, $priv) = explode(\",\", $group, 3);"+"\r\n"+"						$arUserLevelPriv[] = array($projid . $tablename, $id, $priv);"+"\r\n"+"					}"+"\r\n"+"					$arTable[] = array($tablename, $tablevar, $tablecaption, $priv, $projid, $projfile);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[69] = ""+"\r\n"+""+"\r\n"+"	";
ewAr[70] = ""+"\r\n"+""+"\r\n"+"	// Static User Level security"+"\r\n"+"	function SetUpUserLevel() {"+"\r\n"+""+"\r\n"+"		// Load user level from config file"+"\r\n"+"		$arTable = array();"+"\r\n"+"		$this->LoadUserLevelFromConfigFile($this->UserLevel, $this->UserLevelPriv, $arTable);"+"\r\n"+""+"\r\n"+"	";
ewAr[71] = ""+"\r\n"+"		// User Level loaded event"+"\r\n"+"		$this->UserLevel_Loaded();"+"\r\n"+"	";
ewAr[72] = ""+"\r\n"+""+"\r\n"+"		// Save the User Level to Session variable"+"\r\n"+"		$this->SaveUserLevel();"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get all User Level settings from database"+"\r\n"+"	function SetUpUserLevelEx() {"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[73] = ""+"\r\n"+""+"\r\n"+"	// Dynamic User Level security"+"\r\n"+"	"+"\r\n"+"	// Get User Level settings from database"+"\r\n"+"	function SetUpUserLevel() {"+"\r\n"+""+"\r\n"+"		$this->SetUpUserLevelEx(); // Load all user levels"+"\r\n"+"";
ewAr[74] = ""+"\r\n"+"		// User Level loaded event"+"\r\n"+"		$this->UserLevel_Loaded();"+"\r\n"+"";
ewAr[75] = ""+"\r\n"+"		// Save the User Level to Session variable"+"\r\n"+"		$this->SaveUserLevel();"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get all User Level settings from database"+"\r\n"+"	function SetUpUserLevelEx() {"+"\r\n"+"		global $conn;"+"\r\n"+"		global $ReportLanguage;"+"\r\n"+"		global $Page;"+"\r\n"+""+"\r\n"+"		// Load user level from config file first"+"\r\n"+"		$arTable = array();"+"\r\n"+"		$arUserLevel = array();"+"\r\n"+"		$arUserLevelPriv = array();"+"\r\n"+"		$this->LoadUserLevelFromConfigFile($arUserLevel, $arUserLevelPriv, $arTable);"+"\r\n"+""+"\r\n"+"		// Get the User Level definitions"+"\r\n"+"		$sSql = \"SELECT \" . EWR_USER_LEVEL_ID_FIELD . \", \" . EWR_USER_LEVEL_NAME_FIELD . \" FROM \" . EWR_USER_LEVEL_TABLE;"+"\r\n"+"		if ($rs = $conn->Execute($sSql)) {"+"\r\n"+"			$this->UserLevel = $rs->GetRows();"+"\r\n"+"			$rs->Close();"+"\r\n"+"		}"+"\r\n"+"		// Get the User Level privileges"+"\r\n"+"		$sSql = \"SELECT \" . EWR_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \", \" . EWR_USER_LEVEL_PRIV_USER_LEVEL_ID_FIELD . \", \" . EWR_USER_LEVEL_PRIV_PRIV_FIELD . \" FROM \" . EWR_USER_LEVEL_PRIV_TABLE;"+"\r\n"+"		if ($rs = $conn->Execute($sSql)) {"+"\r\n"+"			$this->UserLevelPriv = $rs->GetRows();"+"\r\n"+"			$rs->Close();"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Increase table name field size if necessary"+"\r\n"+"		if (EWR_IS_MYSQL) {"+"\r\n"+"			try {"+"\r\n"+"				if ($rs = $conn->Execute(\"SHOW COLUMNS FROM \" . EWR_USER_LEVEL_PRIV_TABLE . \" LIKE '\" . ewr_AdjustSql(EWR_USER_LEVEL_PRIV_TABLE_NAME_FIELD_2) . \"'\")) {"+"\r\n"+"					$type = $rs->fields(\"Type\");"+"\r\n"+"					$rs->Close();"+"\r\n"+"					if (preg_match('/varchar\\(([\\d]+)\\)/i', $type, $matches)) {"+"\r\n"+"						$size = intval($matches[1]);"+"\r\n"+"						if ($size < EWR_USER_LEVEL_PRIV_TABLE_NAME_FIELD_SIZE)"+"\r\n"+"							$conn->Execute(\"ALTER TABLE \" . EWR_USER_LEVEL_PRIV_TABLE . \" MODIFY COLUMN \" . EWR_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \" VARCHAR(\" . EWR_USER_LEVEL_PRIV_TABLE_NAME_FIELD_SIZE . \")\");"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"			} catch (Exception $e) {}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Update User Level privileges record if necessary"+"\r\n"+"		$bReloadUserPriv = 0;"+"\r\n"+"		$ProjectID = CurrentProjectID();"+"\r\n"+"		$Sql = \"SELECT COUNT(*) FROM \" . EWR_USER_LEVEL_PRIV_TABLE . \" WHERE EXISTS(SELECT * FROM \" ."+"\r\n"+"			EWR_USER_LEVEL_PRIV_TABLE . \" WHERE \" . EWR_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \" LIKE '\" ."+"\r\n"+"			ewr_AdjustSql(EWR_TABLE_PREFIX_OLD) . \"%')\";"+"\r\n"+"		if (ewr_ExecuteScalar($Sql) > 0) {"+"\r\n"+"			$ar = array_map(create_function('$t', 'return \"\\'\" . ewr_AdjustSql(EWR_TABLE_PREFIX_OLD . $t[0]) . \"\\'\";'), $arTable);"+"\r\n"+"			$Sql = \"UPDATE \" . EWR_USER_LEVEL_PRIV_TABLE . \" SET \" ."+"\r\n"+"				EWR_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \" = REPLACE(\" . EWR_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \",\" ."+"\r\n"+"				\"'\" . ewr_AdjustSql(EWR_TABLE_PREFIX_OLD) . \"','\" . ewr_AdjustSql($ProjectID) . \"') WHERE \" ."+"\r\n"+"				EWR_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \" IN (\" . implode(\",\", $ar) . \")\";"+"\r\n"+"			if ($conn->Execute($Sql))"+"\r\n"+"				$bReloadUserPriv += $conn->Affected_Rows();"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Reload the User Level privileges"+"\r\n"+"		if ($bReloadUserPriv) {"+"\r\n"+"			$sSql = \"SELECT \" . EWR_USER_LEVEL_PRIV_TABLE_NAME_FIELD . \", \" . EWR_USER_LEVEL_PRIV_USER_LEVEL_ID_FIELD . \", \" . EWR_USER_LEVEL_PRIV_PRIV_FIELD . \" FROM \" . EWR_USER_LEVEL_PRIV_TABLE;"+"\r\n"+"			if ($rs = $conn->Execute($sSql)) {"+"\r\n"+"				$this->UserLevelPriv = $rs->GetRows();"+"\r\n"+"				$rs->Close();"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Warn user if user level not setup"+"\r\n"+"		if (count($this->UserLevelPriv) == 0 && $this->IsAdmin() && $Page != NULL && @$_SESSION[EWR_SESSION_USER_LEVEL_MSG] == \"\") {"+"\r\n"+"			$Page->setFailureMessage($ReportLanguage->Phrase(\"NoUserLevel\"));"+"\r\n"+"			$_SESSION[EWR_SESSION_USER_LEVEL_MSG] = \"1\"; // Show only once"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		return TRUE;"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[76] = ""+"\r\n"+""+"\r\n"+"	// No User Level security"+"\r\n"+"	function SetUpUserLevel() {}"+"\r\n"+""+"\r\n"+"	";
ewAr[77] = ""+"\r\n"+""+"\r\n"+"	// Add user permission"+"\r\n"+"	function AddUserPermission($UserLevelName, $TableName, $UserPermission) {"+"\r\n"+"		// Get User Level ID from user name"+"\r\n"+"		$UserLevelID = \"\";"+"\r\n"+"		if (is_array($this->UserLevel)) {"+"\r\n"+"			foreach ($this->UserLevel as $row) {"+"\r\n"+"				list($levelid, $name) = $row;"+"\r\n"+"				if (strval($UserLevelName) == strval($name)) {"+"\r\n"+"					$UserLevelID = $levelid;"+"\r\n"+"					break;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if (is_array($this->UserLevelPriv) && $UserLevelID <> \"\") {"+"\r\n"+"			$cnt = count($this->UserLevelPriv);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				list($table, $levelid, $priv) = $this->UserLevelPriv[$i];"+"\r\n"+"				if (strtolower($table) == strtolower(EWR_TABLE_PREFIX . $TableName) && strval($levelid) == strval($UserLevelID)) {"+"\r\n"+"					$this->UserLevelPriv[$i][2] = $priv | $UserPermission; // Add permission"+"\r\n"+"					break;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Delete user permission"+"\r\n"+"	function DeleteUserPermission($UserLevelName, $TableName, $UserPermission) {"+"\r\n"+"		// Get User Level ID from user name"+"\r\n"+"		$UserLevelID = \"\";"+"\r\n"+"		if (is_array($this->UserLevel)) {"+"\r\n"+"			foreach ($this->UserLevel as $row) {"+"\r\n"+"				list($levelid, $name) = $row;"+"\r\n"+"				if (strval($UserLevelName) == strval($name)) {"+"\r\n"+"					$UserLevelID = $levelid;"+"\r\n"+"					break;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if (is_array($this->UserLevelPriv) && $UserLevelID <> \"\") {"+"\r\n"+"			$cnt = count($this->UserLevelPriv);"+"\r\n"+"			for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"				list($table, $levelid, $priv) = $this->UserLevelPriv[$i];"+"\r\n"+"				if (strtolower($table) == strtolower(EWR_TABLE_PREFIX . $TableName) && strval($levelid) == strval($UserLevelID)) {"+"\r\n"+"					$this->UserLevelPriv[$i][2] = $priv & (127 - $UserPermission); // Remove permission"+"\r\n"+"					break;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Load current User Level"+"\r\n"+"	function LoadCurrentUserLevel($Table) {"+"\r\n"+"		$this->LoadUserLevel();"+"\r\n"+"		$this->setSessionUserLevel($this->CurrentUserLevelPriv($Table));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get current user privilege"+"\r\n"+"	function CurrentUserLevelPriv($TableName) {"+"\r\n"+"		if ($this->IsLoggedIn()) {"+"\r\n"+"			$Priv= 0;"+"\r\n"+"			foreach ($this->UserLevelID as $UserLevelID)"+"\r\n"+"				$Priv |= $this->GetUserLevelPrivEx($TableName, $UserLevelID);"+"\r\n"+"			return $Priv;"+"\r\n"+"		} else {"+"\r\n"+"			return 0;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Get User Level ID by User Level name"+"\r\n"+"	function GetUserLevelID($UserLevelName) {"+"\r\n"+"		if (strval($UserLevelName) == \"Administrator\") {"+"\r\n"+"			return -1;"+"\r\n"+"		} elseif ($UserLevelName <> \"\") {"+"\r\n"+"			if (is_array($this->UserLevel)) {"+"\r\n"+"				foreach ($this->UserLevel as $row) {"+"\r\n"+"					list($levelid, $name) = $row;"+"\r\n"+"					if (strval($name) == strval($UserLevelName))"+"\r\n"+"						return $levelid;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return -2;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add User Level by name"+"\r\n"+"	function AddUserLevel($UserLevelName) {"+"\r\n"+"		if (strval($UserLevelName) == \"\") return;"+"\r\n"+"		$UserLevelID = $this->GetUserLevelID($UserLevelName);"+"\r\n"+"		$this->AddUserLevelID($UserLevelID);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add User Level by ID"+"\r\n"+"	function AddUserLevelID($UserLevelID) {"+"\r\n"+"		if (!is_numeric($UserLevelID)) return;"+"\r\n"+"		if ($UserLevelID < -1) return;"+"\r\n"+"		if (!in_array($UserLevelID, $this->UserLevelID))"+"\r\n"+"			$this->UserLevelID[] = $UserLevelID;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Delete User Level by name"+"\r\n"+"	function DeleteUserLevel($UserLevelName) {"+"\r\n"+"		if (strval($UserLevelName) == \"\") return;"+"\r\n"+"		$UserLevelID = $this->GetUserLevelID($UserLevelName);"+"\r\n"+"		$this->DeleteUserLevelID($UserLevelID);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Delete User Level by ID"+"\r\n"+"	function DeleteUserLevelID($UserLevelID) {"+"\r\n"+"		if (!is_numeric($UserLevelID)) return;"+"\r\n"+"		if ($UserLevelID < -1) return;"+"\r\n"+"		$cnt = count($this->UserLevelID);"+"\r\n"+"		for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"			if ($this->UserLevelID[$i] == $UserLevelID) {"+"\r\n"+"				unset($this->UserLevelID[$i]);"+"\r\n"+"				break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// User Level list"+"\r\n"+"	function UserLevelList() {"+"\r\n"+"		return implode(\", \", $this->UserLevelID);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// User Level name list"+"\r\n"+"	function UserLevelNameList() {"+"\r\n"+"		$list = \"\";"+"\r\n"+"		foreach ($this->UserLevelID as $UserLevelID) {"+"\r\n"+"			if ($list <> \"\") $lList .= \", \";"+"\r\n"+"			$list .= ewr_QuotedValue($this->GetUserLevelName($UserLevelID), EWR_DATATYPE_STRING);"+"\r\n"+"		}"+"\r\n"+"		return $list;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get user privilege based on table name and User Level"+"\r\n"+"	function GetUserLevelPrivEx($TableName, $UserLevelID) {"+"\r\n"+"		if (strval($UserLevelID) == \"-1\") { // System Administrator"+"\r\n"+"			return 127; // Use new User Level values (separate View/Search)"+"\r\n"+"		} elseif ($UserLevelID >= 0) {"+"\r\n"+"			if (is_array($this->UserLevelPriv)) {"+"\r\n"+"				foreach ($this->UserLevelPriv as $row) {"+"\r\n"+"					list($table, $levelid, $priv) = $row;"+"\r\n"+"					if (strtolower($table) == strtolower($TableName) && strval($levelid) == strval($UserLevelID)) {"+"\r\n"+"						if (is_null($priv) || !is_numeric($priv)) return 0;"+"\r\n"+"						return intval($priv);"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return 0;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get current User Level name"+"\r\n"+"	function CurrentUserLevelName() {"+"\r\n"+"		return $this->GetUserLevelName($this->CurrentUserLevelID());"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get User Level name based on User Level"+"\r\n"+"	function GetUserLevelName($UserLevelID) {"+"\r\n"+"		if (strval($UserLevelID) == \"-1\") {"+"\r\n"+"			return \"Administrator\";"+"\r\n"+"		} elseif ($UserLevelID >= 0) {"+"\r\n"+"			if (is_array($this->UserLevel)) {"+"\r\n"+"				foreach ($this->UserLevel as $row) {"+"\r\n"+"					list($levelid, $name) = $row;"+"\r\n"+"					if (strval($levelid) == strval($UserLevelID))"+"\r\n"+"						return $name;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Display all the User Level settings (for debug only)"+"\r\n"+"	function ShowUserLevelInfo() {"+"\r\n"+"		echo \"<pre>\";"+"\r\n"+"		print_r($this->UserLevel);"+"\r\n"+"		print_r($this->UserLevelPriv);"+"\r\n"+"		echo \"</pre>\";"+"\r\n"+"		echo \"<p>Current User Level ID = \" . $this->CurrentUserLevelID() . \"</p>\";"+"\r\n"+"		echo \"<p>Current User Level ID List = \" . $this->UserLevelList() . \"</p>\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check privilege for List page (for menu items)"+"\r\n"+"	function AllowList($TableName) {"+"\r\n"+"		return ($this->CurrentUserLevelPriv($TableName) & EWR_ALLOW_LIST);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if user is logged in"+"\r\n"+"	function IsLoggedIn() {"+"\r\n"+"		return (@$_SESSION[EWR_SESSION_STATUS] == \"login\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if user is system administrator"+"\r\n"+"	function IsSysAdmin() {"+"\r\n"+"		return (@$_SESSION[EWR_SESSION_SYSTEM_ADMIN] == 1);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if user is administrator"+"\r\n"+"	function IsAdmin() {"+"\r\n"+"		$IsAdmin = $this->IsSysAdmin();"+"\r\n"+"	";
ewAr[78] = ""+"\r\n"+"		if (!$IsAdmin)"+"\r\n"+"			$IsAdmin = $this->CurrentUserLevelID == -1 || in_array(-1, $this->UserLevelID);"+"\r\n"+"	";
ewAr[79] = ""+"\r\n"+"	";
ewAr[80] = ""+"\r\n"+"		if (!$IsAdmin)"+"\r\n"+"			$IsAdmin = $this->CurrentUserID == -1 || in_array(-1, $this->UserID);"+"\r\n"+"	";
ewAr[81] = ""+"\r\n"+"		return $IsAdmin;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Save User Level to Session"+"\r\n"+"	function SaveUserLevel() {"+"\r\n"+"		$_SESSION[EWR_SESSION_AR_USER_LEVEL] = $this->UserLevel;"+"\r\n"+"		$_SESSION[EWR_SESSION_AR_USER_LEVEL_PRIV] = $this->UserLevelPriv;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load User Level from Session"+"\r\n"+"	function LoadUserLevel() {"+"\r\n"+"		if (!is_array(@$_SESSION[EWR_SESSION_AR_USER_LEVEL]) || !is_array(@$_SESSION[EWR_SESSION_AR_USER_LEVEL_PRIV])) {"+"\r\n"+"			$this->SetupUserLevel();"+"\r\n"+"			$this->SaveUserLevel();"+"\r\n"+"		} else {"+"\r\n"+"			$this->UserLevel = $_SESSION[EWR_SESSION_AR_USER_LEVEL];"+"\r\n"+"			$this->UserLevelPriv = $_SESSION[EWR_SESSION_AR_USER_LEVEL_PRIV];"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Get current user info"+"\r\n"+"	function CurrentUserInfo($fldname) {"+"\r\n"+"		$info = NULL;"+"\r\n"+"    ";
ewAr[82] = ""+"\r\n"+"		$info = $this->GetUserInfo($fldname, $this->CurrentUserID);"+"\r\n"+"	";
ewAr[83] = ""+"\r\n"+"		if (defined(\"EWR_USER_TABLE\") && !$this->IsSysAdmin()) {"+"\r\n"+"			$user = $this->CurrentUserName();"+"\r\n"+"			if (strval($user) <> \"\")"+"\r\n"+"				return ewr_ExecuteScalar(\"SELECT \" . ewr_QuotedName($fldname) . \" FROM \" . EWR_USER_TABLE . \" WHERE \" ."+"\r\n"+"					str_replace(\"%u\", ewr_AdjustSql($user), EWR_USER_NAME_FILTER));"+"\r\n"+"		}"+"\r\n"+"	";
ewAr[84] = ""+"\r\n"+"		return $info;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[85] = ""+"\r\n"+""+"\r\n"+"	// Get user info"+"\r\n"+"	function GetUserInfo($FieldName, $UserID) {"+"\r\n"+"		global $conn;"+"\r\n"+"		if (strval($UserID) <> \"\") {"+"\r\n"+"			$sFilter = str_replace(\"%u\", ewr_AdjustSql($UserID), EWR_USER_ID_FILTER);"+"\r\n"+"			$sSql = EWR_LOGIN_SELECT_SQL . \" WHERE \" . $sFilter;"+"\r\n"+"			if (($RsUser = $conn->Execute($sSql)) && !$RsUser->EOF) {"+"\r\n"+"				$info = $RsUser->fields($FieldName);"+"\r\n"+"				$RsUser->Close();"+"\r\n"+"				return $info;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return NULL;"+"\r\n"+"  }"+"\r\n"+""+"\r\n"+"	// Get User ID by user name"+"\r\n"+"	function GetUserIDByUserName($UserName) {"+"\r\n"+"		global $conn;"+"\r\n"+"		if (strval($UserName) <> \"\") {"+"\r\n"+"			$sFilter = str_replace(\"%u\", ewr_AdjustSql($UserName), EWR_USER_NAME_FILTER);"+"\r\n"+"			$sSql = EWR_LOGIN_SELECT_SQL . \" WHERE \" . $sFilter;"+"\r\n"+"			if (($RsUser = $conn->Execute($sSql)) && !$RsUser->EOF) {"+"\r\n"+"				$UserID = $RsUser->fields('";
ewAr[86] = "');"+"\r\n"+"				$RsUser->Close();"+"\r\n"+"				return $UserID;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Load User ID"+"\r\n"+"	function LoadUserID() {"+"\r\n"+"		global $conn;"+"\r\n"+"		$this->UserID = array();"+"\r\n"+"		if (strval($this->CurrentUserID) == \"\") {"+"\r\n"+"			// Add codes to handle empty user id here"+"\r\n"+"		} elseif ($this->CurrentUserID <> \"-1\") {"+"\r\n"+"			// Get first level"+"\r\n"+"			$this->AddUserID($this->CurrentUserID);"+"\r\n"+"			$sFilter = str_replace(\"%u\", ewr_AdjustSql($this->CurrentUserID), EWR_USER_ID_FILTER);"+"\r\n"+"	";
ewAr[87] = ""+"\r\n"+"			$sParentFilter = '";
ewAr[88] = " IN (' . $this->UserIDList() . ')';"+"\r\n"+"			$sFilter = \"($sFilter) OR ($sParentFilter)\";"+"\r\n"+"	";
ewAr[89] = ""+"\r\n"+"			$sSql = EWR_LOGIN_SELECT_SQL . \" WHERE \" . $sFilter;"+"\r\n"+"			if ($RsUser = $conn->Execute($sSql)) {"+"\r\n"+"				while (!$RsUser->EOF) {"+"\r\n"+"					$this->AddUserID($RsUser->fields('";
ewAr[90] = "'));"+"\r\n"+"					$RsUser->MoveNext();"+"\r\n"+"				}"+"\r\n"+"				$RsUser->Close();"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"	";
ewAr[91] = ""+"\r\n"+"			// Recurse all levels (hierarchical User ID)"+"\r\n"+"			if (EWR_USER_ID_IS_HIERARCHICAL) {"+"\r\n"+"				$sCurUserIDList = $this->UserIDList();"+"\r\n"+"				$sUserIDList = \"\";"+"\r\n"+"				while ($sUserIDList <> $sCurUserIDList) {"+"\r\n"+"					$sFilter = '";
ewAr[92] = " IN (' . $sCurUserIDList . ')';"+"\r\n"+"					$sSql = EWR_LOGIN_SELECT_SQL . \" WHERE \" . $sFilter;"+"\r\n"+"					if ($RsUser = $conn->Execute($sSql)) {"+"\r\n"+"						while (!$RsUser->EOF) {"+"\r\n"+"							$this->AddUserID($RsUser->fields('";
ewAr[93] = "'));"+"\r\n"+"							$RsUser->MoveNext();"+"\r\n"+"						}"+"\r\n"+"						$RsUser->Close();"+"\r\n"+"					}"+"\r\n"+"					$sUserIDList = $sCurUserIDList;"+"\r\n"+"					$sCurUserIDList = $this->UserIDList();"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"	";
ewAr[94] = ""+"\r\n"+""+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add user name"+"\r\n"+"	function AddUserName($UserName) {"+"\r\n"+"		$this->AddUserID($this->GetUserIDByUserName($UserName));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add User ID"+"\r\n"+"	function AddUserID($userid) {"+"\r\n"+"		if (strval($userid) == \"\") return;"+"\r\n"+"";
ewAr[95] = ""+"\r\n"+"		if (!is_numeric($userid)) return;"+"\r\n"+"";
ewAr[96] = ""+"\r\n"+"		if (!in_array(trim(strval($userid)), $this->UserID))"+"\r\n"+"			$this->UserID[] = trim(strval($userid));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Delete user name"+"\r\n"+"	function DeleteUserName($UserName) {"+"\r\n"+"		$this->DeleteUserID($this->GetUserIDByUserName($UserName));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Delete User ID"+"\r\n"+"	function DeleteUserID($userid) {"+"\r\n"+"		if (strval($userid) == \"\") return;"+"\r\n"+"";
ewAr[97] = ""+"\r\n"+"		if (!is_numeric($userid)) return;"+"\r\n"+"";
ewAr[98] = ""+"\r\n"+"		$cnt = count($this->UserID);"+"\r\n"+"		for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"			if ($this->UserID[$i] == trim(strval($userid))) {"+"\r\n"+"				unset($this->UserID[$i]);"+"\r\n"+"				break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// User ID list"+"\r\n"+"	function UserIDList() {"+"\r\n"+"		$ar = $this->UserID;"+"\r\n"+"		$len = count($ar);"+"\r\n"+"		for ($i = 0; $i < $len; $i++)"+"\r\n"+"			$ar[$i] =  ewr_QuotedValue($ar[$i], ";
ewAr[99] = ");"+"\r\n"+"		return implode(\", \", $ar);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	";
ewAr[100] = ""+"\r\n"+""+"\r\n"+"	// Parent User ID list"+"\r\n"+"	function ParentUserIDList($userid) {"+"\r\n"+"		$result = \"\";"+"\r\n"+""+"\r\n"+"		// Own record"+"\r\n"+"		if (trim(strval($userid)) == strval(CurrentUserID())) {"+"\r\n"+"			if (strval(CurrentParentUserID()) <> \"\")"+"\r\n"+"				$result = ewr_QuotedValue(CurrentParentUserID(), ";
ewAr[101] = ");"+"\r\n"+"			return $result;"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// One level only, must be CurrentUserID"+"\r\n"+"		if (!EWR_USER_ID_IS_HIERARCHICAL) {"+"\r\n"+""+"\r\n"+"			return ewr_QuotedValue(CurrentUserID(), ";
ewAr[102] = ");"+"\r\n"+""+"\r\n"+"		} else { // Hierarchical, all users except userid"+"\r\n"+""+"\r\n"+"			$ar = $this->UserID;"+"\r\n"+"			$len = count($ar);"+"\r\n"+"			for ($i = 0; $i < $len; $i++) {"+"\r\n"+"				if (strval($ar[$i]) <> trim(strval($userid))) {"+"\r\n"+"					if ($result <> \"\")"+"\r\n"+"						$result .= \", \";"+"\r\n"+"					$result .= ewr_QuotedValue($ar[$i], ";
ewAr[103] = ");"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			return $result;"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[104] = ""+"\r\n"+"	"+"\r\n"+"	// List of allowed User IDs for this user"+"\r\n"+"	function IsValidUserID($userid) {"+"\r\n"+"		return in_array(trim(strval($userid)), $this->UserID);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	";
ewAr[105] = ""+"\r\n"+""+"\r\n"+"	";
ewAr[106] = ""+"\r\n"+"	";
ewAr[107] = ""+"\r\n"+"	";
ewAr[108] = ""+"\r\n"+"	";
ewAr[109] = ""+"\r\n"+"	";
ewAr[110] = ""+"\r\n"+"	";
ewAr[111] = ""+"\r\n"+"	";
ewAr[112] = ""+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Functions for backward compatibilty"+"\r\n"+" */"+"\r\n"+""+"\r\n"+"// Get current user name"+"\r\n"+"function CurrentUserName() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->CurrentUserName() : strval(@$_SESSION[EWR_SESSION_USER_NAME]);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current user ID"+"\r\n"+"function CurrentUserID() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->CurrentUserID() : strval(@$_SESSION[EWR_SESSION_USER_ID]);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current parent user ID"+"\r\n"+"function CurrentParentUserID() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->CurrentParentUserID() : strval(@$_SESSION[EWR_SESSION_PARENT_USER_ID]);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current user level"+"\r\n"+"function CurrentUserLevel() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->CurrentUserLevelID() : @$_SESSION[EWR_SESSION_USER_LEVEL_ID];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current user level list"+"\r\n"+"function CurrentUserLevelList() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->UserLevelList() : strval(@$_SESSION[EWR_SESSION_USER_LEVEL_ID]);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get Current user info"+"\r\n"+"function CurrentUserInfo($fldname) {"+"\r\n"+"	global $Security;"+"\r\n"+"	if (isset($Security)) {"+"\r\n"+"		return $Security->CurrentUserInfo($fldname);"+"\r\n"+"	} elseif (defined(\"EWR_USER_TABLE\") && !IsSysAdmin()) {"+"\r\n"+"		$user = CurrentUserName();"+"\r\n"+"		if (strval($user) <> \"\")"+"\r\n"+"			return ewr_ExecuteScalar(\"SELECT \" . ew_QuotedName($fldname) . \" FROM \" . EWR_USER_TABLE . \" WHERE \" ."+"\r\n"+"				str_replace(\"%u\", ew_AdjustSql($user), EWR_USER_NAME_FILTER));"+"\r\n"+"	}"+"\r\n"+"	return NULL;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Is logged in"+"\r\n"+"function IsLoggedIn() {"+"\r\n"+"	global $Security;"+"\r\n"+"	return (isset($Security)) ? $Security->IsLoggedIn() : (@$_SESSION[EWR_SESSION_STATUS] == \"login\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if user is system administrator"+"\r\n"+"function IsSysAdmin() {"+"\r\n"+"	return (@$_SESSION[EWR_SESSION_SYSTEM_ADMIN] == 1);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current page ID"+"\r\n"+"function CurrentPageID() {"+"\r\n"+"	if (isset($GLOBALS[\"Page\"])) {"+"\r\n"+"		return $GLOBALS[\"Page\"]->PageID;"+"\r\n"+"	} elseif (defined(\"EWR_PAGE_ID\")) {"+"\r\n"+"		return EWR_PAGE_ID;"+"\r\n"+"	}"+"\r\n"+"	return \"\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Allow list"+"\r\n"+"function AllowList($TableName) {"+"\r\n"+"	global $Security;"+"\r\n"+"	return $Security->AllowList($TableName);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get user IP"+"\r\n"+"function ewr_CurrentUserIP() {"+"\r\n"+"	return ewr_ServerVar(\"REMOTE_ADDR\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Load recordset"+"\r\n"+"function &ewr_LoadRecordset($SQL) {"+"\r\n"+"	global $conn;"+"\r\n"+"	$conn->raiseErrorFn = $GLOBALS[\"EWR_ERROR_FN\"];"+"\r\n"+"	$rs = $conn->Execute($SQL);"+"\r\n"+"	$conn->raiseErrorFn = '';"+"\r\n"+"	return $rs;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Execute UPDATE, INSERT, or DELETE statements"+"\r\n"+"function ewr_Execute($SQL) {"+"\r\n"+"	global $conn;"+"\r\n"+"	$conn->raiseErrorFn = $GLOBALS[\"EWR_ERROR_FN\"];"+"\r\n"+"	$res = $conn->Execute($SQL);"+"\r\n"+"	$conn->raiseErrorFn = '';"+"\r\n"+"	return $res;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Executes the query, and returns the first column of the first row"+"\r\n"+"function ewr_ExecuteScalar($SQL) {"+"\r\n"+"	$res = FALSE;"+"\r\n"+"	$rs = ewr_LoadRecordset($SQL);"+"\r\n"+"	if ($rs && !$rs->EOF && $rs->FieldCount() > 0) {"+"\r\n"+"		$res = $rs->fields[0];"+"\r\n"+"		$rs->Close();"+"\r\n"+"	}"+"\r\n"+"	return $res;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Executes the query, and returns the first row"+"\r\n"+"function ewr_ExecuteRow($SQL) {"+"\r\n"+"	$res = FALSE;"+"\r\n"+"	$rs = ewr_LoadRecordset($SQL);"+"\r\n"+"	if ($rs && !$rs->EOF) {"+"\r\n"+"		$res = $rs->fields;"+"\r\n"+"		$rs->Close();"+"\r\n"+"	}"+"\r\n"+"	return $res;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if valid operator"+"\r\n"+"function ewr_IsValidOpr($Opr, $FldType) {"+"\r\n"+"	$valid = ($Opr == \"=\" || $Opr == \"<\" || $Opr == \"<=\" ||"+"\r\n"+"		$Opr == \">\" || $Opr == \">=\" || $Opr == \"<>\");"+"\r\n"+"	if ($FldType == EWR_DATATYPE_STRING || $FldType == EWR_DATATYPE_MEMO)"+"\r\n"+"		$valid = ($valid || $Opr == \"LIKE\" || $Opr == \"NOT LIKE\" || $Opr == \"STARTS WITH\" || $Opr == \"ENDS WITH\");"+"\r\n"+"	return $valid;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Quote table/field name"+"\r\n"+"function ewr_QuotedName($Name) {"+"\r\n"+"	$Name = str_replace(EWR_DB_QUOTE_END, EWR_DB_QUOTE_END . EWR_DB_QUOTE_END, $Name);"+"\r\n"+"	return EWR_DB_QUOTE_START . $Name . EWR_DB_QUOTE_END;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Quote field values"+"\r\n"+"function ewr_QuotedValue($Value, $FldType) {"+"\r\n"+"	if (is_null($Value))"+"\r\n"+"		return \"NULL\";"+"\r\n"+"	switch ($FldType) {"+"\r\n"+"	case EWR_DATATYPE_STRING:"+"\r\n"+"	case EWR_DATATYPE_BLOB:"+"\r\n"+"	case EWR_DATATYPE_MEMO:"+"\r\n"+"	case EWR_DATATYPE_TIME:"+"\r\n"+"			return \"'\" . ewr_AdjustSql($Value) . \"'\";"+"\r\n"+"	case EWR_DATATYPE_DATE:"+"\r\n"+"		return (EWR_IS_MSACCESS) ? \"#\" . ewr_AdjustSql($Value) . \"#\" :"+"\r\n"+"			\"'\" . ewr_AdjustSql($Value) . \"'\";"+"\r\n"+"//	case EWR_DATATYPE_GUID:"+"\r\n"+"//		if (EWR_IS_MSACCESS) {"+"\r\n"+"//			if (strlen($Value) == 38) {"+"\r\n"+"//				return \"{guid \" . $Value . \"}\";"+"\r\n"+"//			} elseif (strlen($Value) == 36) {"+"\r\n"+"//				return \"{guid {\" . $Value . \"}}\";"+"\r\n"+"//			}"+"\r\n"+"//		} else {"+"\r\n"+"//		  return \"'\" . $Value . \"'\";"+"\r\n"+"//		}"+"\r\n"+"	case EWR_DATATYPE_BOOLEAN: // ENUM('Y'/'N') Or ENUM('1'/'0')"+"\r\n"+"		//return \"'\" . $Value . \"'\";"+"\r\n"+"		return (EWR_IS_MSACCESS) ? $Value : \"'\" . ewr_AdjustSql($Value) . \"'\";"+"\r\n"+"	default:"+"\r\n"+"		return $Value;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get distinct values"+"\r\n"+"function ewr_GetDistinctValues($FldOpr, $sql, $dlm = \"\") {"+"\r\n"+"	global $conn;"+"\r\n"+"	$ar = array();"+"\r\n"+"	if (strval($sql) == \"\")"+"\r\n"+"		return;"+"\r\n"+"	$wrkrs = $conn->Execute($sql);"+"\r\n"+"	if ($wrkrs) {"+"\r\n"+"		while (!$wrkrs->EOF) {"+"\r\n"+"			$wrkval = ewr_ConvertValue($FldOpr, $wrkrs->fields[0]);"+"\r\n"+"			if ($dlm <> \"\") {"+"\r\n"+"				$arval = explode($dlm, $wrkval);"+"\r\n"+"			} else {"+"\r\n"+"				$arval = array($wrkval);"+"\r\n"+"			}"+"\r\n"+"			$cntar = count($arval);"+"\r\n"+"			for ($i = 0; $i < $cntar; $i++) {"+"\r\n"+"				$val = $arval[$i];"+"\r\n"+"				if (!in_array($val,$ar))"+"\r\n"+"					$ar[] = $val;"+"\r\n"+"			}"+"\r\n"+"			$wrkrs->MoveNext();"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	if ($wrkrs) $wrkrs->Close();"+"\r\n"+"	return $ar;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert value"+"\r\n"+"function ewr_ConvertValue($FldOpr, $val) {"+"\r\n"+"	if (is_null($val)) {"+"\r\n"+"		return EWR_NULL_VALUE;"+"\r\n"+"	} elseif ($val == \"\") {"+"\r\n"+"		return EWR_EMPTY_VALUE;"+"\r\n"+"	}"+"\r\n"+"	if (is_float($val))"+"\r\n"+"		$val = (float)$val;"+"\r\n"+"	if ($FldOpr == \"\")"+"\r\n"+"		return $val;"+"\r\n"+"	if ($ar = explode(\" \", $val)) {"+"\r\n"+"		$ar = explode(\"-\", $ar[0]);"+"\r\n"+"	} else {"+"\r\n"+"		return $val;"+"\r\n"+"	}"+"\r\n"+"	if (!$ar || count($ar) <> 3)"+"\r\n"+"		return $val;"+"\r\n"+"	list($year, $month, $day) = $ar;"+"\r\n"+"	switch (strtolower($FldOpr)) {"+"\r\n"+"	case \"year\":"+"\r\n"+"		return $year;"+"\r\n"+"	case \"quarter\":"+"\r\n"+"		return \"$year|\" . ceil(intval($month)/3);"+"\r\n"+"	case \"month\":"+"\r\n"+"		return \"$year|$month\";"+"\r\n"+"	case \"day\":"+"\r\n"+"		return \"$year|$month|$day\";"+"\r\n"+"	case \"date\":"+"\r\n"+"		return \"$year-$month-$day\";"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Dropdown display values"+"\r\n"+"function ewr_DropDownDisplayValue($v, $t, $fmt) {"+"\r\n"+"	global $ReportLanguage;"+"\r\n"+"	if ($v == EWR_NULL_VALUE) {"+"\r\n"+"		return $ReportLanguage->Phrase(\"NullLabel\");"+"\r\n"+"	} elseif ($v == EWR_EMPTY_VALUE) {"+"\r\n"+"		return $ReportLanguage->Phrase(\"EmptyLabel\");"+"\r\n"+"	} elseif (strtolower($t) == \"boolean\") {"+"\r\n"+"		return ewr_BooleanName($v);"+"\r\n"+"	}"+"\r\n"+"	if ($t == \"\")"+"\r\n"+"		return $v;"+"\r\n"+"	$ar = explode(\"|\", strval($v));"+"\r\n"+"	switch (strtolower($t)) {"+"\r\n"+"	case \"year\":"+"\r\n"+"		return $v;"+"\r\n"+"	case \"quarter\":"+"\r\n"+"		if (count($ar) >= 2)"+"\r\n"+"			return ewr_QuarterName($ar[1]) . \" \" . $ar[0];"+"\r\n"+"	case \"month\":"+"\r\n"+"		if (count($ar) >= 2)"+"\r\n"+"			return ewr_MonthName($ar[1]) . \" \" . $ar[0];"+"\r\n"+"	case \"day\":"+"\r\n"+"		if (count($ar) >= 3)"+"\r\n"+"			return ewr_FormatDateTime($ar[0] . \"-\" . $ar[1] . \"-\" . $ar[2], $fmt);"+"\r\n"+"	case \"date\":"+"\r\n"+"		return ewr_FormatDateTime($v, $fmt);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get Boolean Name"+"\r\n"+"// - Treat \"T\" / \"True\" / \"Y\" / \"Yes\" / \"1\" As True"+"\r\n"+"function ewr_BooleanName($v) {"+"\r\n"+"	global $ReportLanguage;"+"\r\n"+"	if (is_null($v))"+"\r\n"+"		return $ReportLanguage->Phrase(\"NullLabel\");"+"\r\n"+"	elseif (strtoupper($v) == \"T\" || strtoupper($v) == \"TRUE\" || strtoupper($v) == \"Y\" || strtoupper($v) == \"YES\" Or strval($v) == \"1\")"+"\r\n"+"		return $ReportLanguage->Phrase(\"BooleanYes\");"+"\r\n"+"	else"+"\r\n"+"		return $ReportLanguage->Phrase(\"BooleanNo\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Quarter name"+"\r\n"+"function ewr_QuarterName($q) {"+"\r\n"+"	global $ReportLanguage;"+"\r\n"+"	switch ($q) {"+"\r\n"+"	case 1:"+"\r\n"+"		return $ReportLanguage->Phrase(\"Qtr1\");"+"\r\n"+"	case 2:"+"\r\n"+"		return $ReportLanguage->Phrase(\"Qtr2\");"+"\r\n"+"	case 3:"+"\r\n"+"		return $ReportLanguage->Phrase(\"Qtr3\");"+"\r\n"+"	case 4:"+"\r\n"+"		return $ReportLanguage->Phrase(\"Qtr4\");"+"\r\n"+"	default:"+"\r\n"+"		return $q;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Month name"+"\r\n"+"function ewr_MonthName($m) {"+"\r\n"+"	global $ReportLanguage;"+"\r\n"+"	switch ($m) {"+"\r\n"+"	case 1:"+"\r\n"+"		return $ReportLanguage->Phrase(\"MonthJan\");"+"\r\n"+"	case 2:"+"\r\n"+"		return $ReportLanguage->Phrase(\"MonthFeb\");"+"\r\n"+"	case 3:"+"\r\n"+"		return $ReportLanguage->Phrase(\"MonthMar\");"+"\r\n"+"	case 4:"+"\r\n"+"		return $ReportLanguage->Phrase(\"MonthApr\");"+"\r\n"+"	case 5:"+"\r\n"+"		return $ReportLanguage->Phrase(\"MonthMay\");"+"\r\n"+"	case 6:"+"\r\n"+"		return $ReportLanguage->Phrase(\"MonthJun\");"+"\r\n"+"	case 7:"+"\r\n"+"		return $ReportLanguage->Phrase(\"MonthJul\");"+"\r\n"+"	case 8:"+"\r\n"+"		return $ReportLanguage->Phrase(\"MonthAug\");"+"\r\n"+"	case 9:"+"\r\n"+"		return $ReportLanguage->Phrase(\"MonthSep\");"+"\r\n"+"	case 10:"+"\r\n"+"		return $ReportLanguage->Phrase(\"MonthOct\");"+"\r\n"+"	case 11:"+"\r\n"+"		return $ReportLanguage->Phrase(\"MonthNov\");"+"\r\n"+"	case 12:"+"\r\n"+"		return $ReportLanguage->Phrase(\"MonthDec\");"+"\r\n"+"	default:"+"\r\n"+"		return $m;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get group count for custom template"+"\r\n"+"function ewr_GrpCnt($ar, $key = array()) {"+"\r\n"+"	if (is_array($ar) && is_array($key)) {"+"\r\n"+"		$lvl = count($key);"+"\r\n"+"		$cnt = 0;"+"\r\n"+"		if ($lvl > 1) { // Get next level"+"\r\n"+"			$wrkkey = array_shift($key);"+"\r\n"+"			$wrkar = @$ar[$wrkkey];"+"\r\n"+"			$cnt += ewr_GrpCnt($wrkar, $key);"+"\r\n"+"		} else {"+"\r\n"+"			$wrkar = ($lvl == 0) ? $ar : @$ar[$key[0]];"+"\r\n"+"			if (is_array($wrkar)) { // Accumulate all values"+"\r\n"+"				$grp = count($wrkar);"+"\r\n"+"				for ($i = 1; $i < $grp; $i++)"+"\r\n"+"					$cnt += ewr_GrpCnt($wrkar, array($i));"+"\r\n"+"			} else {"+"\r\n"+"				$cnt = $wrkar;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $cnt;"+"\r\n"+"	} else {"+"\r\n"+"		return 0;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Join array"+"\r\n"+"function ewr_JoinArray($ar, $sep, $ft, $pos=0) {"+"\r\n"+"	if (!is_array($ar))"+"\r\n"+"		return \"\";"+"\r\n"+"	$arwrk = array_slice($ar, $pos); // Return array from position pos"+"\r\n"+"	$cntar = count($arwrk);"+"\r\n"+"	for ($i = 0; $i < $cntar; $i++)"+"\r\n"+"		$arwrk[$i] = ewr_QuotedValue($arwrk[$i], $ft);"+"\r\n"+"	return implode($sep, $arwrk);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Unformat date time based on format type"+"\r\n"+"function ewr_UnFormatDateTime($dt, $namedformat) {"+"\r\n"+"	$dt = trim($dt);"+"\r\n"+"	while (strpos($dt, \"  \") !== FALSE) $dt = str_replace(\"  \", \" \", $dt);"+"\r\n"+"	$arDateTime = explode(\" \", $dt);"+"\r\n"+"	if (count($arDateTime) == 0) return $dt;"+"\r\n"+"	$arDatePt = explode(EWR_DATE_SEPARATOR, $arDateTime[0]);"+"\r\n"+"	if ($namedformat == 0 || $namedformat == 1 || $namedformat == 2 || $namedformat == 8) {"+"\r\n"+"		$arDefFmt = explode(EWR_DATE_SEPARATOR, EWR_DEFAULT_DATE_FORMAT);"+"\r\n"+"		if ($arDefFmt[0] == \"yyyy\") {"+"\r\n"+"			$namedformat = 9;"+"\r\n"+"		} elseif ($arDefFmt[0] == \"mm\") {"+"\r\n"+"			$namedformat = 10;"+"\r\n"+"		} elseif ($arDefFmt[0] == \"dd\") {"+"\r\n"+"			$namedformat = 11;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	if (count($arDatePt) == 3) {"+"\r\n"+"		switch ($namedformat) {"+"\r\n"+"		case 5:"+"\r\n"+"		case 9: //yyyymmdd"+"\r\n"+"			if (ewr_CheckDate($arDateTime[0])) {"+"\r\n"+"				list($year, $month, $day) = $arDatePt;"+"\r\n"+"				break;"+"\r\n"+"			} else {"+"\r\n"+"				return $dt;"+"\r\n"+"			}"+"\r\n"+"		case 6:"+"\r\n"+"		case 10: //mmddyyyy"+"\r\n"+"			if (ewr_CheckUSDate($arDateTime[0])) {"+"\r\n"+"				list($month, $day, $year) = $arDatePt;"+"\r\n"+"				break;"+"\r\n"+"			} else {"+"\r\n"+"				return $dt;"+"\r\n"+"			}"+"\r\n"+"		case 7:"+"\r\n"+"		case 11: //ddmmyyyy"+"\r\n"+"			if (ewr_CheckEuroDate($arDateTime[0])) {"+"\r\n"+"				list($day, $month, $year) = $arDatePt;"+"\r\n"+"				break;"+"\r\n"+"			} else {"+"\r\n"+"				return $dt;"+"\r\n"+"			}"+"\r\n"+"		case 12:"+"\r\n"+"		case 15: //yymmdd"+"\r\n"+"			if (ewr_CheckShortDate($arDateTime[0])) {"+"\r\n"+"				list($year, $month, $day) = $arDatePt;"+"\r\n"+"				$year = ewr_UnformatYear($year);"+"\r\n"+"				break;"+"\r\n"+"			} else {"+"\r\n"+"				return $dt;"+"\r\n"+"			}"+"\r\n"+"		case 13:"+"\r\n"+"		case 16: //mmddyy"+"\r\n"+"			if (ewr_CheckShortUSDate($arDateTime[0])) {"+"\r\n"+"				list($month, $day, $year) = $arDatePt;"+"\r\n"+"				$year = ewr_UnformatYear($year);"+"\r\n"+"				break;"+"\r\n"+"			} else {"+"\r\n"+"				return $dt;"+"\r\n"+"			}"+"\r\n"+"		case 14:"+"\r\n"+"		case 17: //ddmmyy"+"\r\n"+"			if (ewr_CheckShortEuroDate($arDateTime[0])) {"+"\r\n"+"				list($day, $month, $year) = $arDatePt;"+"\r\n"+"				$year = ewr_UnformatYear($year);"+"\r\n"+"				break;"+"\r\n"+"			} else {"+"\r\n"+"				return $dt;"+"\r\n"+"			}"+"\r\n"+"		default:"+"\r\n"+"			return $dt;"+"\r\n"+"		}"+"\r\n"+"		if (strlen($year) <= 4 && strlen($month) <= 2 && strlen($day) <= 2) {"+"\r\n"+"			return $year . \"-\" . str_pad($month, 2, \"0\", STR_PAD_LEFT) . \"-\" ."+"\r\n"+"				 str_pad($day, 2, \"0\", STR_PAD_LEFT) ."+"\r\n"+"				((count($arDateTime) > 1) ? \" \" . $arDateTime[1] : \"\");"+"\r\n"+"		} else {"+"\r\n"+"			return $dt;"+"\r\n"+"		}"+"\r\n"+"	} else {"+"\r\n"+"		return $dt;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// ViewValue"+"\r\n"+"// - return &nbsp; if empty"+"\r\n"+"function ewr_ViewValue($value) {"+"\r\n"+"	if ($value <> \"\")"+"\r\n"+"		return $value;"+"\r\n"+"	else"+"\r\n"+"		return \"&nbsp;\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current year"+"\r\n"+"function ewr_CurrentYear() {"+"\r\n"+"	return intval(date('Y'));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current quarter"+"\r\n"+"function ewr_CurrentQuarter() {"+"\r\n"+"	return ceil(intval(date('n'))/3);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current month"+"\r\n"+"function ewr_CurrentMonth() {"+"\r\n"+"	return intval(date('n'));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current day"+"\r\n"+"function ewr_CurrentDay() {"+"\r\n"+"	return intval(date('j'));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// FormatDateTime"+"\r\n"+"// Format a timestamp, datetime, date or time field from MySQL"+"\r\n"+"// $namedformat:"+"\r\n"+"// 0 - General Date"+"\r\n"+"// 1 - Long Date"+"\r\n"+"// 2 - Short Date (Default)"+"\r\n"+"// 3 - Long Time"+"\r\n"+"// 4 - Short Time (hh:mm:ss)"+"\r\n"+"// 5 - Short Date (yyyy/mm/dd)"+"\r\n"+"// 6 - Short Date (mm/dd/yyyy)"+"\r\n"+"// 7 - Short Date (dd/mm/yyyy)"+"\r\n"+"// 8 - Short Date (Default) + Short Time (if not 00:00:00)"+"\r\n"+"// 9 - Short Date (yyyy/mm/dd) + Short Time (hh:mm:ss)"+"\r\n"+"// 10 - Short Date (mm/dd/yyyy) + Short Time (hh:mm:ss)"+"\r\n"+"// 11 - Short Date (dd/mm/yyyy) + Short Time (hh:mm:ss)"+"\r\n"+"// 12 - Short Date - 2 digit year (yy/mm/dd)"+"\r\n"+"// 13 - Short Date - 2 digit year (mm/dd/yy)"+"\r\n"+"// 14 - Short Date - 2 digit year (dd/mm/yy)"+"\r\n"+"// 15 - Short Date - 2 digit year (yy/mm/dd) + Short Time (hh:mm:ss)"+"\r\n"+"// 16 - Short Date (mm/dd/yyyy) + Short Time (hh:mm:ss)"+"\r\n"+"// 17 - Short Date (dd/mm/yyyy) + Short Time (hh:mm:ss)"+"\r\n"+"function ewr_FormatDateTime($ts, $namedformat) {"+"\r\n"+"	$DefDateFormat = str_replace(\"yyyy\", \"%Y\", EWR_DEFAULT_DATE_FORMAT);"+"\r\n"+"	$DefDateFormat = str_replace(\"mm\", \"%m\", $DefDateFormat);"+"\r\n"+"	$DefDateFormat = str_replace(\"dd\", \"%d\", $DefDateFormat);"+"\r\n"+"	if (is_numeric($ts)) // TimeStamp"+"\r\n"+"	{"+"\r\n"+"		switch (strlen($ts)) {"+"\r\n"+"			case 14:"+"\r\n"+"				$patt = '/(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			case 12:"+"\r\n"+"				$patt = '/(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			case 10:"+"\r\n"+"				$patt = '/(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			case 8:"+"\r\n"+"				$patt = '/(\\d{4})(\\d{2})(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			case 6:"+"\r\n"+"				$patt = '/(\\d{2})(\\d{2})(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			case 4:"+"\r\n"+"				$patt = '/(\\d{2})(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			case 2:"+"\r\n"+"				$patt = '/(\\d{2})/';"+"\r\n"+"				break;"+"\r\n"+"			default:"+"\r\n"+"				return $ts;"+"\r\n"+"		}"+"\r\n"+"		if ((isset($patt))&&(preg_match($patt, $ts, $matches)))"+"\r\n"+"		{"+"\r\n"+"			$year = $matches[1];"+"\r\n"+"			$month = @$matches[2];"+"\r\n"+"			$day = @$matches[3];"+"\r\n"+"			$hour = @$matches[4];"+"\r\n"+"			$min = @$matches[5];"+"\r\n"+"			$sec = @$matches[6];"+"\r\n"+"		}"+"\r\n"+"		if (($namedformat==0)&&(strlen($ts)<10)) $namedformat = 2;"+"\r\n"+"	}"+"\r\n"+"	elseif (is_string($ts))"+"\r\n"+"	{"+"\r\n"+"		if (preg_match('/(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/', $ts, $matches)) // DateTime"+"\r\n"+"		{"+"\r\n"+"			$year = $matches[1];"+"\r\n"+"			$month = $matches[2];"+"\r\n"+"			$day = $matches[3];"+"\r\n"+"			$hour = $matches[4];"+"\r\n"+"			$min = $matches[5];"+"\r\n"+"			$sec = $matches[6];"+"\r\n"+"		}"+"\r\n"+"		elseif (preg_match('/(\\d{4})-(\\d{2})-(\\d{2})/', $ts, $matches)) // Date"+"\r\n"+"		{"+"\r\n"+"			$year = $matches[1];"+"\r\n"+"			$month = $matches[2];"+"\r\n"+"			$day = $matches[3];"+"\r\n"+"			if ($namedformat==0) $namedformat = 2;"+"\r\n"+"		}"+"\r\n"+"		elseif (preg_match('/(^|\\s)(\\d{2}):(\\d{2}):(\\d{2})/', $ts, $matches)) // Time"+"\r\n"+"		{"+"\r\n"+"			$hour = $matches[2];"+"\r\n"+"			$min = $matches[3];"+"\r\n"+"			$sec = $matches[4];"+"\r\n"+"			if (($namedformat==0)||($namedformat==1)) $namedformat = 3;"+"\r\n"+"			if ($namedformat==2) $namedformat = 4;"+"\r\n"+"		}"+"\r\n"+"		else"+"\r\n"+"		{"+"\r\n"+"			return $ts;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	else"+"\r\n"+"	{"+"\r\n"+"		return $ts;"+"\r\n"+"	}"+"\r\n"+"	if (!isset($year)) $year = 0; // Dummy value for times"+"\r\n"+"	if (!isset($month)) $month = 1;"+"\r\n"+"	if (!isset($day)) $day = 1;"+"\r\n"+"	if (!isset($hour)) $hour = 0;"+"\r\n"+"	if (!isset($min)) $min = 0;"+"\r\n"+"	if (!isset($sec)) $sec = 0;"+"\r\n"+"	$uts = @mktime($hour, $min, $sec, $month, $day, $year);"+"\r\n"+"	if ($uts < 0 || $uts == FALSE || // Failed to convert"+"\r\n"+"		(intval($year) == 0 && intval($month) == 0 && intval($day) == 0)) {"+"\r\n"+"		$year = substr_replace(\"0000\", $year, -1 * strlen($year));"+"\r\n"+"		$month = substr_replace(\"00\", $month, -1 * strlen($month));"+"\r\n"+"		$day = substr_replace(\"00\", $day, -1 * strlen($day));"+"\r\n"+"		$hour = substr_replace(\"00\", $hour, -1 * strlen($hour));"+"\r\n"+"		$min = substr_replace(\"00\", $min, -1 * strlen($min));"+"\r\n"+"		$sec = substr_replace(\"00\", $sec, -1 * strlen($sec));"+"\r\n"+"		$DefDateFormat = str_replace(\"yyyy\", $year, EWR_DEFAULT_DATE_FORMAT);"+"\r\n"+"		$DefDateFormat = str_replace(\"mm\", $month, $DefDateFormat);"+"\r\n"+"		$DefDateFormat = str_replace(\"dd\", $day, $DefDateFormat);"+"\r\n"+"		switch ($namedformat) {"+"\r\n"+"			case 0:"+"\r\n"+"				return $DefDateFormat.\" $hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 1://unsupported, return general date"+"\r\n"+"				return $DefDateFormat.\" $hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 2:"+"\r\n"+"				return $DefDateFormat;"+"\r\n"+"				break;"+"\r\n"+"			case 3:"+"\r\n"+"				if (intval($hour)==0)"+"\r\n"+"					return \"12:$min:$sec AM\";"+"\r\n"+"				elseif (intval($hour)>0 && intval($hour)<12)"+"\r\n"+"					return \"$hour:$min:$sec AM\";"+"\r\n"+"				elseif (intval($hour)==12)"+"\r\n"+"					return \"$hour:$min:$sec PM\";"+"\r\n"+"				elseif (intval($hour)>12 && intval($hour)<=23)"+"\r\n"+"					return (intval($hour)-12).\":$min:$sec PM\";"+"\r\n"+"				else"+"\r\n"+"					return \"$hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 4:"+"\r\n"+"				return \"$hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 5:"+"\r\n"+"				return \"$year\". EWR_DATE_SEPARATOR . \"$month\" . EWR_DATE_SEPARATOR . \"$day\";"+"\r\n"+"				break;"+"\r\n"+"			case 6:"+"\r\n"+"				return \"$month\". EWR_DATE_SEPARATOR .\"$day\" . EWR_DATE_SEPARATOR . \"$year\";"+"\r\n"+"				break;"+"\r\n"+"			case 7:"+"\r\n"+"				return \"$day\" . EWR_DATE_SEPARATOR .\"$month\" . EWR_DATE_SEPARATOR . \"$year\";"+"\r\n"+"				break;"+"\r\n"+"			case 8:"+"\r\n"+"				return $DefDateFormat . (($hour == 0 && $min == 0 && $sec == 0) ? \"\" : \" $hour:$min:$sec\");"+"\r\n"+"				break;"+"\r\n"+"			case 9:"+"\r\n"+"				return \"$year\". EWR_DATE_SEPARATOR . \"$month\" . EWR_DATE_SEPARATOR . \"$day $hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 10:"+"\r\n"+"				return \"$month\". EWR_DATE_SEPARATOR .\"$day\" . EWR_DATE_SEPARATOR . \"$year $hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 11:"+"\r\n"+"				return \"$day\" . EWR_DATE_SEPARATOR .\"$month\" . EWR_DATE_SEPARATOR . \"$year $hour:$min:$sec\";"+"\r\n"+"				break;"+"\r\n"+"			case 12:"+"\r\n"+"				return substr($year,-2) . EWR_DATE_SEPARATOR . $month . EWR_DATE_SEPARATOR . $day;"+"\r\n"+"				break;"+"\r\n"+"			case 13:"+"\r\n"+"				return substr($year,-2) . EWR_DATE_SEPARATOR . $month . EWR_DATE_SEPARATOR . $day;"+"\r\n"+"				break;"+"\r\n"+"			case 14:"+"\r\n"+"				return substr($year,-2) . EWR_DATE_SEPARATOR . $month . EWR_DATE_SEPARATOR . $day;"+"\r\n"+"				break;"+"\r\n"+"			default:"+"\r\n"+"				return $ts;"+"\r\n"+"		}"+"\r\n"+"	} else {"+"\r\n"+"		switch ($namedformat) {"+"\r\n"+"			case 0:"+"\r\n"+"				return strftime($DefDateFormat.\" %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 1:"+"\r\n"+"				return strftime(\"%A, %B %d, %Y\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 2:"+"\r\n"+"				return strftime($DefDateFormat, $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 3:"+"\r\n"+"				return strftime(\"%I:%M:%S %p\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 4:"+"\r\n"+"				return strftime(\"%H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 5:"+"\r\n"+"				return strftime(\"%Y\" . EWR_DATE_SEPARATOR . \"%m\" . EWR_DATE_SEPARATOR . \"%d\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 6:"+"\r\n"+"				return strftime(\"%m\" . EWR_DATE_SEPARATOR . \"%d\" . EWR_DATE_SEPARATOR . \"%Y\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 7:"+"\r\n"+"				return strftime(\"%d\" . EWR_DATE_SEPARATOR . \"%m\" . EWR_DATE_SEPARATOR . \"%Y\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 8:"+"\r\n"+"				return strftime($DefDateFormat . (($hour == 0 && $min == 0 && $sec == 0) ? \"\" : \" %H:%M:%S\"), $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 9:"+"\r\n"+"				return strftime(\"%Y\" . EWR_DATE_SEPARATOR . \"%m\" . EWR_DATE_SEPARATOR . \"%d %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 10:"+"\r\n"+"				return strftime(\"%m\" . EWR_DATE_SEPARATOR . \"%d\" . EWR_DATE_SEPARATOR . \"%Y %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 11:"+"\r\n"+"				return strftime(\"%d\" . EWR_DATE_SEPARATOR . \"%m\" . EWR_DATE_SEPARATOR . \"%Y %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 12:"+"\r\n"+"				return strftime(\"%y\" . EWR_DATE_SEPARATOR . \"%m\" . EWR_DATE_SEPARATOR . \"%d\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 13:"+"\r\n"+"				return strftime(\"%m\" . EWR_DATE_SEPARATOR . \"%d\" . EWR_DATE_SEPARATOR . \"%y\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 14:"+"\r\n"+"				return strftime(\"%d\" . EWR_DATE_SEPARATOR . \"%m\" . EWR_DATE_SEPARATOR . \"%y\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 15:"+"\r\n"+"				return strftime(\"%y\" . EWR_DATE_SEPARATOR . \"%m\" . EWR_DATE_SEPARATOR . \"%d %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 16:"+"\r\n"+"				return strftime(\"%m\" . EWR_DATE_SEPARATOR . \"%d\" . EWR_DATE_SEPARATOR . \"%y %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			case 17:"+"\r\n"+"				return strftime(\"%d\" . EWR_DATE_SEPARATOR . \"%m\" . EWR_DATE_SEPARATOR . \"%y %H:%M:%S\", $uts);"+"\r\n"+"				break;"+"\r\n"+"			default:"+"\r\n"+"				return $ts;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// FormatCurrency"+"\r\n"+"// FormatCurrency(Expression[,NumDigitsAfterDecimal [,IncludeLeadingDigit"+"\r\n"+"//  [,UseParensForNegativeNumbers [,GroupDigits]]]])"+"\r\n"+"// NumDigitsAfterDecimal is the numeric value indicating how many places to the right of the decimal are displayed"+"\r\n"+"// -1 Use Default"+"\r\n"+"// The IncludeLeadingDigit, UseParensForNegativeNumbers, and GroupDigits arguments have the following settings:"+"\r\n"+"// -1 True"+"\r\n"+"// 0 False"+"\r\n"+"// -2 Use Default"+"\r\n"+"function ewr_FormatCurrency($amount, $NumDigitsAfterDecimal = EWR_DEFAULT_DECIMAL_PRECISION, $IncludeLeadingDigit = -2, $UseParensForNegativeNumbers = -2, $GroupDigits = -2) {"+"\r\n"+""+"\r\n"+"	if (!is_numeric($amount))"+"\r\n"+"		return $amount;"+"\r\n"+""+"\r\n"+"	extract($GLOBALS[\"EWR_DEFAULT_LOCALE\"]);"+"\r\n"+""+"\r\n"+"	// Check $NumDigitsAfterDecimal"+"\r\n"+"	if ($NumDigitsAfterDecimal > -1)"+"\r\n"+"		$frac_digits = $NumDigitsAfterDecimal;"+"\r\n"+""+"\r\n"+"	// Check $UseParensForNegativeNumbers"+"\r\n"+"	if ($UseParensForNegativeNumbers == -1) {"+"\r\n"+"		$n_sign_posn = 0;"+"\r\n"+"		if ($p_sign_posn == 0) {"+"\r\n"+"			$p_sign_posn = 3;"+"\r\n"+"		}"+"\r\n"+"	} elseif ($UseParensForNegativeNumbers == 0) {"+"\r\n"+"		if ($n_sign_posn == 0)"+"\r\n"+"			$n_sign_posn = 3;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check $GroupDigits"+"\r\n"+"	if ($GroupDigits == -1) {"+"\r\n"+"	} elseif ($GroupDigits == 0) {"+"\r\n"+"		$mon_thousands_sep = \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Start by formatting the unsigned number"+"\r\n"+"	$number = number_format(abs($amount),"+"\r\n"+"							$frac_digits,"+"\r\n"+"							$mon_decimal_point,"+"\r\n"+"							$mon_thousands_sep);"+"\r\n"+""+"\r\n"+"	// Check $IncludeLeadingDigit"+"\r\n"+"	if ($IncludeLeadingDigit == 0) {"+"\r\n"+"		if (substr($number, 0, 2) == \"0.\")"+"\r\n"+"			$number = substr($number, 1, strlen($number)-1);"+"\r\n"+"	}"+"\r\n"+"	if ($amount < 0) {"+"\r\n"+"		$sign = $negative_sign;"+"\r\n"+""+"\r\n"+"		// \"extracts\" the boolean value as an integer"+"\r\n"+"		$n_cs_precedes  = intval($n_cs_precedes  == true);"+"\r\n"+"		$n_sep_by_space = intval($n_sep_by_space == true);"+"\r\n"+"		$key = $n_cs_precedes . $n_sep_by_space . $n_sign_posn;"+"\r\n"+"	} else {"+"\r\n"+"		$sign = $positive_sign;"+"\r\n"+"		$p_cs_precedes  = intval($p_cs_precedes  == true);"+"\r\n"+"		$p_sep_by_space = intval($p_sep_by_space == true);"+"\r\n"+"		$key = $p_cs_precedes . $p_sep_by_space . $p_sign_posn;"+"\r\n"+"	}"+"\r\n"+"	$formats = array("+"\r\n"+""+"\r\n"+"	  // Currency symbol is after amount"+"\r\n"+""+"\r\n"+"	  // No space between amount and sign"+"\r\n"+"	  '000' => '(%s' . $currency_symbol . ')',"+"\r\n"+"	  '001' => $sign . '%s ' . $currency_symbol,"+"\r\n"+"	  '002' => '%s' . $currency_symbol . $sign,"+"\r\n"+"	  '003' => '%s' . $sign . $currency_symbol,"+"\r\n"+"	  '004' => '%s' . $sign . $currency_symbol,"+"\r\n"+""+"\r\n"+"	  // One space between amount and sign"+"\r\n"+"	  '010' => '(%s ' . $currency_symbol . ')',"+"\r\n"+"	  '011' => $sign . '%s ' . $currency_symbol,"+"\r\n"+"	  '012' => '%s ' . $currency_symbol . $sign,"+"\r\n"+"	  '013' => '%s ' . $sign . $currency_symbol,"+"\r\n"+"	  '014' => '%s ' . $sign . $currency_symbol,"+"\r\n"+""+"\r\n"+"	  // Currency symbol is before amount"+"\r\n"+""+"\r\n"+"	  // No space between amount and sign"+"\r\n"+"	  '100' => '(' . $currency_symbol . '%s)',"+"\r\n"+"	  '101' => $sign . $currency_symbol . '%s',"+"\r\n"+"	  '102' => $currency_symbol . '%s' . $sign,"+"\r\n"+"	  '103' => $sign . $currency_symbol . '%s',"+"\r\n"+"	  '104' => $currency_symbol . $sign . '%s',"+"\r\n"+""+"\r\n"+"	  // One space between amount and sign"+"\r\n"+"	  '110' => '(' . $currency_symbol . ' %s)',"+"\r\n"+"	  '111' => $sign . $currency_symbol . ' %s',"+"\r\n"+"	  '112' => $currency_symbol . ' %s' . $sign,"+"\r\n"+"	  '113' => $sign . $currency_symbol . ' %s',"+"\r\n"+"	  '114' => $currency_symbol . ' ' . $sign . '%s');"+"\r\n"+""+"\r\n"+"  // Lookup the key in the above array"+"\r\n"+"	return sprintf($formats[$key], $number);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// FormatNumber"+"\r\n"+"// FormatNumber(Expression[,NumDigitsAfterDecimal [,IncludeLeadingDigit"+"\r\n"+"// 	[,UseParensForNegativeNumbers [,GroupDigits]]]])"+"\r\n"+"// NumDigitsAfterDecimal is the numeric value indicating how many places to the right of the decimal are displayed"+"\r\n"+"// -1 Use Default"+"\r\n"+"// The IncludeLeadingDigit, UseParensForNegativeNumbers, and GroupDigits arguments have the following settings:"+"\r\n"+"// -1 True"+"\r\n"+"// 0 False"+"\r\n"+"// -2 Use Default"+"\r\n"+"function ewr_FormatNumber($amount, $NumDigitsAfterDecimal = EWR_DEFAULT_DECIMAL_PRECISION, $IncludeLeadingDigit = -2, $UseParensForNegativeNumbers = -2, $GroupDigits = -2) {"+"\r\n"+""+"\r\n"+"	if (!is_numeric($amount))"+"\r\n"+"		return $amount;"+"\r\n"+""+"\r\n"+"	extract($GLOBALS[\"EWR_DEFAULT_LOCALE\"]);"+"\r\n"+""+"\r\n"+"	// Check $NumDigitsAfterDecimal"+"\r\n"+"	if ($NumDigitsAfterDecimal > -1)"+"\r\n"+"		$frac_digits = $NumDigitsAfterDecimal;"+"\r\n"+""+"\r\n"+"	// Check $UseParensForNegativeNumbers"+"\r\n"+"	if ($UseParensForNegativeNumbers == -1) {"+"\r\n"+"		$n_sign_posn = 0;"+"\r\n"+"		if ($p_sign_posn == 0) {"+"\r\n"+"			$p_sign_posn = 3;"+"\r\n"+"		}"+"\r\n"+"	} elseif ($UseParensForNegativeNumbers == 0) {"+"\r\n"+"		if ($n_sign_posn == 0)"+"\r\n"+"			$n_sign_posn = 3;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check $GroupDigits"+"\r\n"+"	if ($GroupDigits == -1) {"+"\r\n"+"	} elseif ($GroupDigits == 0) {"+"\r\n"+"		$mon_thousands_sep = \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Start by formatting the unsigned number"+"\r\n"+"	$number = number_format(abs($amount),"+"\r\n"+"						  $frac_digits,"+"\r\n"+"						  $mon_decimal_point,"+"\r\n"+"						  $mon_thousands_sep);"+"\r\n"+""+"\r\n"+"	// Check $IncludeLeadingDigit"+"\r\n"+"	if ($IncludeLeadingDigit == 0) {"+"\r\n"+"		if (substr($number, 0, 2) == \"0.\")"+"\r\n"+"			$number = substr($number, 1, strlen($number)-1);"+"\r\n"+"	}"+"\r\n"+"	if ($amount < 0) {"+"\r\n"+"		$sign = $negative_sign;"+"\r\n"+"		$key = $n_sign_posn;"+"\r\n"+"	} else {"+"\r\n"+"		$sign = $positive_sign;"+"\r\n"+"		$key = $p_sign_posn;"+"\r\n"+"	}"+"\r\n"+"	$formats = array("+"\r\n"+"		'0' => '(%s)',"+"\r\n"+"		'1' => $sign . '%s',"+"\r\n"+"		'2' => $sign . '%s',"+"\r\n"+"		'3' => $sign . '%s',"+"\r\n"+"		'4' => $sign . '%s');"+"\r\n"+""+"\r\n"+"	// Lookup the key in the above array"+"\r\n"+"	return sprintf($formats[$key], $number);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// FormatPercent"+"\r\n"+"// FormatPercent(Expression[,NumDigitsAfterDecimal [,IncludeLeadingDigit"+"\r\n"+"// 	[,UseParensForNegativeNumbers [,GroupDigits]]]])"+"\r\n"+"// NumDigitsAfterDecimal is the numeric value indicating how many places to the right of the decimal are displayed"+"\r\n"+"// -1 Use Default"+"\r\n"+"// The IncludeLeadingDigit, UseParensForNegativeNumbers, and GroupDigits arguments have the following settings:"+"\r\n"+"// -1 True"+"\r\n"+"// 0 False"+"\r\n"+"// -2 Use Default"+"\r\n"+"function ewr_FormatPercent($amount, $NumDigitsAfterDecimal, $IncludeLeadingDigit = -2, $UseParensForNegativeNumbers = -2, $GroupDigits = -2) {"+"\r\n"+""+"\r\n"+"	if (!is_numeric($amount))"+"\r\n"+"		return $amount;"+"\r\n"+""+"\r\n"+"	extract($GLOBALS[\"EWR_DEFAULT_LOCALE\"]);"+"\r\n"+""+"\r\n"+"	// Check $NumDigitsAfterDecimal"+"\r\n"+"	if ($NumDigitsAfterDecimal > -1)"+"\r\n"+"		$frac_digits = $NumDigitsAfterDecimal;"+"\r\n"+""+"\r\n"+"	// Check $UseParensForNegativeNumbers"+"\r\n"+"	if ($UseParensForNegativeNumbers == -1) {"+"\r\n"+"		$n_sign_posn = 0;"+"\r\n"+"		if ($p_sign_posn == 0) {"+"\r\n"+"			$p_sign_posn = 3;"+"\r\n"+"		}"+"\r\n"+"	} elseif ($UseParensForNegativeNumbers == 0) {"+"\r\n"+"		if ($n_sign_posn == 0)"+"\r\n"+"			$n_sign_posn = 3;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check $GroupDigits"+"\r\n"+"	if ($GroupDigits == -1) {"+"\r\n"+"	} elseif ($GroupDigits == 0) {"+"\r\n"+"		$mon_thousands_sep = \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Start by formatting the unsigned number"+"\r\n"+"	$number = number_format(abs($amount)*100,"+"\r\n"+"							$frac_digits,"+"\r\n"+"							$mon_decimal_point,"+"\r\n"+"							$mon_thousands_sep);"+"\r\n"+""+"\r\n"+"	// Check $IncludeLeadingDigit"+"\r\n"+"	if ($IncludeLeadingDigit == 0) {"+"\r\n"+"		if (substr($number, 0, 2) == \"0.\")"+"\r\n"+"			$number = substr($number, 1, strlen($number)-1);"+"\r\n"+"	}"+"\r\n"+"	if ($amount < 0) {"+"\r\n"+"		$sign = $negative_sign;"+"\r\n"+"		$key = $n_sign_posn;"+"\r\n"+"	} else {"+"\r\n"+"		$sign = $positive_sign;"+"\r\n"+"		$key = $p_sign_posn;"+"\r\n"+"	}"+"\r\n"+"	$formats = array("+"\r\n"+"		'0' => '(%s%%)',"+"\r\n"+"		'1' => $sign . '%s%%',"+"\r\n"+"		'2' => $sign . '%s%%',"+"\r\n"+"		'3' => $sign . '%s%%',"+"\r\n"+"		'4' => $sign . '%s%%');"+"\r\n"+""+"\r\n"+"	// Lookup the key in the above array"+"\r\n"+"	return sprintf($formats[$key], $number);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Add message"+"\r\n"+"function ewr_AddMessage(&$msg, $msgtoadd, $sep = \"<br>\") {"+"\r\n"+"	if (strval($msgtoadd) <> \"\") {"+"\r\n"+"		if (strval($msg) <> \"\")"+"\r\n"+"			$msg .= $sep;"+"\r\n"+"		$msg .= $msgtoadd;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Add filter"+"\r\n"+"function ewr_AddFilter(&$filter, $newfilter) {"+"\r\n"+"	if (trim($newfilter) == \"\") return;"+"\r\n"+"	if (trim($filter) <> \"\") {"+"\r\n"+"		$filter = \"(\" . $filter . \") AND (\" . $newfilter . \")\";"+"\r\n"+"	} else {"+"\r\n"+"		$filter = $newfilter;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Add slashes for SQL"+"\r\n"+"function ewr_AdjustSql($val) {"+"\r\n"+"";
ewAr[113] = ""+"\r\n"+"	$val = addslashes(trim($val));"+"\r\n"+"";
ewAr[114] = ""+"\r\n"+"	$val = trim($val);"+"\r\n"+"	$val = str_replace(\"'\", \"''\", $val); // Adjust for single quote"+"\r\n"+"";
ewAr[115] = ""+"\r\n"+"	return $val;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Build Report SQL"+"\r\n"+"function ewr_BuildReportSql($sSelect, $sWhere, $sGroupBy, $sHaving, $sOrderBy, $sFilter, $sSort) {"+"\r\n"+""+"\r\n"+"	$sDbWhere = $sWhere;"+"\r\n"+"	if ($sDbWhere <> \"\") $sDbWhere = \"(\" . $sDbWhere . \")\";"+"\r\n"+"	if ($sFilter <> \"\") {"+"\r\n"+"		if ($sDbWhere <> \"\") $sDbWhere .= \" AND \";"+"\r\n"+"		$sDbWhere .= \"(\" . $sFilter . \")\";"+"\r\n"+"	}"+"\r\n"+"	$sDbOrderBy = ewr_UpdateSortFields($sOrderBy, $sSort, 1);"+"\r\n"+"	$sSql = $sSelect;"+"\r\n"+"	if ($sDbWhere <> \"\") $sSql .= \" WHERE \" . $sDbWhere;"+"\r\n"+"	if ($sGroupBy <> \"\") $sSql .= \" GROUP BY \" . $sGroupBy;"+"\r\n"+"	if ($sHaving <> \"\") $sSql .= \" HAVING \" . $sHaving;"+"\r\n"+"	if ($sDbOrderBy <> \"\") $sSql .= \" ORDER BY \" . $sDbOrderBy;"+"\r\n"+""+"\r\n"+"	return $sSql;"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Update sort fields"+"\r\n"+"// - opt = 1, merge all sort fields"+"\r\n"+"// - opt = 2, merge sOrderBy fields only"+"\r\n"+"function ewr_UpdateSortFields($sOrderBy, $sSort, $opt) {"+"\r\n"+"	if ($sOrderBy == \"\") {"+"\r\n"+"		if ($opt == 1)"+"\r\n"+"			return $sSort;"+"\r\n"+"		else"+"\r\n"+"			return \"\";"+"\r\n"+"	} elseif ($sSort == \"\") {"+"\r\n"+"		return $sOrderBy;"+"\r\n"+"	} else {"+"\r\n"+"		// Merge sort field list"+"\r\n"+"		$arorderby = ewr_GetSortFlds($sOrderBy);"+"\r\n"+"		$cntorderby = count($arorderby);"+"\r\n"+"		$arsort = ewr_GetSortFlds($sSort);"+"\r\n"+"		$cntsort = count($arsort);"+"\r\n"+"		for ($i = 0; $i < $cntsort; $i++) {"+"\r\n"+"			// Get sort field"+"\r\n"+"			$sortfld = trim($arsort[$i]);"+"\r\n"+"			if (strtoupper(substr($sortfld,-4)) == \" ASC\") {"+"\r\n"+"				$sortfld = trim(substr($sortfld,0,-4));"+"\r\n"+"			} elseif (strtoupper(substr($sortfld,-5)) == \" DESC\") {"+"\r\n"+"				$sortfld = trim(substr($sortfld,0,-4));"+"\r\n"+"			}"+"\r\n"+"			for ($j = 0; $j < $cntorderby; $j++) {"+"\r\n"+"				// Get orderby field"+"\r\n"+"				$orderfld = trim($arorderby[$j]);"+"\r\n"+"				if (strtoupper(substr($orderfld,-4)) == \" ASC\") {"+"\r\n"+"					$orderfld = trim(substr($orderfld,0,-4));"+"\r\n"+"				} elseif (strtoupper(substr($orderfld,-5)) == \" DESC\") {"+"\r\n"+"					$orderfld = trim(substr($orderfld,0,-4));"+"\r\n"+"				}"+"\r\n"+"				// Replace field"+"\r\n"+"				if ($orderfld == $sortfld) {"+"\r\n"+"					$arorderby[$j] = $arsort[$i];"+"\r\n"+"					break;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			// Append field"+"\r\n"+"			if ($opt == 1) {"+"\r\n"+"				if ($orderfld <> $sortfld)"+"\r\n"+"					$arorderby[] = $arsort[$i];"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return implode(\", \", $arorderby);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get sort fields"+"\r\n"+"function ewr_GetSortFlds($flds) {"+"\r\n"+"	$offset = -1;"+"\r\n"+"	$fldpos = 0;"+"\r\n"+"	$ar = array();"+"\r\n"+"	while ($offset = strpos($flds, \",\", $offset + 1)) {"+"\r\n"+"		$orderfld = substr($flds,$fldpos,$offset-$fldpos);"+"\r\n"+"		if ((strtoupper(substr($orderfld,-4)) == \" ASC\") || (strtoupper(substr($orderfld,-5)) == \" DESC\")) {"+"\r\n"+"			$fldpos = $offset+1;"+"\r\n"+"			$ar[] = $orderfld;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	$ar[] = substr($flds,$fldpos);"+"\r\n"+"	return $ar;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get reverse sort"+"\r\n"+"function ewr_ReverseSort($sorttype) {"+"\r\n"+"	return ($sorttype == \"ASC\") ? \"DESC\" : \"ASC\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Construct a crosstab field name"+"\r\n"+"function ewr_CrossTabField($smrytype, $smryfld, $colfld, $datetype, $val, $qc, $alias=\"\") {"+"\r\n"+"	if ($val == EWR_NULL_VALUE) {"+"\r\n"+"		$wrkval = \"NULL\";"+"\r\n"+"		$wrkqc = \"\";"+"\r\n"+"	} elseif ($val == EWR_EMPTY_VALUE) {"+"\r\n"+"		$wrkval = \"\";"+"\r\n"+"		$wrkqc = $qc;"+"\r\n"+"	} else {"+"\r\n"+"		$wrkval = $val;"+"\r\n"+"		$wrkqc = $qc;"+"\r\n"+"	}"+"\r\n"+"	switch ($smrytype) {"+"\r\n"+"	case \"SUM\":"+"\r\n"+"		$fld = $smrytype . \"(\" . $smryfld . \"*\" . ewr_SQLDistinctFactor($colfld, $datetype, $val, $qc) . \")\";"+"\r\n"+"		break;"+"\r\n"+"	case \"COUNT\":"+"\r\n"+"		$fld = \"SUM(\" . ewr_SQLDistinctFactor($colfld, $datetype, $wrkval, $wrkqc) . \")\";"+"\r\n"+"		break;"+"\r\n"+"	case \"MIN\":"+"\r\n"+"	case \"MAX\":"+"\r\n"+"		$aggwrk = ewr_SQLDistinctFactor($colfld, $datetype, $wrkval, $wrkqc);"+"\r\n"+"		$fld = $smrytype . \"(IF(\" . $aggwrk . \"=0,NULL,\" . $smryfld . \"))\";"+"\r\n"+"		if (EWR_IS_MSACCESS)"+"\r\n"+"			$fld = $smrytype . \"(IIf(\" . $aggwrk . \"=0,NULL,\" . $smryfld . \"))\";"+"\r\n"+"		elseif (EWR_IS_MSSQL || EWR_IS_ORACLE)"+"\r\n"+"			$fld = $smrytype . \"(CASE \" . $aggwrk . \" WHEN 0 THEN NULL ELSE \" . $smryfld . \" END)\";"+"\r\n"+"		elseif (EWR_IS_MYSQL || EWR_IS_POSTGRESQL)"+"\r\n"+"			$fld = $smrytype . \"(IF(\" . $aggwrk . \"=0,NULL,\" . $smryfld . \"))\";"+"\r\n"+"		break;"+"\r\n"+"	case \"AVG\":"+"\r\n"+"		$sumwrk = \"SUM(\" . $smryfld . \"*\" . ewr_SQLDistinctFactor($colfld, $datetype, $wrkval, $wrkqc) . \")\";"+"\r\n"+"		if ($alias != \"\")"+"\r\n"+"//			$sumwrk .= \" AS SUM_\" . $alias;"+"\r\n"+"			$sumwrk .= \" AS \" . ewr_QuotedName(\"sum_\" . $alias);"+"\r\n"+"		$cntwrk =	\"SUM(\" . ewr_SQLDistinctFactor($colfld, $datetype, $wrkval, $wrkqc) . \")\";"+"\r\n"+"		if ($alias != \"\")"+"\r\n"+"//			$cntwrk .= \" AS CNT_\" . $alias;"+"\r\n"+"			$cntwrk .= \" AS \" . ewr_QuotedName(\"cnt_\" . $alias);"+"\r\n"+"		return $sumwrk . \", \" . $cntwrk;"+"\r\n"+"	}"+"\r\n"+"	if ($alias != \"\")"+"\r\n"+"		$fld .= \" AS \" . ewr_QuotedName($alias);"+"\r\n"+"	return $fld;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Construct SQL Distinct factor (MySQL)"+"\r\n"+"// - ACCESS"+"\r\n"+"//  y: IIf(Year(FieldName)=1996,1,0)"+"\r\n"+"//  q: IIf(DatePart(\"\"q\"\",FieldName,1,0)=1,1,0))"+"\r\n"+"//  m: (IIf(DatePart(\"\"m\"\",FieldName,1,0)=1,1,0)))"+"\r\n"+"//  others: (IIf(FieldName=val,1,0)))"+"\r\n"+"// - MS SQL"+"\r\n"+"//  y: (1-ABS(SIGN(Year(FieldName)-1996)))"+"\r\n"+"//  q: (1-ABS(SIGN(DatePart(q,FieldName)-1)))"+"\r\n"+"//  m: (1-ABS(SIGN(DatePart(m,FieldName)-1)))"+"\r\n"+"//  d: (CASE Convert(VarChar(10),FieldName,120) WHEN '1996-1-1' THEN 1 ELSE 0 END)"+"\r\n"+"// - MySQL"+"\r\n"+"//  y: IF(YEAR(FieldName)=1996,1,0))"+"\r\n"+"//  q: IF(QUARTER(FieldName)=1,1,0))"+"\r\n"+"//  m: IF(MONTH(FieldName)=1,1,0))"+"\r\n"+"// - PostgreSql"+"\r\n"+"//  y: IF(EXTRACT(YEAR FROM FieldName)=1996,1,0))"+"\r\n"+"//  q: IF(EXTRACT(QUARTER FROM FieldName)=1,1,0))"+"\r\n"+"//  m: IF(EXTRACT(MONTH FROM FieldName)=1,1,0))"+"\r\n"+"function ewr_SQLDistinctFactor($sFld, $dateType, $val, $qc) {"+"\r\n"+"	// ACCESS"+"\r\n"+"	if (EWR_IS_MSACCESS) {"+"\r\n"+"		if ($dateType == \"y\" && is_numeric($val)) {"+"\r\n"+"			return \"IIf(Year(\" . $sFld . \")=\" . $val . \",1,0)\";"+"\r\n"+"		} elseif (($dateType == \"q\" || $dateType == \"m\") && is_numeric($val)) {"+"\r\n"+"			return \"IIf(DatePart(\\\"\" . $dateType . \"\\\",\" . $sFld . \")=\" . $val . \",1,0)\";"+"\r\n"+"		} else {"+"\r\n"+"			if ($val == \"NULL\")"+"\r\n"+"				return \"IIf(\" . $sFld . \" IS NULL,1,0)\";"+"\r\n"+"			else"+"\r\n"+"				return \"IIf(\" . $sFld . \"=\" . $qc . ewr_AdjustSql($val) . $qc . \",1,0)\";"+"\r\n"+"		}"+"\r\n"+"	// MS SQL"+"\r\n"+"	} elseif (EWR_IS_MSSQL) {"+"\r\n"+"		if ($dateType == \"y\" && is_numeric($val)) {"+"\r\n"+"			return \"(1-ABS(SIGN(Year(\" . $sFld . \")-\" . $val . \")))\";"+"\r\n"+"		} elseif (($dateType == \"q\" || $dateType == \"m\") && is_numeric($val)) {"+"\r\n"+"			return \"(1-ABS(SIGN(DatePart(\" . $dateType . \",\" . $sFld . \")-\" . $val . \")))\";"+"\r\n"+"		} elseif ($dateType == \"d\") {"+"\r\n"+"			return \"(CASE CONVERT(VARCHAR(10),\" . $sFld . \",120) WHEN \" . $qc . ewr_AdjustSql($val) . $qc . \" THEN 1 ELSE 0 END)\";"+"\r\n"+"		} elseif ($dateType == \"dt\") {"+"\r\n"+"			return \"(CASE CONVERT(VARCHAR,\" . $sFld . \",120) WHEN \" . $qc . ewr_AdjustSql($val) . $qc . \" THEN 1 ELSE 0 END)\";"+"\r\n"+"		} else {"+"\r\n"+"			if ($val == \"NULL\")"+"\r\n"+"				return \"(CASE WHEN \" . $sFld . \" IS NULL THEN 1 ELSE 0 END)\";"+"\r\n"+"			else"+"\r\n"+"				return \"(CASE \" . $sFld . \" WHEN \" . $qc . ewr_AdjustSql($val) . $qc . \" THEN 1 ELSE 0 END)\";"+"\r\n"+"		}"+"\r\n"+"	// MySQL"+"\r\n"+"	} elseif (EWR_IS_MYSQL) {"+"\r\n"+"		if ($dateType == \"y\" && is_numeric($val)) {"+"\r\n"+"			return \"IF(YEAR(\" . $sFld . \")=\" . $val . \",1,0)\";"+"\r\n"+"		} elseif ($dateType == \"q\" && is_numeric($val)) {"+"\r\n"+"			return \"IF(QUARTER(\" . $sFld . \")=\" . $val . \",1,0)\";"+"\r\n"+"		} elseif ($dateType == \"m\" && is_numeric($val)) {"+"\r\n"+"			return \"IF(MONTH(\" . $sFld . \")=\" . $val . \",1,0)\";"+"\r\n"+"		} else {"+"\r\n"+"			if ($val == \"NULL\") {"+"\r\n"+"				return \"IF(\" . $sFld . \" IS NULL,1,0)\";"+"\r\n"+"			} else {"+"\r\n"+"				return \"IF(\" . $sFld . \"=\" . $qc . ewr_AdjustSql($val) . $qc . \",1,0)\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	// PostgreSql"+"\r\n"+"	} elseif (EWR_IS_POSTGRESQL) {"+"\r\n"+"		if ($dateType == \"y\" && is_numeric($val)) {"+"\r\n"+"			return \"CASE WHEN TO_CHAR(\" . $sFld . \",'YYYY')='\" . $val . \"' THEN 1 ELSE 0 END\";"+"\r\n"+"		} elseif ($dateType == \"q\" && is_numeric($val)) {"+"\r\n"+"			return \"CASE WHEN TO_CHAR(\" . $sFld . \",'Q')='\" . $val . \"' THEN 1 ELSE 0 END\";"+"\r\n"+"		} elseif ($dateType == \"m\" && is_numeric($val)) {"+"\r\n"+"			return \"CASE WHEN TO_CHAR(\" . $sFld . \",'MM')=LPAD('\" . $val . \"',2,'0') THEN 1 ELSE 0 END\";"+"\r\n"+"		} else {"+"\r\n"+"			if ($val == \"NULL\") {"+"\r\n"+"				return \"CASE WHEN \" . $sFld . \" IS NULL THEN 1 ELSE 0 END\";"+"\r\n"+"			} else {"+"\r\n"+"				return \"CASE WHEN \" . $sFld . \"=\" . $qc . ewr_AdjustSql($val) . $qc . \" THEN 1 ELSE 0 END\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	// Oracle"+"\r\n"+"	} elseif (EWR_IS_ORACLE || EWR_IS_POSTGRESQL) {"+"\r\n"+"		if ($dateType == \"y\" && is_numeric($val)) {"+"\r\n"+"			return \"DECODE(TO_CHAR(\" . $sFld . \",'YYYY'),'\" . $val . \"',1,0)\";"+"\r\n"+"		} elseif ($dateType == \"q\" && is_numeric($val)) {"+"\r\n"+"			return \"DECODE(TO_CHAR(\" . $sFld . \",'Q'),'\" . $val . \"',1,0)\";"+"\r\n"+"		} elseif ($dateType == \"m\" && is_numeric($val)) {"+"\r\n"+"			return \"DECODE(TO_CHAR(\" . $sFld . \",'MM'),LPAD('\" . $val . \"',2,'0'),1,0)\";"+"\r\n"+"		} elseif ($dateType == \"d\") {"+"\r\n"+"			return \"DECODE(\" . $sFld . \",TO_DATE(\" . $qc . ewr_AdjustSql($val) . $qc . \",'YYYY/MM/DD'),1,0)\";"+"\r\n"+"		} elseif ($dateType == \"dt\") {"+"\r\n"+"			return \"DECODE(\" . $sFld . \",TO_DATE(\" . $qc . ewr_AdjustSql($val) . $qc . \",'YYYY/MM/DD HH24:MI:SS'),1,0)\";"+"\r\n"+"		} else {"+"\r\n"+"			if ($val == \"NULL\") {"+"\r\n"+"				return \"(CASE WHEN \" . $sFld . \" IS NULL THEN 1 ELSE 0 END)\";"+"\r\n"+"			} else {"+"\r\n"+"				return \"DECODE(\" . $sFld . \",\" . $qc . ewr_AdjustSql($val) . $qc . \",1,0)\";"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Evaluate summary value"+"\r\n"+"function ewr_SummaryValue($val1, $val2, $ityp) {"+"\r\n"+"	switch ($ityp) {"+"\r\n"+"	case \"SUM\":"+"\r\n"+"	case \"COUNT\":"+"\r\n"+"	case \"AVG\":"+"\r\n"+"		if (is_null($val2) || !is_numeric($val2)) {"+"\r\n"+"			return $val1;"+"\r\n"+"		} else {"+"\r\n"+"			return ($val1 + $val2);"+"\r\n"+"		}"+"\r\n"+"	case \"MIN\":"+"\r\n"+"		if (is_null($val2) || !is_numeric($val2)) {"+"\r\n"+"			return $val1; // Skip null and non-numeric"+"\r\n"+"		} elseif (is_null($val1)) {"+"\r\n"+"			return $val2; // Initialize for first valid value"+"\r\n"+"		} elseif ($val1 < $val2) {"+"\r\n"+"			return $val1;"+"\r\n"+"		} else {"+"\r\n"+"			return $val2;"+"\r\n"+"		}"+"\r\n"+"	case \"MAX\":"+"\r\n"+"		if (is_null($val2) || !is_numeric($val2)) {"+"\r\n"+"			return $val1; // Skip null and non-numeric"+"\r\n"+"		} elseif (is_null($val1)) {"+"\r\n"+"			return $val2; // Initialize for first valid value"+"\r\n"+"		} elseif ($val1 > $val2) {"+"\r\n"+"			return $val1;"+"\r\n"+"		} else {"+"\r\n"+"			return $val2;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Match filter value"+"\r\n"+"function ewr_MatchedFilterValue($ar, $value) {"+"\r\n"+"	if (!is_array($ar)) {"+"\r\n"+"		return (strval($ar) == strval($value));"+"\r\n"+"	} else {"+"\r\n"+"		foreach ($ar as $val) {"+"\r\n"+"			if (strval($val) == strval($value))"+"\r\n"+"				return TRUE;"+"\r\n"+"		}"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Render repeat column table"+"\r\n"+"// - rowcnt - zero based row count"+"\r\n"+"function ewr_RepeatColumnTable($totcnt, $rowcnt, $repeatcnt, $rendertype) {"+"\r\n"+"	$sWrk = \"\";"+"\r\n"+"	if ($rendertype == 1) { // Render control start"+"\r\n"+"		if ($rowcnt == 0) $sWrk .= \"<table class=\\\"\" . EWR_ITEM_TABLE_CLASSNAME . \"\\\">\";"+"\r\n"+"		if ($rowcnt % $repeatcnt == 0) $sWrk .= \"<tr>\";"+"\r\n"+"		$sWrk .= \"<td>\";"+"\r\n"+"	} elseif ($rendertype == 2) { // Render control end"+"\r\n"+"		$sWrk .= \"</td>\";"+"\r\n"+"		if ($rowcnt % $repeatcnt == $repeatcnt - 1) {"+"\r\n"+"			$sWrk .= \"</tr>\";"+"\r\n"+"		} elseif ($rowcnt == $totcnt - 1) {"+"\r\n"+"			for ($i = ($rowcnt % $repeatcnt) + 1; $i < $repeatcnt; $i++) {"+"\r\n"+"				$sWrk .= \"<td>&nbsp;</td>\";"+"\r\n"+"			}"+"\r\n"+"			$sWrk .= \"</tr>\";"+"\r\n"+"		}"+"\r\n"+"		if ($rowcnt == $totcnt - 1) $sWrk .= \"</table>\";"+"\r\n"+"	}"+"\r\n"+"	return $sWrk;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if the value is selected"+"\r\n"+"function ewr_IsSelectedValue(&$ar, $value, $ft) {"+"\r\n"+"	if (!is_array($ar))"+"\r\n"+"		return TRUE;"+"\r\n"+"	$af = (substr($value, 0, 2) == \"@@\");"+"\r\n"+"	foreach ($ar as $val) {"+"\r\n"+"		if ($af || substr($val, 0, 2) == \"@@\") { // Advanced filters"+"\r\n"+"			if ($val == $value)"+"\r\n"+"				return TRUE;"+"\r\n"+"		} elseif ($value == EWR_NULL_VALUE && $value == $val) {"+"\r\n"+"				return TRUE;"+"\r\n"+"		} else {"+"\r\n"+"			if (ewr_CompareValue($val, $value, $ft))"+"\r\n"+"				return TRUE;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	return FALSE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if advanced filter value"+"\r\n"+"function ewr_IsAdvancedFilterValue($v) {"+"\r\n"+"	if (is_array($v) && count($v) > 0) {"+"\r\n"+"		foreach ($v as $val) {"+"\r\n"+"			if (substr($val,0,2) <> \"@@\")"+"\r\n"+"				return FALSE;"+"\r\n"+"		}"+"\r\n"+"		return TRUE;"+"\r\n"+"	} elseif (substr($v,0,2) == \"@@\") {"+"\r\n"+"		return TRUE;"+"\r\n"+"	}"+"\r\n"+"	return FALSE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Set up distinct values"+"\r\n"+"// - ar: array for distinct values"+"\r\n"+"// - val: value"+"\r\n"+"// - label: display value"+"\r\n"+"// - dup: check duplicate"+"\r\n"+"function ewr_SetupDistinctValues(&$ar, $val, $label, $dup, $dlm = \"\") {"+"\r\n"+"	$isarray = is_array($ar);"+"\r\n"+"	if ($dlm <> \"\") {"+"\r\n"+"		$arval = explode($dlm, $val);"+"\r\n"+"		$arlabel = explode($dlm, $label);"+"\r\n"+"		if (count($arval) <> count($arlabel)) {"+"\r\n"+"			$arval = array($val);"+"\r\n"+"			$arlabel = array($label);"+"\r\n"+"		}"+"\r\n"+"	} else {"+"\r\n"+"		$arval = array($val);"+"\r\n"+"		$arlabel = array($label);"+"\r\n"+"	}"+"\r\n"+"	$cntval = count($arval);"+"\r\n"+"	for ($i = 0; $i < $cntval; $i++) {"+"\r\n"+"		$v = $arval[$i];"+"\r\n"+"		$l = $arlabel[$i];"+"\r\n"+"		if ($dup && $isarray && in_array($v, array_keys($ar)))"+"\r\n"+"			continue;"+"\r\n"+"		if (!$isarray) {"+"\r\n"+"			$ar = array($v => $l);"+"\r\n"+"		} elseif ($v == EWR_EMPTY_VALUE || $v == EWR_NULL_VALUE) { // Null/Empty"+"\r\n"+"			$ar = array_reverse($ar, TRUE);"+"\r\n"+"			$ar[$v] = $l; // Insert at top"+"\r\n"+"			$ar = array_reverse($ar, TRUE);"+"\r\n"+"		} else {"+"\r\n"+"			$ar[$v] = $l; // Default insert at end"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Compare values based on field type"+"\r\n"+"function ewr_CompareValue($v1, $v2, $ft) {"+"\r\n"+"	switch ($ft) {"+"\r\n"+"	// Case adBigInt, adInteger, adSmallInt, adTinyInt, adUnsignedTinyInt, adUnsignedSmallInt, adUnsignedInt, adUnsignedBigInt"+"\r\n"+"	case 20:"+"\r\n"+"	case 3:"+"\r\n"+"	case 2:"+"\r\n"+"	case 16:"+"\r\n"+"	case 17:"+"\r\n"+"	case 18:"+"\r\n"+"	case 19:"+"\r\n"+"	case 21:"+"\r\n"+"		if (is_numeric($v1) && is_numeric($v2)) {"+"\r\n"+"			return (intval($v1) == intval($v2));"+"\r\n"+"		}"+"\r\n"+"		break;"+"\r\n"+"	// Case adSingle, adDouble, adNumeric, adCurrency"+"\r\n"+"	case 4:"+"\r\n"+"	case 5:"+"\r\n"+"	case 131:"+"\r\n"+"	case 6:"+"\r\n"+"		if (is_numeric($v1) && is_numeric($v2)) {"+"\r\n"+"			return ((float)$v1 == (float)$v2);"+"\r\n"+"		}"+"\r\n"+"		break;"+"\r\n"+"	//	Case adDate, adDBDate, adDBTime, adDBTimeStamp"+"\r\n"+"	case 7:"+"\r\n"+"	case 133:"+"\r\n"+"	case 134:"+"\r\n"+"	case 135:"+"\r\n"+"		if (is_numeric(strtotime($v1)) && is_numeric(strtotime($v2))) {"+"\r\n"+"			return (strtotime($v1) == strtotime($v2));"+"\r\n"+"		}"+"\r\n"+"		break;"+"\r\n"+"	default:"+"\r\n"+"		return (strcmp($v1, $v2) == 0); // Treat as string"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Register filter"+"\r\n"+"function ewr_RegisterFilter(&$fld, $ID, $Name, $FunctionName = \"\") {"+"\r\n"+"	if (!is_array($fld->AdvancedFilters))"+"\r\n"+"		$fld->AdvancedFilters = array();"+"\r\n"+"	$wrkid = (substr($ID,0,2) == \"@@\") ? $ID : \"@@\" . $ID;"+"\r\n"+"	$key = substr($wrkid,2);"+"\r\n"+"	$fld->AdvancedFilters[$key] = new crAdvancedFilter($wrkid, $Name, $FunctionName);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Unregister filter"+"\r\n"+"function ewr_UnregisterFilter(&$fld, $ID) {"+"\r\n"+"	if (is_array($fld->AdvancedFilters)) {"+"\r\n"+"		$wrkid = (substr($ID,0,2) == \"@@\") ? $ID : \"@@\" . $ID;"+"\r\n"+"		$key = substr($wrkid,2);"+"\r\n"+"		foreach ($fld->AdvancedFilters as $filter) {"+"\r\n"+"			if ($filter->ID == $wrkid) {"+"\r\n"+"				unset($fld->AdvancedFilters[$key]);"+"\r\n"+"				break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Return date value"+"\r\n"+"function ewr_DateVal($FldOpr, $FldVal, $ValType) {"+"\r\n"+""+"\r\n"+"	// Compose date string"+"\r\n"+"	switch (strtolower($FldOpr)) {"+"\r\n"+"	case \"year\":"+"\r\n"+"		if ($ValType == 1) {"+"\r\n"+"			$wrkVal = \"$FldVal-01-01\";"+"\r\n"+"		} elseif ($ValType == 2) {"+"\r\n"+"			$wrkVal = \"$FldVal-12-31\";"+"\r\n"+"		}"+"\r\n"+"		break;"+"\r\n"+"	case \"quarter\":"+"\r\n"+"		list($y, $q) = explode(\"|\", $FldVal);"+"\r\n"+"		if (intval($y) == 0 || intval($q) == 0) {"+"\r\n"+"			$wrkVal = \"0000-00-00\";"+"\r\n"+"		} else {"+"\r\n"+"			if ($ValType == 1) {"+"\r\n"+"				$m = ($q - 1) * 3 + 1;"+"\r\n"+"				$m = str_pad($m, 2, \"0\", STR_PAD_LEFT);"+"\r\n"+"				$wrkVal = \"$y-$m-01\";"+"\r\n"+"			} elseif ($ValType == 2) {"+"\r\n"+"				$m = ($q - 1) * 3 + 3;"+"\r\n"+"				$m = str_pad($m, 2, \"0\", STR_PAD_LEFT);"+"\r\n"+"				$wrkVal = \"$y-$m-\" . ewr_DaysInMonth($y, $m);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		break;"+"\r\n"+"	case \"month\":"+"\r\n"+"		list($y, $m) = explode(\"|\", $FldVal);"+"\r\n"+"		if (intval($y) == 0 || intval($m) == 0) {"+"\r\n"+"			$wrkVal = \"0000-00-00\";"+"\r\n"+"		} else {"+"\r\n"+"			if ($ValType == 1) {"+"\r\n"+"				$m = str_pad($m, 2, \"0\", STR_PAD_LEFT);"+"\r\n"+"				$wrkVal = \"$y-$m-01\";"+"\r\n"+"			} elseif ($ValType == 2) {"+"\r\n"+"				$m = str_pad($m, 2, \"0\", STR_PAD_LEFT);"+"\r\n"+"				$wrkVal = \"$y-$m-\" . ewr_DaysInMonth($y, $m);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		break;"+"\r\n"+"	case \"day\":"+"\r\n"+"		$wrkVal = str_replace(\"|\", \"-\", $FldVal);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add time if necessary"+"\r\n"+"	if (preg_match('/(\\d{4}|\\d{2})-(\\d{1,2})-(\\d{1,2})/', $wrkVal)) { // Date without time"+"\r\n"+"		if ($ValType == 1) {"+"\r\n"+"			$wrkVal .= \" 00:00:00\";"+"\r\n"+"		} elseif ($ValType == 2) {"+"\r\n"+"			$wrkVal .= \" 23:59:59\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Check if datetime"+"\r\n"+"	if (preg_match('/(\\d{4}|\\d{2})-(\\d{1,2})-(\\d{1,2}) (\\d{1,2}):(\\d{1,2}):(\\d{1,2})/', $wrkVal)) { // DateTime"+"\r\n"+"		$DateVal = $wrkVal;"+"\r\n"+"	} else {"+"\r\n"+"		$DateVal = \"\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	return $DateVal;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Past\""+"\r\n"+"function ewr_IsPast($FldExpression) {"+"\r\n"+"	return (\"($FldExpression < '\" . date(\"Y-m-d H:i:s\") . \"')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Future\";"+"\r\n"+"function ewr_IsFuture($FldExpression) {"+"\r\n"+"	return (\"($FldExpression > '\" . date(\"Y-m-d H:i:s\") . \"')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Last 30 days\""+"\r\n"+"function ewr_IsLast30Days($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y-m-d\", strtotime(\"-29 days\"));"+"\r\n"+"	$dt2 = date(\"Y-m-d\", strtotime(\"+1 days\"));"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Last 14 days\""+"\r\n"+"function ewr_IsLast14Days($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y-m-d\", strtotime(\"-13 days\"));"+"\r\n"+"	$dt2 = date(\"Y-m-d\", strtotime(\"+1 days\"));"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Last 7 days\""+"\r\n"+"function ewr_IsLast7Days($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y-m-d\", strtotime(\"-6 days\"));"+"\r\n"+"	$dt2 = date(\"Y-m-d\", strtotime(\"+1 days\"));"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Next 30 days\""+"\r\n"+"function ewr_IsNext30Days($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y-m-d\");"+"\r\n"+"	$dt2 = date(\"Y-m-d\", strtotime(\"+30 days\"));"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Next 14 days\""+"\r\n"+"function ewr_IsNext14Days($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y-m-d\");"+"\r\n"+"	$dt2 = date(\"Y-m-d\", strtotime(\"+14 days\"));"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Next 7 days\""+"\r\n"+"function ewr_IsNext7Days($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y-m-d\");"+"\r\n"+"	$dt2 = date(\"Y-m-d\", strtotime(\"+7 days\"));"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Yesterday\""+"\r\n"+"function ewr_IsYesterday($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y-m-d\", strtotime(\"-1 days\"));"+"\r\n"+"	$dt2 = date(\"Y-m-d\");"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Today\""+"\r\n"+"function ewr_IsToday($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y-m-d\");"+"\r\n"+"	$dt2 = date(\"Y-m-d\", strtotime(\"+1 days\"));"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Tomorrow\""+"\r\n"+"function ewr_IsTomorrow($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y-m-d\", strtotime(\"+1 days\"));"+"\r\n"+"	$dt2 = date(\"Y-m-d\", strtotime(\"+2 days\"));"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Last month\""+"\r\n"+"function ewr_IsLastMonth($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y-m\", strtotime(\"-1 months\")) . \"-01\";"+"\r\n"+"	$dt2 = date(\"Y-m\") . \"-01\";"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"This month\""+"\r\n"+"function ewr_IsThisMonth($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y-m\") . \"-01\";"+"\r\n"+"	$dt2 = date(\"Y-m\", strtotime(\"+1 months\")) . \"-01\";"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Next month\""+"\r\n"+"function ewr_IsNextMonth($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y-m\", strtotime(\"+1 months\")) . \"-01\";"+"\r\n"+"	$dt2 = date(\"Y-m\", strtotime(\"+2 months\")) . \"-01\";"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Last two weeks\""+"\r\n"+"function ewr_IsLast2Weeks($FldExpression) {"+"\r\n"+"	if (strtotime(\"this Sunday\") == strtotime(\"today\")) {"+"\r\n"+"		$dt1 = date(\"Y-m-d\", strtotime(\"-14 days this Sunday\"));"+"\r\n"+"		$dt2 = date(\"Y-m-d\", strtotime(\"this Sunday\"));"+"\r\n"+"	} else {"+"\r\n"+"		$dt1 = date(\"Y-m-d\", strtotime(\"-14 days last Sunday\"));"+"\r\n"+"		$dt2 = date(\"Y-m-d\", strtotime(\"last Sunday\"));"+"\r\n"+"	}"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Last week\""+"\r\n"+"function ewr_IsLastWeek($FldExpression) {"+"\r\n"+"	if (strtotime(\"this Sunday\") == strtotime(\"today\")) {"+"\r\n"+"		$dt1 = date(\"Y-m-d\", strtotime(\"-7 days this Sunday\"));"+"\r\n"+"		$dt2 = date(\"Y-m-d\", strtotime(\"this Sunday\"));"+"\r\n"+"	} else {"+"\r\n"+"		$dt1 = date(\"Y-m-d\", strtotime(\"-7 days last Sunday\"));"+"\r\n"+"		$dt2 = date(\"Y-m-d\", strtotime(\"last Sunday\"));"+"\r\n"+"	}"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"This week\""+"\r\n"+"function ewr_IsThisWeek($FldExpression) {"+"\r\n"+"	if (strtotime(\"this Sunday\") == strtotime(\"today\")) {"+"\r\n"+"		$dt1 = date(\"Y-m-d\", strtotime(\"this Sunday\"));"+"\r\n"+"		$dt2 = date(\"Y-m-d\", strtotime(\"+7 days this Sunday\"));"+"\r\n"+"	} else {"+"\r\n"+"		$dt1 = date(\"Y-m-d\", strtotime(\"last Sunday\"));"+"\r\n"+"		$dt2 = date(\"Y-m-d\", strtotime(\"+7 days last Sunday\"));"+"\r\n"+"	}"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Next week\""+"\r\n"+"function ewr_IsNextWeek($FldExpression) {"+"\r\n"+"	if (strtotime(\"this Sunday\") == strtotime(\"today\")) {"+"\r\n"+"		$dt1 = date(\"Y-m-d\", strtotime(\"+7 days this Sunday\"));"+"\r\n"+"		$dt2 = date(\"Y-m-d\", strtotime(\"+14 days this Sunday\"));"+"\r\n"+"	} else {"+"\r\n"+"		$dt1 = date(\"Y-m-d\", strtotime(\"+7 days last Sunday\"));"+"\r\n"+"		$dt2 = date(\"Y-m-d\", strtotime(\"+14 days last Sunday\"));"+"\r\n"+"	}"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Next two week\""+"\r\n"+"function ewr_IsNext2Weeks($FldExpression) {"+"\r\n"+"	if (strtotime(\"this Sunday\") == strtotime(\"today\")) {"+"\r\n"+"		$dt1 = date(\"Y-m-d\", strtotime(\"+7 days this Sunday\"));"+"\r\n"+"		$dt2 = date(\"Y-m-d\", strtotime(\"+21 days this Sunday\"));"+"\r\n"+"	} else {"+"\r\n"+"		$dt1 = date(\"Y-m-d\", strtotime(\"+7 days last Sunday\"));"+"\r\n"+"		$dt2 = date(\"Y-m-d\", strtotime(\"+21 days last Sunday\"));"+"\r\n"+"	}"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Last year\""+"\r\n"+"function ewr_IsLastYear($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y\", strtotime(\"-1 years\")) . \"-01-01\";"+"\r\n"+"	$dt2 = date(\"Y\") . \"-01-01\";"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"This year\""+"\r\n"+"function ewr_IsThisYear($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y\") . \"-01-01\";"+"\r\n"+"	$dt2 = date(\"Y\", strtotime(\"+1 years\")) . \"-01-01\";"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Next year\""+"\r\n"+"function ewr_IsNextYear($FldExpression) {"+"\r\n"+"	$dt1 = date(\"Y\", strtotime(\"+1 years\")) . \"-01-01\";"+"\r\n"+"	$dt2 = date(\"Y\", strtotime(\"+2 years\")) . \"-01-01\";"+"\r\n"+"	return (\"($FldExpression >= '$dt1' AND $FldExpression < '$dt2')\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// \"Next year\""+"\r\n"+"function ewr_DaysInMonth($y, $m) {"+"\r\n"+"	if (in_array($m, array(1, 3, 5, 7, 8, 10, 12))) {"+"\r\n"+"		return 31;"+"\r\n"+"	} elseif (in_array($m, array(4, 6, 9, 11))) {"+"\r\n"+"		return 30;"+"\r\n"+"	} elseif ($m == 2) {"+"\r\n"+"		return ($y % 4 == 0) ? 29 : 28;"+"\r\n"+"	}"+"\r\n"+"	return 0;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Function to calculate date difference"+"\r\n"+"function ewr_DateDiff($dateTimeBegin, $dateTimeEnd, $interval = \"d\") {"+"\r\n"+""+"\r\n"+"	$dateTimeBegin = strtotime($dateTimeBegin);"+"\r\n"+"	if ($dateTimeBegin === -1 || $dateTimeBegin === FALSE)"+"\r\n"+"		return FALSE;"+"\r\n"+"	"+"\r\n"+"	$dateTimeEnd = strtotime($dateTimeEnd);"+"\r\n"+"	if($dateTimeEnd === -1 || $dateTimeEnd === FALSE)"+"\r\n"+"		return FALSE;"+"\r\n"+"	"+"\r\n"+"	$dif = $dateTimeEnd - $dateTimeBegin;	"+"\r\n"+"	$arBegin = getdate($dateTimeBegin);"+"\r\n"+"	$dateBegin = mktime(0, 0, 0, $arBegin[\"mon\"], $arBegin[\"mday\"], $arBegin[\"year\"]);"+"\r\n"+"	$arEnd = getdate($dateTimeEnd);"+"\r\n"+"	$dateEnd = mktime(0, 0, 0, $arEnd[\"mon\"], $arEnd[\"mday\"], $arEnd[\"year\"]);"+"\r\n"+"	$difDate = $dateEnd - $dateBegin;"+"\r\n"+"	"+"\r\n"+"	switch ($interval) {"+"\r\n"+"		case \"s\": // Seconds"+"\r\n"+"			return $dif;"+"\r\n"+"		case \"n\": // Minutes"+"\r\n"+"			return ($dif > 0) ? floor($dif/60) : ceil($dif/60);"+"\r\n"+"		case \"h\": // Hours"+"\r\n"+"			return ($dif > 0) ? floor($dif/3600) : ceil($dif/3600);"+"\r\n"+"		case \"d\": // Days"+"\r\n"+"			return ($difDate > 0) ? floor($difDate/86400) : ceil($difDate/86400);"+"\r\n"+"		case \"w\": // Weeks"+"\r\n"+"			return ($difDate > 0) ? floor($difDate/604800) : ceil($difDate/604800);"+"\r\n"+"		case \"ww\": // Calendar Weeks"+"\r\n"+"			$difWeek = (($dateEnd - $arEnd[\"wday\"]*86400) - ($dateBegin - $arBegin[\"wday\"]*86400))/604800;"+"\r\n"+"			return ($difWeek > 0) ? floor($difWeek) : ceil($difWeek);"+"\r\n"+"		case \"m\": // Months"+"\r\n"+"			return (($arEnd[\"year\"]*12 + $arEnd[\"mon\"]) -	($arBegin[\"year\"]*12 + $arBegin[\"mon\"]));"+"\r\n"+"		case \"yyyy\": // Years"+"\r\n"+"			return ($arEnd[\"year\"] - $arBegin[\"year\"]);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Set up distinct values from ext. filter"+"\r\n"+"function ewr_SetupDistinctValuesFromFilter(&$ar, $af) {"+"\r\n"+"	if (is_array($af)) {"+"\r\n"+"		foreach ($af as $filter) {"+"\r\n"+"			if ($filter->Enabled)"+"\r\n"+"				ewr_SetupDistinctValues($ar, $filter->ID, $filter->Name, FALSE);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get group value"+"\r\n"+"// - Get the group value based on field type, group type and interval"+"\r\n"+"// - ft: field type"+"\r\n"+"// * 1: numeric, 2: date, 3: string"+"\r\n"+"// - gt: group type"+"\r\n"+"// * numeric: i = interval, n = normal"+"\r\n"+"// * date: d = Day, w = Week, m = Month, q = Quarter, y = Year"+"\r\n"+"// * string: f = first nth character, n = normal"+"\r\n"+"// - intv: interval"+"\r\n"+"function ewr_GroupValue(&$fld, $val) {"+"\r\n"+"	$ft = $fld->FldType;"+"\r\n"+"	$grp = $fld->FldGroupByType;"+"\r\n"+"	$intv = $fld->FldGroupInt;"+"\r\n"+"	switch ($ft) {"+"\r\n"+"	// Case adBigInt, adInteger, adSmallInt, adTinyInt, adSingle, adDouble, adNumeric, adCurrency, adUnsignedTinyInt, adUnsignedSmallInt, adUnsignedInt, adUnsignedBigInt (numeric)"+"\r\n"+"	case 20:"+"\r\n"+"	case 3:"+"\r\n"+"	case 2:"+"\r\n"+"	case 16:"+"\r\n"+"	case 4:"+"\r\n"+"	case 5:"+"\r\n"+"	case 131:"+"\r\n"+"	case 6:"+"\r\n"+"	case 17:"+"\r\n"+"	case 18:"+"\r\n"+"	case 19:"+"\r\n"+"	case 21:"+"\r\n"+"		if (!is_numeric($val)) return $val;	"+"\r\n"+"		$wrkIntv = intval($intv);"+"\r\n"+"		if ($wrkIntv <= 0) $wrkIntv = 10;"+"\r\n"+"		switch ($grp) {"+"\r\n"+"			case \"i\":"+"\r\n"+"				return intval($val/$wrkIntv);"+"\r\n"+"			default:"+"\r\n"+"				return $val;"+"\r\n"+"		}"+"\r\n"+"	// Case adDate, adDBDate, adDBTime, adDBTimeStamp (date)"+"\r\n"+"//	case 7:"+"\r\n"+"//	case 133:"+"\r\n"+"//	case 134:"+"\r\n"+"//	case 135:"+"\r\n"+"	// Case adLongVarChar, adLongVarWChar, adChar, adWChar, adVarChar, adVarWChar (string)"+"\r\n"+"	case 201: // String"+"\r\n"+"	case 203:"+"\r\n"+"	case 129:"+"\r\n"+"	case 130:"+"\r\n"+"	case 200:"+"\r\n"+"	case 202:"+"\r\n"+"		$wrkIntv = intval($intv);"+"\r\n"+"		if ($wrkIntv <= 0) $wrkIntv = 1;"+"\r\n"+"		switch ($grp) {"+"\r\n"+"			case \"f\":"+"\r\n"+"				return substr($val, 0, $wrkIntv);"+"\r\n"+"			default:"+"\r\n"+"				return $val;"+"\r\n"+"		}"+"\r\n"+"	default:"+"\r\n"+"		return $val; // Ignore"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Display group value"+"\r\n"+"function ewr_DisplayGroupValue(&$fld, $val) {"+"\r\n"+"	global $ReportLanguage;"+"\r\n"+"	$ft = $fld->FldType;"+"\r\n"+"	$grp = $fld->FldGroupByType;"+"\r\n"+"	$intv = $fld->FldGroupInt;"+"\r\n"+"	if (is_null($val)) return $ReportLanguage->Phrase(\"NullLabel\");"+"\r\n"+"	if ($val == \"\") return $ReportLanguage->Phrase(\"EmptyLabel\");"+"\r\n"+"	switch ($ft) {"+"\r\n"+"	// Case adBigInt, adInteger, adSmallInt, adTinyInt, adSingle, adDouble, adNumeric, adCurrency, adUnsignedTinyInt, adUnsignedSmallInt, adUnsignedInt, adUnsignedBigInt (numeric)"+"\r\n"+"	case 20:"+"\r\n"+"	case 3:"+"\r\n"+"	case 2:"+"\r\n"+"	case 16:"+"\r\n"+"	case 4:"+"\r\n"+"	case 5:"+"\r\n"+"	case 131:"+"\r\n"+"	case 6:"+"\r\n"+"	case 17:"+"\r\n"+"	case 18:"+"\r\n"+"	case 19:"+"\r\n"+"	case 21:"+"\r\n"+"		$wrkIntv = intval($intv);"+"\r\n"+"		if ($wrkIntv <= 0) $wrkIntv = 10;"+"\r\n"+"		switch ($grp) {"+"\r\n"+"			case \"i\":"+"\r\n"+"				return strval($val*$wrkIntv) . \" - \" . strval(($val+1)*$wrkIntv-1);"+"\r\n"+"			default:"+"\r\n"+"				return $val;"+"\r\n"+"		}"+"\r\n"+"		break;"+"\r\n"+"	// Case adDate, adDBDate, adDBTime, adDBTimeStamp (date)"+"\r\n"+"	case 7:"+"\r\n"+"	case 133:"+"\r\n"+"	case 134:"+"\r\n"+"	case 135:"+"\r\n"+"		$ar = explode(\"|\", $val);"+"\r\n"+"		switch ($grp) {"+"\r\n"+"			Case \"y\":"+"\r\n"+"				return $ar[0];"+"\r\n"+"			Case \"q\":"+"\r\n"+"				if (count($ar) < 2) return $val;"+"\r\n"+"				return ewr_FormatQuarter($ar[0], $ar[1]);"+"\r\n"+"			Case \"m\":"+"\r\n"+"				if (count($ar) < 2) return $val;"+"\r\n"+"				return ewr_FormatMonth($ar[0], $ar[1]);"+"\r\n"+"			Case \"w\":"+"\r\n"+"				if (count($ar) < 2) return $val;"+"\r\n"+"				return ewr_FormatWeek($ar[0], $ar[1]);"+"\r\n"+"			Case \"d\":"+"\r\n"+"				if (count($ar) < 3) return $val;"+"\r\n"+"				return ewr_FormatDay($ar[0], $ar[1], $ar[2]);"+"\r\n"+"			Case \"h\":"+"\r\n"+"				return ewr_FormatHour($ar[0]);"+"\r\n"+"			Case \"min\":"+"\r\n"+"				return ewr_FormatMinute($ar[0]);"+"\r\n"+"			default:"+"\r\n"+"				return $val;"+"\r\n"+"		}"+"\r\n"+"		break;"+"\r\n"+"	default: // String and others"+"\r\n"+"		return $val; // Ignore"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"function ewr_FormatQuarter($y, $q) {"+"\r\n"+"	return \"Q\" . $q . \"/\" . $y;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"function ewr_FormatMonth($y, $m) {"+"\r\n"+"	return $m . \"/\" . $y;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"function ewr_FormatWeek($y, $w) {"+"\r\n"+"	return \"WK\" . $w . \"/\" . $y;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"function ewr_FormatDay($y, $m, $d) {"+"\r\n"+"	return $y . \"-\" . $m . \"-\" . $d;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"function ewr_FormatHour($h) {"+"\r\n"+"	if (intval($h) == 0) {"+"\r\n"+"		return \"12 AM\";"+"\r\n"+"	} elseif (intval($h) < 12) {"+"\r\n"+"		return $h . \" AM\";"+"\r\n"+"	} elseif (intval($h) == 12) {"+"\r\n"+"		return \"12 PM\";"+"\r\n"+"	} else {"+"\r\n"+"		return ($h-12) . \" PM\";"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"function ewr_FormatMinute($n) {"+"\r\n"+"	return $n . \" MIN\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get JavaScript db in the form of:"+"\r\n"+"// [{k:\"key1\",v:\"value1\",s:selected1}, {k:\"key2\",v:\"value2\",s:selected2}, ...]"+"\r\n"+"function ewr_GetJsDb(&$fld, $ft) {"+"\r\n"+"	$jsdb = \"\";"+"\r\n"+"	$arv = $fld->ValueList;"+"\r\n"+"	$ars = $fld->SelectionList;"+"\r\n"+"	if (is_array($arv)) {"+"\r\n"+"		foreach ($arv as $key => $value) {"+"\r\n"+"			$jsselect = (ewr_IsSelectedValue($ars, $key, $ft)) ? \"true\" : \"false\";"+"\r\n"+"			if ($jsdb <> \"\") $jsdb .= \",\";"+"\r\n"+"			$jsdb .= \"{\\\"k\\\":\\\"\" . ewr_EscapeJs($key) . \"\\\",\\\"v\\\":\\\"\" . ewr_EscapeJs($value) . \"\\\",\\\"s\\\":$jsselect}\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	$jsdb = \"[\" . $jsdb . \"]\";"+"\r\n"+"	return $jsdb;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Return detail filter SQL"+"\r\n"+"function ewr_DetailFilterSQL(&$fld, $fn, $val) {"+"\r\n"+"	$ft = $fld->FldDataType;"+"\r\n"+"	if ($fld->FldGroupSql <> \"\") $ft = EWR_DATATYPE_STRING;"+"\r\n"+"	$sqlwrk = $fn;"+"\r\n"+"	if (is_null($val)) {"+"\r\n"+"		$sqlwrk .= \" IS NULL\";"+"\r\n"+"	} else {"+"\r\n"+"		$sqlwrk .= \" = \" . ewr_QuotedValue($val, $ft);"+"\r\n"+"	}"+"\r\n"+"	return $sqlwrk;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Return popup filter SQL"+"\r\n"+"function ewr_FilterSQL(&$fld, $fn, $ft) {"+"\r\n"+"	$ar = $fld->SelectionList;"+"\r\n"+"	$af = $fld->AdvancedFilters;"+"\r\n"+"	$gt = $fld->FldGroupByType;"+"\r\n"+"	$gi = $fld->FldGroupInt;"+"\r\n"+"	$sql = $fld->FldGroupSql;"+"\r\n"+"	$dlm = $fld->FldDelimiter;"+"\r\n"+"	if (!is_array($ar)) {"+"\r\n"+"		return TRUE;"+"\r\n"+"	} else {"+"\r\n"+"		$sqlwrk = \"\";"+"\r\n"+"		$i = 0;"+"\r\n"+"		foreach ($ar as $value) {"+"\r\n"+"			if ($value == EWR_EMPTY_VALUE) { // Empty string"+"\r\n"+"				$sqlwrk .= \"$fn = '' OR \";"+"\r\n"+"			} elseif ($value == EWR_NULL_VALUE) { // Null value"+"\r\n"+"				$sqlwrk .= \"$fn IS NULL OR \";"+"\r\n"+"			} elseif (substr($value, 0, 2) == \"@@\") { // Advanced filter"+"\r\n"+"				if (is_array($af)) {"+"\r\n"+"					$afsql = ewr_AdvancedFilterSQL($af, $fn, $value); // Process popup filter"+"\r\n"+"					if (!is_null($afsql))"+"\r\n"+"						$sqlwrk .= $afsql . \" OR \";"+"\r\n"+"				}"+"\r\n"+"			} elseif ($sql <> \"\") {"+"\r\n"+"				$sqlwrk .= str_replace(\"%s\", $fn, $sql) . \" = '\" . $value . \"' OR \";"+"\r\n"+"			} elseif ($dlm <> \"\") {"+"\r\n"+"				$sql = ewr_GetMultiSearchSql($fn, trim($value));"+"\r\n"+"				if ($sql <> \"\")"+"\r\n"+"					$sqlwrk .= $sql . \" OR \";"+"\r\n"+"			} else {"+"\r\n"+"				$sqlwrk .= \"$fn IN (\" . ewr_JoinArray($ar, \", \", $ft, $i) . \") OR \";"+"\r\n"+"				break;"+"\r\n"+"			}"+"\r\n"+"			$i++;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	if ($sqlwrk != \"\")"+"\r\n"+"		$sqlwrk = \"(\" . substr($sqlwrk, 0, -4) . \")\";"+"\r\n"+"	return $sqlwrk;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Return multi-value search SQL"+"\r\n"+"function ewr_GetMultiSearchSql($fn, $val) {"+"\r\n"+"	if ($val == EWR_INIT_VALUE || $val == EWR_ALL_VALUE) {"+"\r\n"+"		$sSql = \"\";"+"\r\n"+"	} elseif (EWR_IS_MYSQL) {"+"\r\n"+"		$sSql = \"FIND_IN_SET('\" . ewr_AdjustSql($val) . \"', \" . $fn . \")\";"+"\r\n"+"	} else {"+"\r\n"+"		$sSql = $fn . \" = '\" . ewr_AdjustSql($val) . \"' OR \" . ewr_GetMultiSearchSqlPart($fn, $val);"+"\r\n"+"	}"+"\r\n"+"	return $sSql;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get multi search SQL part"+"\r\n"+"function ewr_GetMultiSearchSqlPart($fn, $val) {"+"\r\n"+"	global $EWR_CSV_DELIMITER;"+"\r\n"+"	return $fn . ewr_Like(\"'\" . ewr_AdjustSql($val) . $EWR_CSV_DELIMITER . \"%'\") . \" OR \" ."+"\r\n"+"		$fn . ewr_Like(\"'%\" . $EWR_CSV_DELIMITER . ewr_AdjustSql($val) . $EWR_CSV_DELIMITER . \"%'\") . \" OR \" ."+"\r\n"+"		$fn . ewr_Like(\"'%\" . $EWR_CSV_DELIMITER . ewr_AdjustSql($val) . \"'\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Return Advanced Filter SQL"+"\r\n"+"function ewr_AdvancedFilterSQL(&$af, $fn, $val) {"+"\r\n"+"	if (!is_array($af)) {"+"\r\n"+"		return NULL;"+"\r\n"+"	} elseif (is_null($val)) {"+"\r\n"+"		return NULL;"+"\r\n"+"	} else {"+"\r\n"+"		foreach ($af as $filter) {"+"\r\n"+"			if (strval($val) == strval($filter->ID) && $filter->Enabled) {"+"\r\n"+"				$func = $filter->FunctionName;"+"\r\n"+"				return $func($fn);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return NULL;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Truncate Memo Field based on specified length, string truncated to nearest space or CrLf"+"\r\n"+"function ewr_TruncateMemo($memostr, $ln, $removehtml) {"+"\r\n"+"	$str = ($removehtml) ? ewr_RemoveHtml($memostr) : $memostr;"+"\r\n"+"	if (strlen($str) > 0 && strlen($str) > $ln) {"+"\r\n"+"		$k = 0;"+"\r\n"+"		while ($k >= 0 && $k < strlen($str)) {"+"\r\n"+"			$i = strpos($str, \" \", $k);"+"\r\n"+"			$j = strpos($str, chr(10), $k);"+"\r\n"+"			if ($i === FALSE && $j === FALSE) { // Not able to truncate"+"\r\n"+"				return $str;"+"\r\n"+"			} else {"+"\r\n"+"				// Get nearest space or CrLf"+"\r\n"+"				if ($i > 0 && $j > 0) {"+"\r\n"+"					if ($i < $j) {"+"\r\n"+"						$k = $i;"+"\r\n"+"					} else {"+"\r\n"+"						$k = $j;"+"\r\n"+"					}"+"\r\n"+"				} elseif ($i > 0) {"+"\r\n"+"					$k = $i;"+"\r\n"+"				} elseif ($j > 0) {"+"\r\n"+"					$k = $j;"+"\r\n"+"				}"+"\r\n"+"				// Get truncated text"+"\r\n"+"				if ($k >= $ln) {"+"\r\n"+"					return substr($str, 0, $k) . \"...\";"+"\r\n"+"				} else {"+"\r\n"+"					$k++;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	} else {"+"\r\n"+"		return $str;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Remove HTML tags from text"+"\r\n"+"function ewr_RemoveHtml($str) {"+"\r\n"+"	return preg_replace('/<[^>]*>/', '', strval($str));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Escape string for JavaScript"+"\r\n"+"function ewr_EscapeJs($str) {"+"\r\n"+"	$str = strval($str);"+"\r\n"+"	$str = str_replace(\"\\\\\", \"\\\\\\\\\", $str);"+"\r\n"+"	$str = str_replace(\"\\\"\", \"\\\\\\\"\", $str);"+"\r\n"+"    $str = str_replace(\"\\t\", \"\\\\t\", $str);"+"\r\n"+"	$str = str_replace(\"\\r\", \"\\\\r\", $str);"+"\r\n"+"	$str = str_replace(\"\\n\", \"\\\\n\", $str);"+"\r\n"+"	return $str;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Load Chart Series"+"\r\n"+"function ewr_LoadChartSeries($sSql, &$cht) {"+"\r\n"+"	global $conn;"+"\r\n"+"	$rscht = $conn->Execute($sSql);"+"\r\n"+"	$sdt = $cht->SeriesDateType;"+"\r\n"+"	while ($rscht && !$rscht->EOF) {"+"\r\n"+"		$cht->Series[] = ewr_ChartSeriesValue($rscht->fields[0], $sdt); // Series value"+"\r\n"+"		$rscht->MoveNext();"+"\r\n"+"	}"+"\r\n"+"	if ($rscht) $rscht->Close();"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Load Chart Data"+"\r\n"+"function ewr_LoadChartData($sSql, &$cht) {"+"\r\n"+"	global $conn;"+"\r\n"+"	$rscht = $conn->Execute($sSql);"+"\r\n"+"	while ($rscht && !$rscht->EOF) {"+"\r\n"+"		$temp = array();"+"\r\n"+"		for ($i = 0; $i < $rscht->FieldCount(); $i++)"+"\r\n"+"			$temp[$i] = $rscht->fields[$i];"+"\r\n"+"		$cht->Data[] = $temp;"+"\r\n"+"		$rscht->MoveNext();"+"\r\n"+"	}"+"\r\n"+"	if ($rscht) $rscht->Close();"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get Chart X value"+"\r\n"+"function ewr_ChartXValue($val, $dt) {"+"\r\n"+"	if (is_numeric($dt)) {"+"\r\n"+"		return ewr_FormatDateTime($val, $dt);"+"\r\n"+"	} elseif ($dt == \"y\") {"+"\r\n"+"		return $val;"+"\r\n"+"	} elseif ($dt == \"xyq\") {"+"\r\n"+"		$ar = explode(\"|\", $val);"+"\r\n"+"		if (count($ar) >= 2)"+"\r\n"+"			return $ar[0] . \" \" . ewr_QuarterName($ar[1]);"+"\r\n"+"		else"+"\r\n"+"			return $val;"+"\r\n"+"	} elseif ($dt == \"xym\") {"+"\r\n"+"		$ar = explode(\"|\", $val);"+"\r\n"+"		if (count($ar) >= 2)"+"\r\n"+"			return $ar[0] . \" \" . ewr_MonthName($ar[1]);"+"\r\n"+"		else"+"\r\n"+"			return $val;"+"\r\n"+"	} elseif ($dt == \"xq\") {"+"\r\n"+"		return ewr_QuarterName($val);"+"\r\n"+"	}"+"\r\n"+"	elseif ($dt == \"xm\") {"+"\r\n"+"		return ewr_MonthName($val);"+"\r\n"+"	} else {"+"\r\n"+"		if (is_string($val))"+"\r\n"+"			return trim($val);"+"\r\n"+"		else"+"\r\n"+"			return $val;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get Chart X SQL"+"\r\n"+"function ewr_ChartXSQL($fldsql, $fldtype, $val, $dt) {"+"\r\n"+"	if (is_numeric($dt)) {"+"\r\n"+"		return $fldsql . \" = \" . ewr_QuotedValue(ewr_UnFormatDateTime($val, $dt), $fldtype);"+"\r\n"+"	} elseif ($dt == \"y\") {"+"\r\n"+"		if (is_numeric($val))"+"\r\n"+"			return str_replace(\"%s\", $fldsql, EWR_YEAR_SQL) . \" = \" . ewr_QuotedValue($val, EWR_DATATYPE_NUMBER);"+"\r\n"+"		else"+"\r\n"+"			return $fldsql . \" = \" . ewr_QuotedValue($val, $fldtype);"+"\r\n"+"	} elseif ($dt == \"xyq\") {"+"\r\n"+"		$ar = explode(\"|\", $val);"+"\r\n"+"		if (count($ar) >= 2 && is_numeric($ar[0]) && is_numeric($ar[1]))"+"\r\n"+"			return str_replace(\"%s\", $fldsql, EWR_YEAR_SQL) . \" = \" . ewr_QuotedValue($ar[0], EWR_DATATYPE_NUMBER) . \" AND \" . str_replace(\"%s\", $fldsql, EWR_QUARTER_SQL) . \" = \" . ewr_QuotedValue($ar[1], EWR_DATATYPE_NUMBER);"+"\r\n"+"		else"+"\r\n"+"			return $fldsql . \" = \" . ewr_QuotedValue($val, $fldtype);"+"\r\n"+"	} elseif ($dt == \"xym\") {"+"\r\n"+"		$ar = explode(\"|\", $val);"+"\r\n"+"		if (count($ar) >= 2 && is_numeric($ar[0]) && is_numeric($ar[1]))"+"\r\n"+"			return str_replace(\"%s\", $fldsql, EWR_YEAR_SQL) . \" = \" . ewr_QuotedValue($ar[0], EWR_DATATYPE_NUMBER) . \" AND \" . str_replace(\"%s\", $fldsql, EWR_MONTH_SQL) . \" = \" . ewr_QuotedValue($ar[1], EWR_DATATYPE_NUMBER);"+"\r\n"+"		else"+"\r\n"+"			return $fldsql . \" = \" . ewr_QuotedValue($val, $fldtype);"+"\r\n"+"	} elseif ($dt == \"xq\") {"+"\r\n"+"		return str_replace(\"%s\", $fldsql, EWR_QUARTER_SQL) . \" = \" . ewr_QuotedValue($val, EWR_DATATYPE_NUMBER);"+"\r\n"+"	} elseif ($dt == \"xm\") {"+"\r\n"+"		return str_replace(\"%s\", $fldsql, EWR_MONTH_SQL) . \" = \" . ewr_QuotedValue($val, EWR_DATATYPE_NUMBER);"+"\r\n"+"	} else {"+"\r\n"+"		return $fldsql . \" = \" . ewr_QuotedValue($val, $fldtype);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get Chart Series value"+"\r\n"+"function ewr_ChartSeriesValue($val, $dt) {"+"\r\n"+"	if ($dt == \"syq\") {"+"\r\n"+"		$ar = explode(\"|\", $val);"+"\r\n"+"		if (count($ar) >= 2)"+"\r\n"+"			return $ar[0] . \" \" . ewr_QuarterName($ar[1]);"+"\r\n"+"		else"+"\r\n"+"			return $val;"+"\r\n"+"	} elseif ($dt == \"sym\") {"+"\r\n"+"		$ar = explode(\"|\", $val);"+"\r\n"+"		if (count($ar) >= 2)"+"\r\n"+"			return $ar[0] . \" \" . ewr_MonthName($ar[1]);"+"\r\n"+"		else"+"\r\n"+"			return $val;"+"\r\n"+"	} elseif ($dt == \"sq\") {"+"\r\n"+"		return ewr_QuarterName($val);"+"\r\n"+"	} elseif ($dt == \"sm\") {"+"\r\n"+"		return ewr_MonthName($val);"+"\r\n"+"	} else {"+"\r\n"+"		if (is_string($val))"+"\r\n"+"			return trim($val);"+"\r\n"+"		else"+"\r\n"+"			return $val;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get Chart Series SQL"+"\r\n"+"function ewr_ChartSeriesSQL($fldsql, $fldtype, $val, $dt) {"+"\r\n"+"	if ($dt == \"syq\") {"+"\r\n"+"		$ar = explode(\"|\", $val);"+"\r\n"+"		if (count($ar) >= 2 && is_numeric($ar[0]) && is_numeric($ar[1]))"+"\r\n"+"			return str_replace(\"%s\", $fldsql, EWR_YEAR_SQL) . \" = \" . ewr_QuotedValue($ar[0], EWR_DATATYPE_NUMBER) . \" AND \" . str_replace(\"%s\", $fldsql, EWR_QUARTER_SQL) . \" = \" . ewr_QuotedValue($ar[1], EWR_DATATYPE_NUMBER);"+"\r\n"+"		else"+"\r\n"+"			return $fldsql . \" = \" . ewr_QuotedValue($val, $fldtype);"+"\r\n"+"	} elseif ($dt == \"sym\") {"+"\r\n"+"		$ar = explode(\"|\", $val);"+"\r\n"+"		if (count($ar) >= 2 && is_numeric($ar[0]) && is_numeric($ar[1]))"+"\r\n"+"			return str_replace(\"%s\", $fldsql, EWR_YEAR_SQL) . \" = \" . ewr_QuotedValue($ar[0], EWR_DATATYPE_NUMBER) . \" AND \" . str_replace(\"%s\", $fldsql, EWR_MONTH_SQL) . \" = \" . ewr_QuotedValue($ar[1], EWR_DATATYPE_NUMBER);"+"\r\n"+"		else"+"\r\n"+"			return $fldsql . \" = \" . ewr_QuotedValue($val, $fldtype);"+"\r\n"+"	} elseif ($dt == \"sq\") {"+"\r\n"+"		return str_replace(\"%s\", $fldsql, EWR_QUARTER_SQL) . \" = \" . ewr_QuotedValue($val, EWR_DATATYPE_NUMBER);"+"\r\n"+"	} elseif ($dt == \"sm\") {"+"\r\n"+"		return str_replace(\"%s\", $fldsql, EWR_MONTH_SQL) . \" = \" . ewr_QuotedValue($val, EWR_DATATYPE_NUMBER);"+"\r\n"+"	} else {"+"\r\n"+"		return $fldsql . \" = \" . ewr_QuotedValue($val, $fldtype);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Sort chart data"+"\r\n"+"function ewr_SortChartData(&$ar, $opt, $seq=\"\") {"+"\r\n"+"	if ((($opt < 3 || $opt > 4) && $seq == \"\") || (($opt < 1 || $opt > 4) && $seq <> \"\"))"+"\r\n"+"		return;"+"\r\n"+"	if (is_array($ar)) {"+"\r\n"+"		$cntar = count($ar);"+"\r\n"+"		for ($i = 0; $i < $cntar; $i++) {"+"\r\n"+"			for ($j = $i+1; $j < $cntar; $j++) {"+"\r\n"+"				switch ($opt) {"+"\r\n"+"					case 1: // X values ascending"+"\r\n"+"						$bSwap = ewr_CompareValueCustom($ar[$i][0], $ar[$j][0], $seq);"+"\r\n"+"						break;"+"\r\n"+"					case 2: // X values descending"+"\r\n"+"						$bSwap = ewr_CompareValueCustom($ar[$j][0], $ar[$i][0], $seq);"+"\r\n"+"						break;"+"\r\n"+"					case 3: // Y values ascending"+"\r\n"+"						$bSwap = ewr_CompareValueCustom($ar[$i][2], $ar[$j][2], $seq);"+"\r\n"+"						break;"+"\r\n"+"					case 4: // Y values descending"+"\r\n"+"						$bSwap = ewr_CompareValueCustom($ar[$j][2], $ar[$i][2], $seq);"+"\r\n"+"				}"+"\r\n"+"				if ($bSwap) {"+"\r\n"+"					$tmpar = $ar[$i];"+"\r\n"+"					$ar[$i] = $ar[$j];"+"\r\n"+"					$ar[$j] = $tmpar;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Sort chart multi series data"+"\r\n"+"function ewr_SortMultiChartData(&$ar, $opt, $seq=\"\") {"+"\r\n"+"	if (!is_array($ar) || (($opt < 3 || $opt > 4) && $seq == \"\") || (($opt < 1 || $opt > 4) && $seq <> \"\"))"+"\r\n"+"		return;"+"\r\n"+""+"\r\n"+"	// Obtain a list of columns"+"\r\n"+"	foreach ($ar as $key => $row) {"+"\r\n"+"		$xvalues[$key] = $row[0];"+"\r\n"+"		$series[$key] = $row[1];"+"\r\n"+"		$yvalues[$key] = $row[2];"+"\r\n"+"		$ysums[$key] = $row[0]; // Store the x-value for the time being"+"\r\n"+"		if (isset($xsums[$row[0]])) {"+"\r\n"+"			$xsums[$row[0]] += $row[2];"+"\r\n"+"		} else {"+"\r\n"+"			$xsums[$row[0]] = $row[2];"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Set up Y sum"+"\r\n"+"	if ($opt == 3 || $opt == 4) {"+"\r\n"+"		$cnt = count($ysums);"+"\r\n"+"		for ($i=0; $i<$cnt; $i++)"+"\r\n"+"			$ysums[$i] = $xsums[$ysums[$i]];"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// No specific sequence, use array_multisort"+"\r\n"+"	if ($seq == \"\") {"+"\r\n"+""+"\r\n"+"		switch ($opt) {"+"\r\n"+"			case 1: // X values ascending"+"\r\n"+"				array_multisort($xvalues, SORT_ASC, $ar);"+"\r\n"+"				break;"+"\r\n"+"			case 2: // X values descending"+"\r\n"+"				array_multisort($xvalues, SORT_DESC, $ar);"+"\r\n"+"				break;"+"\r\n"+"			case 3:"+"\r\n"+"			case 4: // Y values"+"\r\n"+"				if ($opt == 3) { // Ascending"+"\r\n"+"					array_multisort($ysums, SORT_ASC, $ar);"+"\r\n"+"				} elseif ($opt == 4) { // Descending"+"\r\n"+"					array_multisort($ysums, SORT_DESC, $ar);"+"\r\n"+"				}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	// Handle specific sequence"+"\r\n"+"	} else {"+"\r\n"+""+"\r\n"+"		// Build key list"+"\r\n"+"		if ($opt == 1 || $opt == 2)"+"\r\n"+"			$vals = array_unique($xvalues);"+"\r\n"+"		else"+"\r\n"+"			$vals = array_unique($ysums);"+"\r\n"+""+"\r\n"+"		foreach ($vals as $key => $val) {"+"\r\n"+"			$keys[] = array($key, $val);"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Sort key list based on specific sequence"+"\r\n"+"		$cntkey = count($keys);"+"\r\n"+"		for ($i = 0; $i < $cntkey; $i++) {"+"\r\n"+"			for ($j = $i+1; $j < $cntkey; $j++) {"+"\r\n"+"				switch ($opt) {"+"\r\n"+"					// Ascending"+"\r\n"+"					case 1:"+"\r\n"+"					case 3:"+"\r\n"+"						$bSwap = ewr_CompareValueCustom($keys[$i][1], $keys[$j][1], $seq);"+"\r\n"+"						break;"+"\r\n"+"					// Descending"+"\r\n"+"					case 2:"+"\r\n"+"					case 4:"+"\r\n"+"						$bSwap = ewr_CompareValueCustom($keys[$j][1], $keys[$i][1], $seq);"+"\r\n"+"						break;"+"\r\n"+"				}"+"\r\n"+"				if ($bSwap) {"+"\r\n"+"					$tmpkey = $keys[$i];"+"\r\n"+"					$keys[$i] = $keys[$j];"+"\r\n"+"					$keys[$j] = $tmpkey;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		for ($i = 0; $i < $cntkey; $i++) {"+"\r\n"+"			$xsorted[] = $xvalues[$keys[$i][0]];"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"		// Sort array based on x sequence"+"\r\n"+"		$arwrk = $ar;"+"\r\n"+"		$rowcnt = 0;"+"\r\n"+"		$cntx = intval(count($xsorted));"+"\r\n"+"		for ($i = 0; $i < $cntx; $i++) {"+"\r\n"+"			foreach ($arwrk as $key => $row) {"+"\r\n"+"				if ($row[0] == $xsorted[$i]) {"+"\r\n"+"					$ar[$rowcnt] = $row;"+"\r\n"+"					$rowcnt++;"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Compare values by custom sequence"+"\r\n"+"function ewr_CompareValueCustom($v1, $v2, $seq) {"+"\r\n"+"	if ($seq == \"_number\") { // Number"+"\r\n"+"		if (is_numeric($v1) && is_numeric($v2)) {"+"\r\n"+"			return ((float)$v1 > (float)$v2);"+"\r\n"+"		}"+"\r\n"+"	} else if ($seq == \"_date\") { // Date"+"\r\n"+"		if (is_numeric(strtotime($v1)) && is_numeric(strtotime($v2))) {"+"\r\n"+"			return (strtotime($v1) > strtotime($v2));"+"\r\n"+"		}"+"\r\n"+"	} else if ($seq <> \"\") { // Custom sequence"+"\r\n"+"		if (is_array($seq))"+"\r\n"+"			$ar = $seq;"+"\r\n"+"		else"+"\r\n"+"			$ar = explode(\",\", $seq);"+"\r\n"+"		if (in_array($v1, $ar) && in_array($v2, $ar))"+"\r\n"+"			return (array_search($v1, $ar) > array_search($v2, $ar));"+"\r\n"+"		else"+"\r\n"+"			return in_array($v2, $ar);"+"\r\n"+"	}"+"\r\n"+"	return ($v1 > $v2);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Load array from sql"+"\r\n"+"function ewr_LoadArrayFromSql($sql, &$ar) {"+"\r\n"+"	global $conn;"+"\r\n"+"	if (strval($sql) == \"\")"+"\r\n"+"		return;"+"\r\n"+"	$rswrk = $conn->Execute($sql);"+"\r\n"+"	if ($rswrk) {"+"\r\n"+"		while (!$rswrk->EOF) {"+"\r\n"+"			$v = $rswrk->fields[0];"+"\r\n"+"			if (is_null($v)) {"+"\r\n"+"				$v = EWR_NULL_VALUE;"+"\r\n"+"			} elseif ($v == \"\") {"+"\r\n"+"				$v = EWR_EMPTY_VALUE;"+"\r\n"+"			}"+"\r\n"+"			if (!is_array($ar))"+"\r\n"+"				$ar = array();"+"\r\n"+"			$ar[] = $v;"+"\r\n"+"			$rswrk->MoveNext();"+"\r\n"+"		}"+"\r\n"+"		$rswrk->Close();"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Function to Match array"+"\r\n"+"function ewr_MatchedArray(&$ar1, &$ar2) {"+"\r\n"+"	if (!is_array($ar1) && !is_array($ar2)) {"+"\r\n"+"		return TRUE;"+"\r\n"+"	} elseif (is_array($ar1) && is_array($ar2)) {"+"\r\n"+"		return (count(array_diff($ar1, $ar2)) == 0);"+"\r\n"+"	}"+"\r\n"+"	return FALSE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Write a value to file for debug"+"\r\n"+"function ewr_Trace($msg) {"+"\r\n"+"	$filename = \"debug.txt\";"+"\r\n"+"	if (!$handle = fopen($filename, 'a')) exit;"+"\r\n"+"	if (is_writable($filename)) fwrite($handle, $msg . \"\\n\");"+"\r\n"+"	fclose($handle);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Connection/Query error handler"+"\r\n"+"function ewr_ErrorFn($DbType, $ErrorType, $ErrorNo, $ErrorMsg, $Param1, $Param2, $Object) {"+"\r\n"+"	if ($ErrorType == 'CONNECT') {"+"\r\n"+"		";
ewAr[116] = ""+"\r\n"+"		$msg = \"Failed to connect to database. Error: \" . $ErrorMsg;"+"\r\n"+"		";
ewAr[117] = ""+"\r\n"+"		$msg = \"Failed to connect to $Param2 at $Param1. Error: \" . $ErrorMsg;"+"\r\n"+"		";
ewAr[118] = ""+"\r\n"+"	} elseif ($ErrorType == 'EXECUTE') {"+"\r\n"+"		if (EWR_DEBUG_ENABLED) {"+"\r\n"+"			$msg = \"Failed to execute SQL: $Param1. Error: \" . $ErrorMsg;"+"\r\n"+"		} else {"+"\r\n"+"			$msg = \"Failed to execute SQL. Error: \" . $ErrorMsg;"+"\r\n"+"		}"+"\r\n"+"	} "+"\r\n"+"	ewr_AddMessage($_SESSION[EWR_SESSION_FAILURE_MESSAGE], $msg);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Write HTTP header"+"\r\n"+"function ewr_Header($cache, $charset = EWR_CHARSET) {"+"\r\n"+"	header(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\"); // Date in the past"+"\r\n"+"	header(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\"); // Always modified"+"\r\n"+"	$export = @$_GET[\"export\"];"+"\r\n"+"	if ($cache || !$cache && ewr_IsHttps() && $export <> \"\" && $export <> \"print\") { // Allow cache"+"\r\n"+"		header(\"Cache-Control: private, must-revalidate\"); // HTTP/1.1"+"\r\n"+"	} else { // No cache"+"\r\n"+"		header(\"Cache-Control: private, no-store, no-cache, must-revalidate\"); // HTTP/1.1"+"\r\n"+"		header(\"Cache-Control: post-check=0, pre-check=0\", false);"+"\r\n"+"		header(\"Pragma: no-cache\"); // HTTP/1.0"+"\r\n"+"	}"+"\r\n"+"	if ($charset <> \"\")"+"\r\n"+"		header(\"Content-Type: text/html; charset=\" . $charset); // Charset"+"\r\n"+"	header(\"X-UA-Compatible: IE=edge\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get content file extension"+"\r\n"+"function ewr_ContentExt($data) {"+"\r\n"+"	$ct = ewr_ContentType(substr($data, 0, 11));"+"\r\n"+"	switch ($ct) {"+"\r\n"+"	case \"image/gif\": return \".gif\"; // Return gif"+"\r\n"+"	case \"image/jpeg\": return \".jpg\"; // Return jpg"+"\r\n"+"	case \"image/png\": return \".png\"; // Return png"+"\r\n"+"	case \"image/bmp\": return \".bmp\"; // Return bmp"+"\r\n"+"	case \"application/pdf\": return \".pdf\"; // Return pdf"+"\r\n"+"	default: return \"\"; // Unknown extension"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get content type"+"\r\n"+"function ewr_ContentType($data, $fn = \"\") {"+"\r\n"+"	if (substr($data, 0, 6) == \"\\x47\\x49\\x46\\x38\\x37\\x61\" || substr($data, 0, 6) == \"\\x47\\x49\\x46\\x38\\x39\\x61\") { // Check if gif"+"\r\n"+"		return \"image/gif\";"+"\r\n"+"	//} elseif (substr($data, 0, 4) == \"\\xFF\\xD8\\xFF\\xE0\" && substr($data, 6, 5) == \"\\x4A\\x46\\x49\\x46\\x00\") { // Check if jpg"+"\r\n"+"	} elseif (substr($data, 0, 2) == \"\\xFF\\xD8\") { // Check if jpg (SOI marker \\xFF\\xD8)"+"\r\n"+"		return \"image/jpeg\";"+"\r\n"+"	} elseif (substr($data, 0, 8) == \"\\x89\\x50\\x4E\\x47\\x0D\\x0A\\x1A\\x0A\") { // Check if png"+"\r\n"+"		return \"image/png\";"+"\r\n"+"	} elseif (substr($data, 0, 2) == \"\\x42\\x4D\") { // Check if bmp"+"\r\n"+"		return \"image/bmp\";"+"\r\n"+"	} elseif (substr($data, 0, 4) == \"\\x25\\x50\\x44\\x46\") { // Check if pdf"+"\r\n"+"		return \"application/pdf\";"+"\r\n"+"	} elseif ($fn <> \"\") { // Use file extension to get mime type"+"\r\n"+"		$extension = strtolower(substr(strrchr($fn, \".\"), 1));"+"\r\n"+"		$ct = @$EWR_MIME_TYPES[$extension];"+"\r\n"+"		if ($ct == \"\") {"+"\r\n"+"			if (file_exists($fn) && function_exists(\"finfo_file\")) {"+"\r\n"+"				$finfo = finfo_open(FILEINFO_MIME_TYPE);"+"\r\n"+"				$ct = finfo_file($finfo, $fn);"+"\r\n"+"				finfo_close($finfo);"+"\r\n"+"			} elseif (function_exists(\"mime_content_type\")) {"+"\r\n"+"        		$ct = mime_content_type($fn);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return $ct;"+"\r\n"+"	} else {"+"\r\n"+"		return \"images\";"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Connect to database"+"\r\n"+"function &ewr_Connect($info = NULL) {"+"\r\n"+"	$GLOBALS[\"ADODB_FETCH_MODE\"] = ADODB_FETCH_BOTH;"+"\r\n"+"	";
ewAr[119] = ""+"\r\n"+"		";
ewAr[120] = ""+"\r\n"+"	$conn = ADONewConnection('mysqlt');"+"\r\n"+"		";
ewAr[121] = ""+"\r\n"+"	$conn = new mysqlt_driver_ADOConnection();"+"\r\n"+"		";
ewAr[122] = ""+"\r\n"+"	";
ewAr[123] = ""+"\r\n"+"	$conn = ADONewConnection('postgres7');"+"\r\n"+"	";
ewAr[124] = ""+"\r\n"+"	$GLOBALS[\"ADODB_COUNTRECS\"] = FALSE;"+"\r\n"+"	$conn = ADONewConnection('ado_mssql');"+"\r\n"+"	";
ewAr[125] = ""+"\r\n"+"	$GLOBALS[\"ADODB_COUNTRECS\"] = FALSE;"+"\r\n"+"	$conn = ADONewConnection('ado_access');"+"\r\n"+"	";
ewAr[126] = ""+"\r\n"+"	$conn = ADONewConnection('oci8');"+"\r\n"+"	$conn->NLS_DATE_FORMAT = 'RRRR-MM-DD HH24:MI:SS';"+"\r\n"+"	";
ewAr[127] = ""+"\r\n"+"	$conn->debug = EWR_DEBUG_ENABLED;"+"\r\n"+"	$conn->debug_echo = FALSE;"+"\r\n"+""+"\r\n"+"	if (!$info) {"+"\r\n"+"	";
ewAr[128] = ""+"\r\n"+"		$info = array(\"host\" => EWR_CONN_HOST, \"port\" => EWR_CONN_PORT,"+"\r\n"+"			\"user\" => EWR_CONN_USER, \"pass\" => EWR_CONN_PASS, \"db\" => EWR_CONN_DB);"+"\r\n"+"		";
ewAr[129] = ""+"\r\n"+"			";
ewAr[130] = ""+"\r\n"+"		$info[\"charset\"] = \"";
ewAr[131] = "\";"+"\r\n"+"			";
ewAr[132] = ""+"\r\n"+"		$info[\"charset\"] = $conn->charSet;"+"\r\n"+"			";
ewAr[133] = ""+"\r\n"+"		$info[\"schema\"] = EWR_CONN_SCHEMA;"+"\r\n"+"		";
ewAr[134] = ""+"\r\n"+"	";
ewAr[135] = ""+"\r\n"+"		$info = ";
ewAr[136] = "; // ADO connection string"+"\r\n"+"	";
ewAr[137] = ""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"";
ewAr[138] = ""+"\r\n"+"	// Database connecting event"+"\r\n"+"	Database_Connecting($info);"+"\r\n"+"";
ewAr[139] = ""+"\r\n"+""+"\r\n"+"	";
ewAr[140] = ""+"\r\n"+"	$conn->port = intval($info[\"port\"]);"+"\r\n"+"	";
ewAr[141] = ""+"\r\n"+"	";
ewAr[142] = ""+"\r\n"+"	$conn->charSet = $info[\"charset\"];"+"\r\n"+"	";
ewAr[143] = ""+"\r\n"+"	$conn->raiseErrorFn = $GLOBALS[\"EWR_ERROR_FN\"];"+"\r\n"+"	";
ewAr[144] = ""+"\r\n"+"	$conn->Connect($info[\"host\"], $info[\"user\"], $info[\"pass\"], $info[\"db\"]);"+"\r\n"+"	";
ewAr[145] = ""+"\r\n"+"	";
ewAr[146] = ""+"\r\n"+"	if (EWR_MYSQL_CHARSET <> \"\")"+"\r\n"+"		$conn->Execute(\"SET NAMES '\" . EWR_MYSQL_CHARSET . \"'\");"+"\r\n"+"	";
ewAr[147] = ""+"\r\n"+"	";
ewAr[148] = ""+"\r\n"+"	if (EWR_CODEPAGE > 0)"+"\r\n"+"		$conn->charPage = EWR_CODEPAGE;"+"\r\n"+"	$conn->Connect($info, FALSE, FALSE);"+"\r\n"+"	";
ewAr[149] = ""+"\r\n"+"	";
ewAr[150] = ""+"\r\n"+"	// Set date format"+"\r\n"+"	if (EWR_DEFAULT_DATE_FORMAT <> \"\")"+"\r\n"+"		$conn->Execute(\"SET DATEFORMAT ymd\");"+"\r\n"+"	";
ewAr[151] = ""+"\r\n"+"	";
ewAr[152] = ""+"\r\n"+"	// Set schema"+"\r\n"+"	$conn->Execute(\"ALTER SESSION SET CURRENT_SCHEMA = \". ewr_QuotedName($info[\"schema\"]));"+"\r\n"+"	$conn->Execute(\"ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'yyyy-mm-dd hh24:mi:ss'\");"+"\r\n"+"	$conn->Execute(\"ALTER SESSION SET NLS_TIMESTAMP_TZ_FORMAT = 'yyyy-mm-dd hh24:mi:ss'\");"+"\r\n"+"		";
ewAr[153] = ""+"\r\n"+"	$conn->Execute(\"ALTER SESSION SET NLS_COMP = ";
ewAr[154] = "\");"+"\r\n"+"		";
ewAr[155] = ""+"\r\n"+"		";
ewAr[156] = ""+"\r\n"+"	$conn->Execute(\"ALTER SESSION SET NLS_SORT = ";
ewAr[157] = "\");"+"\r\n"+"		";
ewAr[158] = ""+"\r\n"+"	";
ewAr[159] = ""+"\r\n"+"	";
ewAr[160] = ""+"\r\n"+"	// Set schema"+"\r\n"+"	if (EWR_CONN_SCHEMA <> \"public\")"+"\r\n"+"		$conn->Execute(\"SET search_path TO \" . EWR_CONN_SCHEMA);"+"\r\n"+"	// Set bytea_output"+"\r\n"+"	$ver = explode(\".\", $conn->version[\"version\"]);"+"\r\n"+"	if (intval($ver[0]) >= 9) // PostgreSQL 9"+"\r\n"+"		$conn->Execute(\"SET bytea_output = 'escape'\");"+"\r\n"+"	";
ewAr[161] = ""+"\r\n"+"	$conn->raiseErrorFn = '';"+"\r\n"+""+"\r\n"+"";
ewAr[162] = ""+"\r\n"+"	// Database connected event"+"\r\n"+"	Database_Connected($conn);"+"\r\n"+"";
ewAr[163] = ""+"\r\n"+""+"\r\n"+"	return $conn;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"";
ewAr[164] = ""+"\r\n"+"";
ewAr[165] = ""+"\r\n"+""+"\r\n"+"// Check if boolean value is TRUE"+"\r\n"+"function ewr_ConvertToBool($value) {"+"\r\n"+"	return ($value === TRUE || strval($value) == \"1\" ||"+"\r\n"+"		strtolower(strval($value)) == \"y\" || strtolower(strval($value)) == \"t\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if HTTP POST"+"\r\n"+"function ewr_IsHttpPost() {"+"\r\n"+"	$ct = ewr_ServerVar(\"CONTENT_TYPE\");"+"\r\n"+"	if (empty($ct)) $ct = ewr_ServerVar(\"HTTP_CONTENT_TYPE\");"+"\r\n"+"	return strpos($ct, \"application/x-www-form-urlencoded\") !== FALSE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Strip slashes"+"\r\n"+"function ewr_StripSlashes($value) {"+"\r\n"+"	if (!get_magic_quotes_gpc()) return $value;"+"\r\n"+"	if (is_array($value)) { "+"\r\n"+"		return array_map('ewr_StripSlashes', $value);"+"\r\n"+"	} else {"+"\r\n"+"		return stripslashes($value);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Prepend CSS class name"+"\r\n"+"function ewr_PrependClass(&$attr, $classname) {"+"\r\n"+"	$classname = trim($classname);"+"\r\n"+"	if ($classname <> \"\") {"+"\r\n"+"		$attr = trim($attr);"+"\r\n"+"		if ($attr <> \"\")"+"\r\n"+"			$attr = \" \" . $attr;"+"\r\n"+"		$attr = $classname . $attr;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Append CSS class name"+"\r\n"+"function ewr_AppendClass(&$attr, $classname) {"+"\r\n"+"	$classname = trim($classname);"+"\r\n"+"	if ($classname <> \"\") {"+"\r\n"+"		$attr = trim($attr);"+"\r\n"+"		if ($attr <> \"\")"+"\r\n"+"			$attr .= \" \";"+"\r\n"+"		$attr .= $classname;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Escape chars for XML"+"\r\n"+"function ewr_XmlEncode($val) {"+"\r\n"+"	return htmlspecialchars(strval($val));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Output SCRIPT tag"+"\r\n"+"function ewr_AddClientScript($src, $attrs = NULL) {"+"\r\n"+"	$atts = array(\"type\"=>\"text/javascript\", \"src\"=>$src);"+"\r\n"+"	if (is_array($attrs))"+"\r\n"+"		$atts = array_merge($atts, $attrs);"+"\r\n"+"	echo ewr_HtmlElement(\"script\", $atts, \"\") . \"\\n\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Output LINK tag"+"\r\n"+"function ewr_AddStylesheet($href, $attrs = NULL) {"+"\r\n"+"	$atts = array(\"rel\"=>\"stylesheet\", \"type\"=>\"text/css\", \"href\"=>$href);"+"\r\n"+"	if (is_array($attrs))"+"\r\n"+"		$atts = array_merge($atts, $attrs);"+"\r\n"+"	echo ewr_HtmlElement(\"link\", $atts, \"\", FALSE) . \"\\n\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Build HTML element"+"\r\n"+"function ewr_HtmlElement($tagname, $attrs, $innerhtml = \"\", $endtag = TRUE) {"+"\r\n"+"	$html = \"<\" . $tagname;"+"\r\n"+"	if (is_array($attrs)) {"+"\r\n"+"		foreach ($attrs as $name => $attr) {"+"\r\n"+"			if (strval($attr) <> \"\")"+"\r\n"+"				$html .= \" \" . $name . \"=\\\"\" . ewr_HtmlEncode($attr) . \"\\\"\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	$html .= \">\";"+"\r\n"+"	if (strval($innerhtml) <> \"\")"+"\r\n"+"		$html .= $innerhtml;"+"\r\n"+"	if ($endtag)"+"\r\n"+"		$html .= \"</\" . $tagname . \">\";"+"\r\n"+"	return $html;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Encode html"+"\r\n"+"function ewr_HtmlEncode($exp) {"+"\r\n"+"	return @htmlspecialchars(strval($exp), ENT_COMPAT | ENT_HTML5, EWR_ENCODING);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get title"+"\r\n"+"function ewr_HtmlTitle($name) {"+"\r\n"+"	if (preg_match('/\\s+title\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $name, $matches)) { // Match title='title'"+"\r\n"+"		return $matches[1];"+"\r\n"+"	} elseif (preg_match('/\\s+data-caption\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $name, $matches)) { // Match data-caption='caption'"+"\r\n"+"		return $matches[1];"+"\r\n"+"	} else {"+"\r\n"+"		return $name;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// View Option Separator"+"\r\n"+"function ewr_ViewOptionSeparator($rowcnt) {"+"\r\n"+"	return \", \";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Class for TEA encryption/decryption"+"\r\n"+" */"+"\r\n"+"class crTEA {"+"\r\n"+""+"\r\n"+"	function long2str($v, $w) {"+"\r\n"+"		$len = count($v);"+"\r\n"+"		$s = array();"+"\r\n"+"		for ($i = 0; $i < $len; $i++)"+"\r\n"+"		{"+"\r\n"+"			$s[$i] = pack(\"V\", $v[$i]);"+"\r\n"+"		}"+"\r\n"+"		if ($w) {"+"\r\n"+"			return substr(join('', $s), 0, $v[$len - 1]);"+"\r\n"+"		}	else {"+"\r\n"+"			return join('', $s);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function str2long($s, $w) {"+"\r\n"+"		$v = unpack(\"V*\", $s. str_repeat(\"\\0\", (4 - strlen($s) % 4) & 3));"+"\r\n"+"		$v = array_values($v);"+"\r\n"+"		if ($w) {"+"\r\n"+"			$v[count($v)] = strlen($s);"+"\r\n"+"		}"+"\r\n"+"		return $v;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Encrypt"+"\r\n"+"	public function Encrypt($str, $key = EWR_RANDOM_KEY) {"+"\r\n"+"		if ($str == \"\") {"+"\r\n"+"			return \"\";"+"\r\n"+"		}"+"\r\n"+"		$v = $this->str2long($str, true);"+"\r\n"+"		$k = $this->str2long($key, false);"+"\r\n"+"		$cntk = count($k);"+"\r\n"+"		if ($cntk < 4) {"+"\r\n"+"			for ($i = $cntk; $i < 4; $i++) {"+"\r\n"+"				$k[$i] = 0;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$n = count($v) - 1;"+"\r\n"+"		"+"\r\n"+"		$z = $v[$n];"+"\r\n"+"		$y = $v[0];"+"\r\n"+"		$delta = 0x9E3779B9;"+"\r\n"+"		$q = floor(6 + 52 / ($n + 1));"+"\r\n"+"		$sum = 0;"+"\r\n"+"		while (0 < $q--) {"+"\r\n"+"			$sum = $this->int32($sum + $delta);"+"\r\n"+"			$e = $sum >> 2 & 3;"+"\r\n"+"			for ($p = 0; $p < $n; $p++) {"+"\r\n"+"				$y = $v[$p + 1];"+"\r\n"+"				$mx = $this->int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $this->int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));"+"\r\n"+"				$z = $v[$p] = $this->int32($v[$p] + $mx);"+"\r\n"+"			}"+"\r\n"+"			$y = $v[0];"+"\r\n"+"			$mx = $this->int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $this->int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));"+"\r\n"+"			$z = $v[$n] = $this->int32($v[$n] + $mx);"+"\r\n"+"		}"+"\r\n"+"		return $this->UrlEncode($this->long2str($v, false));"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Decrypt"+"\r\n"+"	public function Decrypt($str, $key = EWR_RANDOM_KEY) {"+"\r\n"+"		$str = $this->UrlDecode($str);"+"\r\n"+"		if ($str == \"\") {"+"\r\n"+"			return \"\";"+"\r\n"+"		}"+"\r\n"+"		$v = $this->str2long($str, false);"+"\r\n"+"		$k = $this->str2long($key, false);"+"\r\n"+"		$cntk = count($k);"+"\r\n"+"		if ($cntk < 4) {"+"\r\n"+"			for ($i = $cntk; $i < 4; $i++) {"+"\r\n"+"				$k[$i] = 0;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		$n = count($v) - 1;"+"\r\n"+"		"+"\r\n"+"		$z = $v[$n];"+"\r\n"+"		$y = $v[0];"+"\r\n"+"		$delta = 0x9E3779B9;"+"\r\n"+"		$q = floor(6 + 52 / ($n + 1));"+"\r\n"+"		$sum = $this->int32($q * $delta);"+"\r\n"+"		while ($sum != 0) {"+"\r\n"+"			$e = $sum >> 2 & 3;"+"\r\n"+"			for ($p = $n; $p > 0; $p--) {"+"\r\n"+"				$z = $v[$p - 1];"+"\r\n"+"				$mx = $this->int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $this->int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));"+"\r\n"+"				$y = $v[$p] = $this->int32($v[$p] - $mx);"+"\r\n"+"			}"+"\r\n"+"			$z = $v[$n];"+"\r\n"+"			$mx = $this->int32((($z >> 5 & 0x07ffffff) ^ $y << 2) + (($y >> 3 & 0x1fffffff) ^ $z << 4)) ^ $this->int32(($sum ^ $y) + ($k[$p & 3 ^ $e] ^ $z));"+"\r\n"+"			$y = $v[0] = $this->int32($v[0] - $mx);"+"\r\n"+"			$sum = $this->int32($sum - $delta);"+"\r\n"+"		}"+"\r\n"+"		return $this->long2str($v, true);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function int32($n) {"+"\r\n"+"		while ($n >= 2147483648) $n -= 4294967296;"+"\r\n"+"		while ($n <= -2147483649) $n += 4294967296;"+"\r\n"+"		return (int)$n;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function UrlEncode($string) {"+"\r\n"+"		$data = base64_encode($string);"+"\r\n"+"		return str_replace(array('+','/','='), array('-','_','.'), $data);"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	function UrlDecode($string) {"+"\r\n"+"		$data = str_replace(array('-','_','.'), array('+','/','='), $string);"+"\r\n"+"		return base64_decode($data);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Encrypt"+"\r\n"+"function ewr_Encrypt($str, $key = EWR_RANDOM_KEY) {"+"\r\n"+"	$tea = new crTEA;"+"\r\n"+"	return $tea->Encrypt($str, $key);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Decrypt"+"\r\n"+"function ewr_Decrypt($str, $key = EWR_RANDOM_KEY) {"+"\r\n"+"	$tea = new crTEA;"+"\r\n"+"	return $tea->Decrypt($str, $key);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Pager item class"+"\r\n"+" */"+"\r\n"+"class crPagerItem {"+"\r\n"+"	var $Start;"+"\r\n"+"	var $Text;"+"\r\n"+"	var $Enabled;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Numeric pager class"+"\r\n"+" */"+"\r\n"+"class crNumericPager {"+"\r\n"+"	var $Items = array();"+"\r\n"+"	var $Count, $FromIndex, $ToIndex, $RecordCount, $PageSize, $Range;"+"\r\n"+"	var $FirstButton, $PrevButton, $NextButton, $LastButton;"+"\r\n"+"	var $ButtonCount = 0;"+"\r\n"+"	var $Visible = TRUE;"+"\r\n"+""+"\r\n"+"	function __construct($StartRec, $DisplayRecs, $TotalRecs, $RecRange) {"+"\r\n"+"		$this->FirstButton = new crPagerItem;"+"\r\n"+"		$this->PrevButton = new crPagerItem;"+"\r\n"+"		$this->NextButton = new crPagerItem;"+"\r\n"+"		$this->LastButton = new crPagerItem;"+"\r\n"+"		$this->FromIndex = intval($StartRec);"+"\r\n"+"		$this->PageSize = intval($DisplayRecs);"+"\r\n"+"		$this->RecordCount = intval($TotalRecs);"+"\r\n"+"		$this->Range = intval($RecRange);"+"\r\n"+"		if ($this->PageSize == 0) return;"+"\r\n"+"		if ($this->FromIndex > $this->RecordCount)"+"\r\n"+"			$this->FromIndex = $this->RecordCount;"+"\r\n"+"		$this->ToIndex = $this->FromIndex + $this->PageSize - 1;"+"\r\n"+"		if ($this->ToIndex > $this->RecordCount)"+"\r\n"+"			$this->ToIndex = $this->RecordCount;"+"\r\n"+"		// Setup"+"\r\n"+"		$this->SetupNumericPager();"+"\r\n"+"		// Update button count"+"\r\n"+"		if ($this->FirstButton->Enabled) $this->ButtonCount++;"+"\r\n"+"		if ($this->PrevButton->Enabled) $this->ButtonCount++;"+"\r\n"+"		if ($this->NextButton->Enabled) $this->ButtonCount++;"+"\r\n"+"		if ($this->LastButton->Enabled) $this->ButtonCount++;"+"\r\n"+"		$this->ButtonCount += count($this->Items);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Add pager item"+"\r\n"+"	function AddPagerItem($StartIndex, $Text, $Enabled)"+"\r\n"+"	{"+"\r\n"+"		$Item = new crPagerItem;"+"\r\n"+"		$Item->Start = $StartIndex;"+"\r\n"+"		$Item->Text = $Text;"+"\r\n"+"		$Item->Enabled = $Enabled;"+"\r\n"+"		$this->Items[] = $Item;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Setup pager items"+"\r\n"+"	function SetupNumericPager()"+"\r\n"+"	{"+"\r\n"+"		if ($this->RecordCount > $this->PageSize) {"+"\r\n"+"			$Eof = ($this->RecordCount < ($this->FromIndex + $this->PageSize));"+"\r\n"+"			$HasPrev = ($this->FromIndex > 1);"+"\r\n"+""+"\r\n"+"			// First Button"+"\r\n"+"			$TempIndex = 1;"+"\r\n"+"			$this->FirstButton->Start = $TempIndex;"+"\r\n"+"			$this->FirstButton->Enabled = ($this->FromIndex > $TempIndex);"+"\r\n"+""+"\r\n"+"			// Prev Button"+"\r\n"+"			$TempIndex = $this->FromIndex - $this->PageSize;"+"\r\n"+"			if ($TempIndex < 1) $TempIndex = 1;"+"\r\n"+"			$this->PrevButton->Start = $TempIndex;"+"\r\n"+"			$this->PrevButton->Enabled = $HasPrev;"+"\r\n"+""+"\r\n"+"			// Page links"+"\r\n"+"			if ($HasPrev || !$Eof) {"+"\r\n"+"				$x = 1;"+"\r\n"+"				$y = 1;"+"\r\n"+"				$dx1 = intval(($this->FromIndex-1)/($this->PageSize*$this->Range))*$this->PageSize*$this->Range + 1;"+"\r\n"+"				$dy1 = intval(($this->FromIndex-1)/($this->PageSize*$this->Range))*$this->Range + 1;"+"\r\n"+"				if (($dx1+$this->PageSize*$this->Range-1) > $this->RecordCount) {"+"\r\n"+"					$dx2 = intval($this->RecordCount/$this->PageSize)*$this->PageSize + 1;"+"\r\n"+"					$dy2 = intval($this->RecordCount/$this->PageSize) + 1;"+"\r\n"+"				} else {"+"\r\n"+"					$dx2 = $dx1 + $this->PageSize*$this->Range - 1;"+"\r\n"+"					$dy2 = $dy1 + $this->Range - 1;"+"\r\n"+"				}"+"\r\n"+"				while ($x <= $this->RecordCount) {"+"\r\n"+"					if ($x >= $dx1 && $x <= $dx2) {"+"\r\n"+"						$this->AddPagerItem($x, $y, $this->FromIndex<>$x);"+"\r\n"+"						$x += $this->PageSize;"+"\r\n"+"						$y++;"+"\r\n"+"					} elseif ($x >= ($dx1-$this->PageSize*$this->Range) && $x <= ($dx2+$this->PageSize*$this->Range)) {"+"\r\n"+"						if ($x+$this->Range*$this->PageSize < $this->RecordCount) {"+"\r\n"+"							$this->AddPagerItem($x, $y . \"-\" . ($y+$this->Range-1), TRUE);"+"\r\n"+"						} else {"+"\r\n"+"							$ny = intval(($this->RecordCount-1)/$this->PageSize) + 1;"+"\r\n"+"							if ($ny == $y) {"+"\r\n"+"								$this->AddPagerItem($x, $y, TRUE);"+"\r\n"+"							} else {"+"\r\n"+"								$this->AddPagerItem($x, $y . \"-\" . $ny, TRUE);"+"\r\n"+"							}"+"\r\n"+"						}"+"\r\n"+"						$x += $this->Range*$this->PageSize;"+"\r\n"+"						$y += $this->Range;"+"\r\n"+"					} else {"+"\r\n"+"						$x += $this->Range*$this->PageSize;"+"\r\n"+"						$y += $this->Range;"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"			// Next Button"+"\r\n"+"			$TempIndex = $this->FromIndex + $this->PageSize;"+"\r\n"+"			$this->NextButton->Start = $TempIndex;"+"\r\n"+"			$this->NextButton->Enabled = !$Eof;"+"\r\n"+""+"\r\n"+"			// Last Button"+"\r\n"+"			$TempIndex = intval(($this->RecordCount-1)/$this->PageSize)*$this->PageSize + 1;"+"\r\n"+"			$this->LastButton->Start = $TempIndex;"+"\r\n"+"			$this->LastButton->Enabled = ($this->FromIndex < $TempIndex);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * PrevNext pager class"+"\r\n"+" */"+"\r\n"+"class crPrevNextPager {"+"\r\n"+"	var $FirstButton, $PrevButton, $NextButton, $LastButton;"+"\r\n"+"	var $CurrentPage, $PageCount, $FromIndex, $ToIndex, $RecordCount;"+"\r\n"+"	var $Visible = TRUE;"+"\r\n"+""+"\r\n"+"	function __construct($StartRec, $DisplayRecs, $TotalRecs) {"+"\r\n"+"		$this->FirstButton = new crPagerItem;"+"\r\n"+"		$this->PrevButton = new crPagerItem;"+"\r\n"+"		$this->NextButton = new crPagerItem;"+"\r\n"+"		$this->LastButton = new crPagerItem;"+"\r\n"+"		$this->FromIndex = intval($StartRec);"+"\r\n"+"		$this->PageSize = intval($DisplayRecs);"+"\r\n"+"		$this->RecordCount = intval($TotalRecs);"+"\r\n"+"		if ($this->PageSize == 0) return;"+"\r\n"+""+"\r\n"+"		$this->CurrentPage = intval(($this->FromIndex-1)/$this->PageSize) + 1;"+"\r\n"+"		$this->PageCount = intval(($this->RecordCount-1)/$this->PageSize) + 1;"+"\r\n"+"		if ($this->FromIndex > $this->RecordCount)"+"\r\n"+"			$this->FromIndex = $this->RecordCount;"+"\r\n"+"		$this->ToIndex = $this->FromIndex + $this->PageSize - 1;"+"\r\n"+"		if ($this->ToIndex > $this->RecordCount)"+"\r\n"+"			$this->ToIndex = $this->RecordCount;"+"\r\n"+""+"\r\n"+"		// First Button"+"\r\n"+"		$TempIndex = 1;"+"\r\n"+"		$this->FirstButton->Start = $TempIndex;"+"\r\n"+"		$this->FirstButton->Enabled = ($TempIndex <> $this->FromIndex);"+"\r\n"+""+"\r\n"+"		// Prev Button"+"\r\n"+"		$TempIndex = $this->FromIndex - $this->PageSize;"+"\r\n"+"		if ($TempIndex < 1) $TempIndex = 1;"+"\r\n"+"		$this->PrevButton->Start = $TempIndex;"+"\r\n"+"		$this->PrevButton->Enabled = ($TempIndex <> $this->FromIndex);"+"\r\n"+""+"\r\n"+"		// Next Button"+"\r\n"+"		$TempIndex = $this->FromIndex + $this->PageSize;"+"\r\n"+"		if ($TempIndex > $this->RecordCount)"+"\r\n"+"			$TempIndex = $this->FromIndex;"+"\r\n"+"		$this->NextButton->Start = $TempIndex;"+"\r\n"+"		$this->NextButton->Enabled = ($TempIndex <> $this->FromIndex);"+"\r\n"+""+"\r\n"+"		// Last Button"+"\r\n"+"		$TempIndex = intval(($this->RecordCount-1)/$this->PageSize)*$this->PageSize + 1;"+"\r\n"+"		$this->LastButton->Start = $TempIndex;"+"\r\n"+"		$this->LastButton->Enabled = ($TempIndex <> $this->FromIndex);"+"\r\n"+"  }"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Email class"+"\r\n"+" */"+"\r\n"+"class crEmail {"+"\r\n"+""+"\r\n"+"	// Class properties"+"\r\n"+"	var $Sender = \"\"; // Sender"+"\r\n"+"	var $Recipient = \"\"; // Recipient"+"\r\n"+"	var $Cc = \"\"; // Cc"+"\r\n"+"	var $Bcc = \"\"; // Bcc"+"\r\n"+"	var $Subject = \"\"; // Subject"+"\r\n"+"	var $Format = \"\"; // Format"+"\r\n"+"	var $Content = \"\"; // Content"+"\r\n"+"	var $Attachments = array(); // Attachments"+"\r\n"+"	var $EmbeddedImages = array(); // Embedded image"+"\r\n"+"	var $Charset = \"\"; // Charset"+"\r\n"+"	var $SendErrDescription; // Send error description"+"\r\n"+"	var $SmtpSecure = EWR_SMTP_SECURE_OPTION; // Send secure option"+"\r\n"+"	var $Mailer = NULL; // PHPMailer object"+"\r\n"+""+"\r\n"+"	// Method to load email from template"+"\r\n"+"	function Load($fn) {"+"\r\n"+"		$fn = ewr_ScriptFolder() . EWR_PATH_DELIMITER . $fn;"+"\r\n"+"		$sWrk = file_get_contents($fn); // Load text file content"+"\r\n"+"		if (substr($sWrk, 0, 3) == \"\\xEF\\xBB\\xBF\") // UTF-8 BOM"+"\r\n"+"			$sWrk = substr($sWrk, 3);"+"\r\n"+"		if ($sWrk <> \"\") {"+"\r\n"+"			// Locate Header & Mail Content"+"\r\n"+"			if (EWR_IS_WINDOWS) {"+"\r\n"+"				$i = strpos($sWrk, \"\\r\\n\\r\\n\");"+"\r\n"+"			} else {"+"\r\n"+"				$i = strpos($sWrk, \"\\n\\n\");"+"\r\n"+"				if ($i === FALSE) $i = strpos($sWrk, \"\\r\\n\\r\\n\");"+"\r\n"+"			}"+"\r\n"+"			if ($i > 0) {"+"\r\n"+"				$sHeader = substr($sWrk, 0, $i);"+"\r\n"+"				$this->Content = trim(substr($sWrk, $i, strlen($sWrk)));"+"\r\n"+"				if (EWR_IS_WINDOWS) {"+"\r\n"+"					$arrHeader = explode(\"\\r\\n\", $sHeader);"+"\r\n"+"				} else {"+"\r\n"+"					$arrHeader = explode(\"\\n\", $sHeader);"+"\r\n"+"				}"+"\r\n"+"				$cnt = count($arrHeader);"+"\r\n"+"				for ($j = 0; $j < $cnt; $j++) {"+"\r\n"+"					$i = strpos($arrHeader[$j], \":\");"+"\r\n"+"					if ($i > 0) {"+"\r\n"+"						$sName = trim(substr($arrHeader[$j], 0, $i));"+"\r\n"+"						$sValue = trim(substr($arrHeader[$j], $i+1, strlen($arrHeader[$j])));"+"\r\n"+"						switch (strtolower($sName))"+"\r\n"+"						{"+"\r\n"+"							case \"subject\":"+"\r\n"+"								$this->Subject = $sValue;"+"\r\n"+"								break;"+"\r\n"+"							case \"from\":"+"\r\n"+"								$this->Sender = $sValue;"+"\r\n"+"								break;"+"\r\n"+"							case \"to\":"+"\r\n"+"								$this->Recipient = $sValue;"+"\r\n"+"								break;"+"\r\n"+"							case \"cc\":"+"\r\n"+"								$this->Cc = $sValue;"+"\r\n"+"								break;"+"\r\n"+"							case \"bcc\":"+"\r\n"+"								$this->Bcc = $sValue;"+"\r\n"+"								break;"+"\r\n"+"							case \"format\":"+"\r\n"+"								$this->Format = $sValue;"+"\r\n"+"								break;"+"\r\n"+"						}"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to replace sender"+"\r\n"+"	function ReplaceSender($ASender) {"+"\r\n"+"		$this->Sender = str_replace('<!--$From-->', $ASender, $this->Sender);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to replace recipient"+"\r\n"+"	function ReplaceRecipient($ARecipient) {"+"\r\n"+"		$this->Recipient = str_replace('<!--$To-->', $ARecipient, $this->Recipient);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to add Cc email"+"\r\n"+"	function AddCc($ACc) {"+"\r\n"+"		if ($ACc <> \"\") {"+"\r\n"+"			if ($this->Cc <> \"\") $this->Cc .= \";\";"+"\r\n"+"			$this->Cc .= $ACc;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to add Bcc email"+"\r\n"+"	function AddBcc($ABcc) {"+"\r\n"+"		if ($ABcc <> \"\")  {"+"\r\n"+"			if ($this->Bcc <> \"\") $this->Bcc .= \";\";"+"\r\n"+"			$this->Bcc .= $ABcc;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to replace subject"+"\r\n"+"	function ReplaceSubject($ASubject) {"+"\r\n"+"		$this->Subject = str_replace('<!--$Subject-->', $ASubject, $this->Subject);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to replace content"+"\r\n"+"	function ReplaceContent($Find, $ReplaceWith) {"+"\r\n"+"		$this->Content = str_replace($Find, $ReplaceWith, $this->Content);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to add embedded image"+"\r\n"+"	function AddEmbeddedImage($image) {"+"\r\n"+"		if ($image <> \"\")"+"\r\n"+"			$this->EmbeddedImages[] = $image;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to add attachment"+"\r\n"+"	function AddAttachment($filename, $content = \"\") {"+"\r\n"+"		if ($filename <> \"\")"+"\r\n"+"			$this->Attachments[] = array(\"filename\" => $filename, \"content\" => $content);"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// Method to send email"+"\r\n"+"	function Send() {"+"\r\n"+"		global $gsEmailErrDesc;"+"\r\n"+"		$result = ewr_SendEmail($this->Sender, $this->Recipient, $this->Cc, $this->Bcc,"+"\r\n"+"			$this->Subject, $this->Content, $this->Format, $this->Charset, $this->SmtpSecure,"+"\r\n"+"			$this->Attachments, $this->EmbeddedImages, $this->Mailer);"+"\r\n"+"		$this->SendErrDescription = $gsEmailErrDesc;"+"\r\n"+"		return $result;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Include PHPMailer class"+"\r\n"+"include_once($EWR_RELATIVE_PATH . \"phpmailer529/class.phpmailer.php\");"+"\r\n"+""+"\r\n"+"// Function to send email"+"\r\n"+"function ewr_SendEmail($sFrEmail, $sToEmail, $sCcEmail, $sBccEmail, $sSubject, $sMail, $sFormat, $sCharset, $sSmtpSecure = \"\", $arAttachments = array(), $arImages = array(), $mail = NULL) {"+"\r\n"+"	global $ReportLanguage, $gsEmailErrDesc;"+"\r\n"+""+"\r\n"+"	$res = FALSE;"+"\r\n"+""+"\r\n"+"	if (is_null($mail)) {"+"\r\n"+"		$mail = new PHPMailer();"+"\r\n"+"		$mail->IsSMTP(); "+"\r\n"+"		$mail->Host = EWR_SMTP_SERVER;"+"\r\n"+"		$mail->SMTPAuth = (EWR_SMTP_SERVER_USERNAME <> \"\" && EWR_SMTP_SERVER_PASSWORD <> \"\");"+"\r\n"+"		$mail->Username = EWR_SMTP_SERVER_USERNAME;"+"\r\n"+"		$mail->Password = EWR_SMTP_SERVER_PASSWORD;"+"\r\n"+"		$mail->Port = EWR_SMTP_SERVER_PORT;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	if ($sSmtpSecure <> \"\") $mail->SMTPSecure = $sSmtpSecure;"+"\r\n"+"	if (preg_match('/^(.+)<([\\w.%+-]+@[\\w.-]+\\.[A-Z]{2,6})>$/i', trim($sFrEmail), $m)) {"+"\r\n"+"		$mail->From = $m[2];"+"\r\n"+"		$mail->FromName = trim($m[1]);"+"\r\n"+"	} else {"+"\r\n"+"		$mail->From = $sFrEmail;"+"\r\n"+"		$mail->FromName = $sFrEmail;"+"\r\n"+"	}"+"\r\n"+"	$mail->Subject = $sSubject;"+"\r\n"+"	$mail->Body = $sMail;"+"\r\n"+""+"\r\n"+"	if ($sCharset <> \"\" && strtolower($sCharset) <> \"iso-8859-1\")"+"\r\n"+"		$mail->CharSet = $sCharset;"+"\r\n"+""+"\r\n"+"	$sToEmail = str_replace(\";\", \",\", $sToEmail);"+"\r\n"+"	$arrTo = explode(\",\", $sToEmail);"+"\r\n"+""+"\r\n"+"	foreach ($arrTo as $sTo) {"+"\r\n"+"		$mail->AddAddress(trim($sTo));"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	if ($sCcEmail <> \"\") {"+"\r\n"+"		$sCcEmail = str_replace(\";\", \",\", $sCcEmail);"+"\r\n"+"		$arrCc = explode(\",\", $sCcEmail);"+"\r\n"+""+"\r\n"+"		foreach ($arrCc as $sCc) {"+"\r\n"+"			$mail->AddCC(trim($sCc));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	if ($sBccEmail <> \"\") {"+"\r\n"+"		$sBccEmail = str_replace(\";\", \",\", $sBccEmail);"+"\r\n"+"		$arrBcc = explode(\",\", $sBccEmail);"+"\r\n"+""+"\r\n"+"		foreach ($arrBcc as $sBcc) {"+"\r\n"+"			$mail->AddBCC(trim($sBcc));"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	if (strtolower($sFormat) == \"html\") {"+"\r\n"+"		$mail->ContentType = \"text/html\";"+"\r\n"+"	} else {"+"\r\n"+"		$mail->ContentType = \"text/plain\";"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	if (is_array($arAttachments)) {"+"\r\n"+"		foreach ($arAttachments as $attachment) {"+"\r\n"+"			$filename = @$attachment[\"filename\"];"+"\r\n"+"			$content = @$attachment[\"content\"];"+"\r\n"+"			if ($content <> \"\" && $filename <> \"\") {"+"\r\n"+"				$mail->AddStringAttachment($content, $filename);"+"\r\n"+"			} else if ($filename <> \"\") {"+"\r\n"+"				$mail->AddAttachment($filename);"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	if (is_array($arImages)) {"+"\r\n"+"		foreach ($arImages as $tmpimage) {"+"\r\n"+"			$file = ewr_UploadPathEx(TRUE, EWR_UPLOAD_DEST_PATH) . $tmpimage;"+"\r\n"+"			$cid = ewr_TmpImageLnk($tmpimage, \"cid\");"+"\r\n"+"			$mail->AddEmbeddedImage($file, $cid, $tmpimage);"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	$res = $mail->Send();"+"\r\n"+"	$gsEmailErrDesc = $mail->ErrorInfo;"+"\r\n"+""+"\r\n"+"	// Uncomment to debug"+"\r\n"+"//		var_dump($mail); exit();"+"\r\n"+""+"\r\n"+"	return $res;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Clean email content"+"\r\n"+"function ewr_CleanEmailContent($Content) {"+"\r\n"+"	$Content = str_replace(\"class=\\\"ewGrid\\\"\", \"\", $Content);"+"\r\n"+"	$Content = str_replace(\"class=\\\"table-responsive ewGridMiddlePanel\\\"\", \"\", $Content);"+"\r\n"+"	$Content = str_replace(\"table ewTable\", \"ewExportTable\", $Content);"+"\r\n"+"	return $Content;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Load email count"+"\r\n"+"function ewr_LoadEmailCount() {"+"\r\n"+""+"\r\n"+"	// Read from log"+"\r\n"+"	if (EWR_EMAIL_WRITE_LOG) {"+"\r\n"+""+"\r\n"+"		$ip = ewr_ServerVar(\"REMOTE_ADDR\");"+"\r\n"+""+"\r\n"+"		// Load from database"+"\r\n"+"		if (EWR_EMAIL_WRITE_LOG_TO_DATABASE) {"+"\r\n"+""+"\r\n"+"			global $conn;"+"\r\n"+"			$dt1 = date(\"Y-m-d H:i:s\", strtotime(\"- \" . EWR_MAX_EMAIL_SENT_PERIOD . \"minute\"));"+"\r\n"+"			$dt2 = date(\"Y-m-d H:i:s\");"+"\r\n"+"			$sEmailSql = \"SELECT COUNT(*) FROM \" . EWR_EMAIL_LOG_TABLE_NAME ."+"\r\n"+"				\" WHERE \" . ewr_QuotedName(EWR_EMAIL_LOG_FIELD_NAME_DATETIME) ."+"\r\n"+"				\" BETWEEN \" . ewr_QuotedValue($dt1, EWR_DATATYPE_DATE) . \" AND \" . ewr_QuotedValue($dt2, EWR_DATATYPE_DATE) ."+"\r\n"+"				\" AND \" . ewr_QuotedName(EWR_EMAIL_LOG_FIELD_NAME_IP) . "+"\r\n"+"				\" = \" . ewr_QuotedValue($ip, EWR_DATATYPE_STRING);"+"\r\n"+"			$rscnt = $conn->Execute($sEmailSql);"+"\r\n"+"			if ($rscnt) {"+"\r\n"+"				$_SESSION[EWR_EXPORT_EMAIL_COUNTER] = ($rscnt->RecordCount()>1) ? $rscnt->RecordCount() : $rscnt->fields[0];"+"\r\n"+"				$rscnt->Close();"+"\r\n"+"			} else {"+"\r\n"+"				$_SESSION[EWR_EXPORT_EMAIL_COUNTER] = 0;"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"		// Load from log file"+"\r\n"+"		} else {"+"\r\n"+""+"\r\n"+"			$pfx = \"email\";"+"\r\n"+"			$sTab = \"\\t\";"+"\r\n"+"			$sFolder = EWR_UPLOAD_DEST_PATH;"+"\r\n"+"			$randomkey = ewr_Encrypt(date(\"Ymd\"), EWR_RANDOM_KEY);"+"\r\n"+"			$sFn = $pfx . \"_\" . date(\"Ymd\") . \"_\" . $randomkey . \".txt\";"+"\r\n"+"			$filename = ewr_UploadPathEx(TRUE, $sFolder) . $sFn;"+"\r\n"+"			if (file_exists($filename)) {"+"\r\n"+"				$arLines = file($filename);"+"\r\n"+"				$cnt = 0;"+"\r\n"+"				foreach ($arLines as $line) {"+"\r\n"+"					if ($line <> \"\") {"+"\r\n"+"						list($dtwrk, $ipwrk, $senderwrk, $recipientwrk, $subjectwrk, $messagewrk) = explode($sTab, $line);"+"\r\n"+"						$timediff = intval((strtotime(\"now\") - strtotime($dtwrk,0))/60);"+"\r\n"+"						if ($ipwrk == $ip && $timediff < EWR_MAX_EMAIL_SENT_PERIOD) $cnt++;"+"\r\n"+"					}"+"\r\n"+"				}"+"\r\n"+"				$_SESSION[EWR_EXPORT_EMAIL_COUNTER] = $cnt;"+"\r\n"+"			} else {"+"\r\n"+"				$_SESSION[EWR_EXPORT_EMAIL_COUNTER] = 0;"+"\r\n"+"			}"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+""+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	if (!isset($_SESSION[EWR_EXPORT_EMAIL_COUNTER]))"+"\r\n"+"		$_SESSION[EWR_EXPORT_EMAIL_COUNTER] = 0;"+"\r\n"+"	return intval($_SESSION[EWR_EXPORT_EMAIL_COUNTER]);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Add email log"+"\r\n"+"function ewr_AddEmailLog($sender, $recipient, $subject, $message) {"+"\r\n"+"	$_SESSION[EWR_EXPORT_EMAIL_COUNTER]++;"+"\r\n"+""+"\r\n"+"	// Save to email log"+"\r\n"+"	if (EWR_EMAIL_WRITE_LOG) {"+"\r\n"+""+"\r\n"+"		$dt = date(\"Y-m-d H:i:s\");"+"\r\n"+"		$ip = ewr_ServerVar(\"REMOTE_ADDR\");"+"\r\n"+"		$senderwrk = ewr_TruncateText($sender);"+"\r\n"+"		$recipientwrk = ewr_TruncateText($recipient);"+"\r\n"+"		$subjectwrk = ewr_TruncateText($subject);"+"\r\n"+"		$messagewrk = ewr_TruncateText($message);"+"\r\n"+""+"\r\n"+"		// Save to database"+"\r\n"+"		if (EWR_EMAIL_WRITE_LOG_TO_DATABASE) {"+"\r\n"+""+"\r\n"+"			global $conn;"+"\r\n"+"			$sEmailSql = \"INSERT INTO \" . EWR_EMAIL_LOG_TABLE_NAME ."+"\r\n"+"				\" (\" . ewr_QuotedName(EWR_EMAIL_LOG_FIELD_NAME_DATETIME) . \", \" ."+"\r\n"+"				ewr_QuotedName(EWR_EMAIL_LOG_FIELD_NAME_IP) . \", \" ."+"\r\n"+"				ewr_QuotedName(EWR_EMAIL_LOG_FIELD_NAME_SENDER) . \", \" ."+"\r\n"+"				ewr_QuotedName(EWR_EMAIL_LOG_FIELD_NAME_RECIPIENT) . \", \" ."+"\r\n"+"				ewr_QuotedName(EWR_EMAIL_LOG_FIELD_NAME_SUBJECT) . \", \" ."+"\r\n"+"				ewr_QuotedName(EWR_EMAIL_LOG_FIELD_NAME_MESSAGE) . \") VALUES (\" ."+"\r\n"+"				ewr_QuotedValue($dt, EWR_DATATYPE_DATE) . \", \" ."+"\r\n"+"				ewr_QuotedValue($ip, EWR_DATATYPE_STRING) . \", \" ."+"\r\n"+"				ewr_QuotedValue($senderwrk, EWR_DATATYPE_STRING) . \", \" ."+"\r\n"+"				ewr_QuotedValue($recipientwrk, EWR_DATATYPE_STRING) . \", \" ."+"\r\n"+"				ewr_QuotedValue($subjectwrk, EWR_DATATYPE_STRING) . \", \" ."+"\r\n"+"				ewr_QuotedValue($messagewrk, EWR_DATATYPE_STRING) . \")\";"+"\r\n"+"			$conn->Execute($sEmailSql);"+"\r\n"+""+"\r\n"+"		// Save to log file"+"\r\n"+"		} else {"+"\r\n"+""+"\r\n"+"			$pfx = \"email\";"+"\r\n"+"			$sTab = \"\\t\";"+"\r\n"+"			$sHeader = \"date/time\" . $sTab . \"ip\" . $sTab . \"sender\" . $sTab . \"recipient\" . $sTab . \"subject\" . $sTab . \"message\";"+"\r\n"+"			$sMsg = $dt . $sTab . $ip . $sTab . $senderwrk . $sTab . $recipientwrk . $sTab . $subjectwrk . $sTab . $messagewrk;"+"\r\n"+"			$sFolder = EWR_UPLOAD_DEST_PATH;"+"\r\n"+"			$randomkey = ewr_Encrypt(date(\"Ymd\"), EWR_RANDOM_KEY);"+"\r\n"+"			$sFn = $pfx . \"_\" . date(\"Ymd\") . \"_\" . $randomkey . \".txt\";"+"\r\n"+"			$filename = ewr_UploadPathEx(TRUE, $sFolder) . $sFn;"+"\r\n"+"			if (file_exists($filename)) {"+"\r\n"+"				$fileHandler = fopen($filename, \"a+b\");"+"\r\n"+"			} else {"+"\r\n"+"				$fileHandler = fopen($filename, \"a+b\");"+"\r\n"+"				fwrite($fileHandler,$sHeader.\"\\r\\n\");"+"\r\n"+"			}"+"\r\n"+"			fwrite($fileHandler, $sMsg.\"\\r\\n\");"+"\r\n"+"			fclose($fileHandler);"+"\r\n"+""+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"function ewr_TruncateText($v) {"+"\r\n"+"	$maxlen = EWR_EMAIL_LOG_SIZE_LIMIT;"+"\r\n"+"	$v = str_replace(\"\\r\\n\", \" \", $v);"+"\r\n"+"	$v = str_replace(\"\\t\", \" \", $v);"+"\r\n"+"	if (strlen($v) > $maxlen)"+"\r\n"+"		$v = substr($v, 0, $maxlen-3) . \"...\";"+"\r\n"+"	return $v;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get global debug message"+"\r\n"+"function ewr_DebugMsg() {"+"\r\n"+"	global $gsDebugMsg;"+"\r\n"+"	$msg = preg_replace('/^<br>\\n/', \"\", $gsDebugMsg);"+"\r\n"+"	$gsDebugMsg = \"\";"+"\r\n"+"	return ($msg <> \"\") ? \"<div class=\\\"alert alert-info ewAlert\\\">\" . $msg . \"</div>\" : \"\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Write global debug message"+"\r\n"+"function ewr_SetDebugMsg($v, $newline = TRUE) {"+"\r\n"+"	global $gsDebugMsg;"+"\r\n"+"	if ($newline && $gsDebugMsg <> \"\")"+"\r\n"+"		$gsDebugMsg .= \"<br>\";"+"\r\n"+"	$gsDebugMsg .= $v;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Functions for converting encoding"+"\r\n"+" */"+"\r\n"+"function ewr_ConvertToUtf8($str) {"+"\r\n"+"	return ewr_Convert(EWR_ENCODING, \"UTF-8\", $str);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"function ewr_ConvertFromUtf8($str) {"+"\r\n"+"	return ewr_Convert(\"UTF-8\", EWR_ENCODING, $str);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"function ewr_Convert($from, $to, $str) {"+"\r\n"+"	if ($from != \"\" && $to != \"\" && strtoupper($from) != strtoupper($to)) {"+"\r\n"+"		if (function_exists(\"iconv\")) {"+"\r\n"+"			return iconv($from, $to, $str);"+"\r\n"+"		} elseif (function_exists(\"mb_convert_encoding\")) {"+"\r\n"+"			return mb_convert_encoding($str, $to, $from);"+"\r\n"+"		} else {"+"\r\n"+"			return $str;"+"\r\n"+"		}"+"\r\n"+"	} else {"+"\r\n"+"		return $str;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Encode value for single-quoted JavaScript string"+"\r\n"+"function ewr_JsEncode($val) {"+"\r\n"+"	$val = strval($val);"+"\r\n"+"	if (EWR_IS_DOUBLE_BYTE)"+"\r\n"+"		$val = ewr_ConvertToUtf8($val);"+"\r\n"+"	$val = str_replace(\"\\\\\", \"\\\\\\\\\", $val);"+"\r\n"+"	$val = str_replace(\"'\", \"\\\\'\", $val);"+"\r\n"+"	$val = str_replace(\"\\r\\n\", \"<br>\", $val);"+"\r\n"+"	$val = str_replace(\"\\r\", \"<br>\", $val);"+"\r\n"+"	$val = str_replace(\"\\n\", \"<br>\", $val);"+"\r\n"+"	if (EWR_IS_DOUBLE_BYTE)"+"\r\n"+"		$val = ewr_ConvertFromUtf8($val);"+"\r\n"+"	return $val;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Encode value for double-quoted Javascript string"+"\r\n"+"function ewr_JsEncode2($val) {"+"\r\n"+"	$val = strval($val);"+"\r\n"+"	if (EWR_IS_DOUBLE_BYTE)"+"\r\n"+"		$val = ewr_ConvertToUtf8($val);"+"\r\n"+"	$val = str_replace(\"\\\\\", \"\\\\\\\\\", $val);"+"\r\n"+"	$val = str_replace(\"\\\"\", \"\\\\\\\"\", $val);"+"\r\n"+"	$val = str_replace(\"\\t\", \"\\\\t\", $val);"+"\r\n"+"	$val = str_replace(\"\\r\", \"\\\\r\", $val);"+"\r\n"+"	$val = str_replace(\"\\n\", \"\\\\n\", $val);"+"\r\n"+"	if (EWR_IS_DOUBLE_BYTE)"+"\r\n"+"		$val = ewr_ConvertFromUtf8($val);"+"\r\n"+"	return $val;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert a value to JSON value"+"\r\n"+"// $type: string/boolean"+"\r\n"+"function ewr_VarToJson($val, $type = \"\") {"+"\r\n"+"	$type = strtolower($type);"+"\r\n"+"	if (is_null($val)) {"+"\r\n"+"		return \"null\";"+"\r\n"+"	} elseif ($type == \"boolean\" || is_bool($val)) {"+"\r\n"+"		return (ewr_ConvertToBool($val)) ? \"true\" : \"false\";"+"\r\n"+"	} elseif ($type == \"string\" || is_string($val)) {"+"\r\n"+"		return \"\\\"\" . ewr_JsEncode2($val) . \"\\\"\";"+"\r\n"+"	}"+"\r\n"+"	return $val;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Encode json"+"\r\n"+"function ewr_JsonEncode($ar) {"+"\r\n"+"	if (count($ar) > 0) {"+"\r\n"+"		$json = json_encode($ar);"+"\r\n"+"		if ($json <> \"\")"+"\r\n"+"			return \"[\" . json_encode($ar) . \"]\";"+"\r\n"+"		else"+"\r\n"+"			return \"null\";"+"\r\n"+"	} else {"+"\r\n"+"		return \"null\";"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert rows (array) to JSON"+"\r\n"+"function ewr_ArrayToJson($ar, $offset = 0) {"+"\r\n"+"	$arOut = array();"+"\r\n"+"	$array = FALSE;"+"\r\n"+"	if (count($ar) > 0) {"+"\r\n"+"		$keys = array_keys($ar[0]);"+"\r\n"+"		foreach ($keys as $key) {"+"\r\n"+"			if (is_int($key)) {"+"\r\n"+"				$array = TRUE;"+"\r\n"+"				break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	foreach ($ar as $row) {"+"\r\n"+"		$arwrk = array();"+"\r\n"+"		foreach ($row as $key => $val) {"+"\r\n"+"			if (($array && is_string($key)) || (!$array && is_int($key)))"+"\r\n"+"				continue;"+"\r\n"+"			$key = ($array) ? \"\" : \"\\\"\" . ewr_JsEncode2($key) . \"\\\":\";"+"\r\n"+"			$arwrk[] = $key . ewr_VarToJson($val);"+"\r\n"+"		}"+"\r\n"+"		if ($array) { // Array"+"\r\n"+"			$arOut[] = \"[\" . implode(\",\", $arwrk) . \"]\";"+"\r\n"+"		} else { // Object"+"\r\n"+"			$arOut[] = \"{\" . implode(\",\", $arwrk) . \"}\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	if ($offset > 0)"+"\r\n"+"		$arOut = array_slice($arOut, $offset);"+"\r\n"+"	return \"[\" . implode(\",\", $arOut) . \"]\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Executes the query, and returns the row(s) as JSON"+"\r\n"+"function ewr_ExecuteJson($SQL, $FirstOnly = TRUE) {"+"\r\n"+"	$rs = ewr_LoadRecordset($SQL);"+"\r\n"+"	if ($rs && !$rs->EOF && $rs->FieldCount() > 0) {"+"\r\n"+"		$res = ($FirstOnly) ? array($rs->fields) : $rs->GetRows();"+"\r\n"+"		$rs->Close();"+"\r\n"+"		return json_encode($res);"+"\r\n"+"	}"+"\r\n"+"	return \"false\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current page name"+"\r\n"+"function ewr_CurrentPage() {"+"\r\n"+"	return ewr_GetPageName(ewr_ScriptName());"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get page name"+"\r\n"+"function ewr_GetPageName($url) {"+"\r\n"+"	$PageName = \"\";"+"\r\n"+"	if ($url <> \"\") {"+"\r\n"+"		$PageName = $url;"+"\r\n"+"		$p = strpos($PageName, \"?\");"+"\r\n"+"		if ($p !== FALSE)"+"\r\n"+"			$PageName = substr($PageName, 0, $p); // Remove QueryString"+"\r\n"+"		$p = strrpos($PageName, \"/\");"+"\r\n"+"		if ($p !== FALSE)"+"\r\n"+"			$PageName = substr($PageName, $p+1); // Remove path"+"\r\n"+"	}"+"\r\n"+"	return $PageName;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Adjust text for caption"+"\r\n"+"function ewr_BtnCaption($Caption) {"+"\r\n"+"	$Min = 10;"+"\r\n"+"	if (strlen($Caption) < $Min) {"+"\r\n"+"		$Pad = abs(intval(($Min - strlen($Caption))/2*-1));"+"\r\n"+"		$Caption = str_repeat(\" \", $Pad) . $Caption . str_repeat(\" \", $Pad);"+"\r\n"+"	}"+"\r\n"+"	return $Caption;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+""+"\r\n"+"// Include mobile_detect.php"+"\r\n"+"include_once(\"";
ewAr[166] = "\");"+"\r\n"+""+"\r\n"+"// Check if mobile device"+"\r\n"+"function ewr_IsMobile() {"+"\r\n"+"	global $MobileDetect;"+"\r\n"+"	if (!isset($MobileDetect))"+"\r\n"+"		$MobileDetect = new Mobile_Detect;"+"\r\n"+"	return $MobileDetect->isMobile();"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if responsive layout"+"\r\n"+"function ewr_IsResponsiveLayout() {"+"\r\n"+"	return $GLOBALS['EWR_USE_RESPONSIVE_LAYOUT'];"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get server variable by name"+"\r\n"+"function ewr_ServerVar($Name) {"+"\r\n"+"	$str = @$_SERVER[$Name];"+"\r\n"+"	if (empty($str)) $str = @$_ENV[$Name];"+"\r\n"+"	return $str;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"//###// Get jQuery host"+"\r\n"+"//function ewr_jQueryHost() {"+"\r\n"+"//	return \"jquery/\"; // Use local files"+"\r\n"+"//}"+"\r\n"+"//"+"\r\n"+"//// Get jQuery version"+"\r\n"+"//function ewr_jQueryFile($f) {"+"\r\n"+"//	$v = \"1.11.1\"; // Get jQuery version"+"\r\n"+"//	return str_replace(\"%v\", $v, ewr_jQueryHost() . $f);"+"\r\n"+"//}"+"\r\n"+""+"\r\n"+"// Get CSS file"+"\r\n"+"function ewr_CssFile($f) {"+"\r\n"+"	if (EWR_CSS_FLIP)"+"\r\n"+"		return preg_replace('/(.css)$/i', \"-rtl.css\", $f);"+"\r\n"+"	else"+"\r\n"+"		return $f;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if HTTPS"+"\r\n"+"function ewr_IsHttps() {"+"\r\n"+"	return (ewr_ServerVar(\"HTTPS\") <> \"\" && ewr_ServerVar(\"HTTPS\") <> \"off\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Encrypt password"+"\r\n"+"function ewr_EncryptPassword($input, $salt = '') {"+"\r\n"+"	return (strval($salt) <> \"\") ? md5($input . $salt) . \":\" . $salt : md5($input);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Compare password"+"\r\n"+"// Note: If salted, password must be stored in '<hashedstring>:<salt>' or in phpass format"+"\r\n"+"function ewr_ComparePassword($pwd, $input) {"+"\r\n"+"	if (preg_match('/^\\$[HP]\\$/', $pwd)) { // phpass"+"\r\n"+"		include \"passwordhash.php\";"+"\r\n"+"		$hasher = new PasswordHash(10, TRUE);"+"\r\n"+"		return $hasher->CheckPassword($input, $pwd);"+"\r\n"+"	} elseif (strpos($pwd, ':') !== FALSE) { // <hashedstring>:<salt>"+"\r\n"+"		@list($crypt, $salt) = explode(\":\", $pwd, 2);"+"\r\n"+"		return ($pwd == ewr_EncryptPassword($input, $salt));"+"\r\n"+"	} else {"+"\r\n"+"		if (EWR_CASE_SENSITIVE_PASSWORD) {"+"\r\n"+"			if (EWR_ENCRYPTED_PASSWORD) {"+"\r\n"+"				return ($pwd == ewr_EncryptPassword($input));"+"\r\n"+"			} else {"+"\r\n"+"				return ($pwd == $input);"+"\r\n"+"			}"+"\r\n"+"		} else {"+"\r\n"+"			if (EWR_ENCRYPTED_PASSWORD) {"+"\r\n"+"				return ($pwd == ewr_EncryptPassword(strtolower($input)));"+"\r\n"+"			} else {"+"\r\n"+"				return (strtolower($pwd) == strtolower($input));"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get domain URL"+"\r\n"+"function ewr_DomainUrl() {"+"\r\n"+"	$sUrl = \"http\";"+"\r\n"+"	$bSSL = (ewr_ServerVar(\"HTTPS\") <> \"\" && ewr_ServerVar(\"HTTPS\") <> \"off\");"+"\r\n"+"	$sPort = strval(ewr_ServerVar(\"SERVER_PORT\"));"+"\r\n"+"	$defPort = ($bSSL) ? \"443\" : \"80\";"+"\r\n"+"	$sPort = ($sPort == $defPort) ? \"\" : \":$sPort\";"+"\r\n"+"	$sUrl .= ($bSSL) ? \"s\" : \"\";"+"\r\n"+"	$sUrl .= \"://\";"+"\r\n"+"	$sUrl .= ewr_ServerVar(\"SERVER_NAME\") . $sPort;"+"\r\n"+"	return $sUrl;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get full URL"+"\r\n"+"function ewr_FullUrl() {"+"\r\n"+"	return ewr_DomainUrl() . ewr_ScriptName();"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get current URL"+"\r\n"+"function ewr_CurrentUrl() {"+"\r\n"+"	$s = ewr_ScriptName();"+"\r\n"+"	$q = ewr_ServerVar(\"QUERY_STRING\");"+"\r\n"+"	if ($q <> \"\") $s .= \"?\" . $q;"+"\r\n"+"	return $s;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert to full URL"+"\r\n"+"function ewr_ConvertFullUrl($url) {"+"\r\n"+"	if ($url == \"\") return \"\";"+"\r\n"+"	if (strpos($url, \"://\") === FALSE && strpos($url, \"\\\\\") === FALSE) {"+"\r\n"+"		$sUrl = ewr_FullUrl();"+"\r\n"+"		return substr($sUrl, 0, strrpos($sUrl, \"/\")+1) . $url;"+"\r\n"+"	} else {"+"\r\n"+"		return $url;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get relative url"+"\r\n"+"function ewr_GetUrl($url) {"+"\r\n"+"	global $EWR_RELATIVE_PATH;"+"\r\n"+"	if ($url != \"\" && strpos($url, \"://\") === FALSE && strpos($url, \"\\\\\") === FALSE && strpos($url, \"javascript:\") === FALSE) {"+"\r\n"+"		$path = \"\";"+"\r\n"+"		if (strrpos($url, \"/\") !== FALSE) {"+"\r\n"+"			$path = substr($url, 0, strrpos($url, \"/\"));"+"\r\n"+"			$url = substr($url, strrpos($url, \"/\")+1); "+"\r\n"+"		}"+"\r\n"+"		$path = ewr_PathCombine($EWR_RELATIVE_PATH, $path, FALSE);"+"\r\n"+"		if ($path <> \"\") $path = ewr_IncludeTrailingDelimiter($path, FALSE);"+"\r\n"+"		return $path . $url;"+"\r\n"+"	} else {"+"\r\n"+"		return $url;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get script name"+"\r\n"+"function ewr_ScriptName() {"+"\r\n"+"	$sn = ewr_ServerVar(\"PHP_SELF\");"+"\r\n"+"	if (empty($sn)) $sn = ewr_ServerVar(\"SCRIPT_NAME\");"+"\r\n"+"	if (empty($sn)) $sn = ewr_ServerVar(\"ORIG_PATH_INFO\");"+"\r\n"+"	if (empty($sn)) $sn = ewr_ServerVar(\"ORIG_SCRIPT_NAME\");"+"\r\n"+"	if (empty($sn)) $sn = ewr_ServerVar(\"REQUEST_URI\");"+"\r\n"+"	if (empty($sn)) $sn = ewr_ServerVar(\"URL\");"+"\r\n"+"	if (empty($sn)) $sn = \"UNKNOWN\";"+"\r\n"+"	return $sn;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Remove XSS"+"\r\n"+"function ewr_RemoveXSS($val) {"+"\r\n"+"	// Remove all non-printable characters. CR(0a) and LF(0b) and TAB(9) are allowed"+"\r\n"+"	// This prevents some character re-spacing such as <java\\0script>"+"\r\n"+"	// Note that you have to handle splits with \\n, \\r, and \\t later since they *are* allowed in some inputs"+"\r\n"+"	$val = preg_replace('/([\\x00-\\x08][\\x0b-\\x0c][\\x0e-\\x20])/', '', $val);"+"\r\n"+"	"+"\r\n"+"	// Straight replacements, the user should never need these since they're normal characters"+"\r\n"+"	// This prevents like <IMG SRC=&#X40&#X61&#X76&#X61&#X73&#X63&#X72&#X69&#X70&#X74&#X3A&#X61&#X6C&#X65&#X72&#X74&#X28&#X27&#X58&#X53&#X53&#X27&#X29>"+"\r\n"+"	$search = 'abcdefghijklmnopqrstuvwxyz';"+"\r\n"+"	$search .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';"+"\r\n"+"	$search .= '1234567890!@#$%^&*()';"+"\r\n"+"	$search .= '~`\";:?+/={}[]-_|\\'\\\\';"+"\r\n"+"	for ($i = 0; $i < strlen($search); $i++) {"+"\r\n"+"		// ;? matches the ;, which is optional"+"\r\n"+"		// 0{0,7} matches any padded zeros, which are optional and go up to 8 chars"+"\r\n"+"	"+"\r\n"+"		// &#x0040 @ search for the hex values"+"\r\n"+"		$val = preg_replace('/(&#[x|X]0{0,8}'.dechex(ord($search[$i])).';?)/i', $search[$i], $val); // With a ;"+"\r\n"+"		// &#00064 @ 0{0,7} matches '0' zero to seven times"+"\r\n"+"		$val = preg_replace('/(&#0{0,8}'.ord($search[$i]).';?)/', $search[$i], $val); // With a ;"+"\r\n"+"	}"+"\r\n"+"	"+"\r\n"+"	// Now the only remaining whitespace attacks are \\t, \\n, and \\r "+"\r\n"+"	$ra = $GLOBALS[\"EWR_XSS_ARRAY\"]; // Note: Customize $EWR_XSS_ARRAY in ewrcfg*.php"+"\r\n"+"	"+"\r\n"+"	$found = true; // Keep replacing as long as the previous round replaced something"+"\r\n"+"	while ($found == true) {"+"\r\n"+"		$val_before = $val;"+"\r\n"+"		for ($i = 0; $i < sizeof($ra); $i++) {"+"\r\n"+"			$pattern = '/';"+"\r\n"+"			for ($j = 0; $j < strlen($ra[$i]); $j++) { "+"\r\n"+"				if ($j > 0) {"+"\r\n"+"					$pattern .= '('; "+"\r\n"+"					$pattern .= '(&#[x|X]0{0,8}([9][a][b]);?)?'; "+"\r\n"+"					$pattern .= '|(&#0{0,8}([9][10][13]);?)?'; "+"\r\n"+"					$pattern .= ')?'; "+"\r\n"+"				}"+"\r\n"+"				$pattern .= $ra[$i][$j];"+"\r\n"+"			}"+"\r\n"+"			$pattern .= '/i';"+"\r\n"+"			$replacement = substr($ra[$i], 0, 2).'<x>'.substr($ra[$i], 2); // Add in <> to nerf the tag"+"\r\n"+"			$val = preg_replace($pattern, $replacement, $val); // Filter out the hex tags"+"\r\n"+"			if ($val_before == $val) {"+"\r\n"+"				// No replacements were made, so exit the loop"+"\r\n"+"				$found = false;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	return $val;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check token"+"\r\n"+"function ewr_CheckToken($token) {"+"\r\n"+"	return (time() - intval(ewr_Decrypt($token))) < intval(ini_get(\"session.gc_maxlifetime\"));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Create token"+"\r\n"+"function ewr_CreateToken() {"+"\r\n"+"	return ewr_Encrypt(time());"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Load selection from a filter clause"+"\r\n"+"function ewr_LoadSelectionFromFilter(&$fld, $filter, &$sel, $af = \"\") {"+"\r\n"+"	$sel = \"\";"+"\r\n"+"	if ($af <> \"\") { // Set up advanced filter first"+"\r\n"+"		$ar = is_array($af) ? $af : array($af);"+"\r\n"+"		$cnt = count($ar);"+"\r\n"+"		for ($i = 0; $i < $cnt; $i++) {"+"\r\n"+"			if (substr($ar[$i],0,2) == \"@@\") {"+"\r\n"+"				if (!is_array($sel))"+"\r\n"+"					$sel = array();"+"\r\n"+"				$sel[] = $ar[$i];"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	if ($filter <> \"\") {"+"\r\n"+"		$sSql = ewr_BuildReportSql($fld->SqlSelect, \"\", \"\", \"\", $fld->SqlOrderBy, $filter, \"\");"+"\r\n"+"		ewr_LoadArrayFromSql($sSql, $sel);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Load drop down list"+"\r\n"+"function ewr_LoadDropDownList(&$list, $val) {"+"\r\n"+"	if (is_array($val)) {"+"\r\n"+"		$ar = $val;"+"\r\n"+"	} elseif ($val <> EWR_INIT_VALUE && $val <> EWR_ALL_VALUE && $val <> \"\") {"+"\r\n"+"		$ar = array($val);"+"\r\n"+"	} else {"+"\r\n"+"		$ar = array();"+"\r\n"+"	}"+"\r\n"+"	$list = array();"+"\r\n"+"	foreach ($ar as $v) {"+"\r\n"+"		if ($v <> EWR_INIT_VALUE && $v <> \"\" && substr($v,0,2) <> \"@@\")"+"\r\n"+"			$list[] = $v;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Load selection list"+"\r\n"+"function ewr_LoadSelectionList(&$list, $val) {"+"\r\n"+"	if (is_array($val)) {"+"\r\n"+"		$ar = $val;"+"\r\n"+"	} elseif ($val <> EWR_INIT_VALUE && $val <> \"\") {"+"\r\n"+"		$ar = array($val);"+"\r\n"+"	} else {"+"\r\n"+"		$ar = array();"+"\r\n"+"	}"+"\r\n"+"	$list = array();"+"\r\n"+"	foreach ($ar as $v) {"+"\r\n"+"		if ($v == EWR_ALL_VALUE) {"+"\r\n"+"			$list = EWR_INIT_VALUE;"+"\r\n"+"			return;"+"\r\n"+"		} elseif ($v <> EWR_INIT_VALUE && $v <> \"\") {"+"\r\n"+"			$list[] = $v;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	if (count($list) == 0)"+"\r\n"+"		$list = EWR_INIT_VALUE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get extended filter"+"\r\n"+"function ewr_GetExtendedFilter(&$fld, $Default = FALSE) {"+"\r\n"+"	$FldName = $fld->FldName;"+"\r\n"+"	$FldExpression = $fld->FldExpression;"+"\r\n"+"	$FldDataType = $fld->FldDataType;"+"\r\n"+"	$FldDateTimeFormat = $fld->FldDateTimeFormat;"+"\r\n"+"	$FldVal1 = ($Default) ? $fld->DefaultSearchValue : $fld->SearchValue;"+"\r\n"+"	if (ewr_IsFloatFormat($fld->FldType)) $FldVal1 = ewr_StrToFloat($FldVal1);"+"\r\n"+"	$FldOpr1 = ($Default) ? $fld->DefaultSearchOperator : $fld->SearchOperator;"+"\r\n"+"	$FldCond = ($Default) ? $fld->DefaultSearchCondition : $fld->SearchCondition;"+"\r\n"+"	$FldVal2 = ($Default) ? $fld->DefaultSearchValue2 : $fld->SearchValue2;"+"\r\n"+"	if (ewr_IsFloatFormat($fld->FldType)) $FldVal2 = ewr_StrToFloat($FldVal2);"+"\r\n"+"	$FldOpr2 = ($Default) ? $fld->DefaultSearchOperator2 : $fld->SearchOperator2;"+"\r\n"+"	$sWrk = \"\";"+"\r\n"+"	$FldOpr1 = strtoupper(trim($FldOpr1));"+"\r\n"+"	if ($FldOpr1 == \"\") $FldOpr1 = \"=\";"+"\r\n"+"	$FldOpr2 = strtoupper(trim($FldOpr2));"+"\r\n"+"	if ($FldOpr2 == \"\") $FldOpr2 = \"=\";"+"\r\n"+"	$wrkFldVal1 = $FldVal1;"+"\r\n"+"	$wrkFldVal2 = $FldVal2;"+"\r\n"+"	if ($FldDataType == EWR_DATATYPE_BOOLEAN) {"+"\r\n"+"		if (EWR_IS_MSACCESS) {"+"\r\n"+"			if ($wrkFldVal1 <> \"\") $wrkFldVal1 = ($wrkFldVal1 == \"1\") ? \"True\" : \"False\";"+"\r\n"+"			if ($wrkFldVal2 <> \"\") $wrkFldVal2 = ($wrkFldVal2 == \"1\") ? \"True\" : \"False\";"+"\r\n"+"		} else {"+"\r\n"+"			//if ($wrkFldVal1 <> \"\") $wrkFldVal1 = ($wrkFldVal1 == \"1\") ? EWR_TRUE_STRING : EWR_FALSE_STRING;"+"\r\n"+"			//if ($wrkFldVal2 <> \"\") $wrkFldVal2 = ($wrkFldVal2 == \"1\") ? EWR_TRUE_STRING : EWR_FALSE_STRING;"+"\r\n"+"			if ($wrkFldVal1 <> \"\") $wrkFldVal1 = ($wrkFldVal1 == \"1\") ? \"1\" : \"0\";"+"\r\n"+"			if ($wrkFldVal2 <> \"\") $wrkFldVal2 = ($wrkFldVal2 == \"1\") ? \"1\" : \"0\";"+"\r\n"+"		}"+"\r\n"+"	} elseif ($FldDataType == EWR_DATATYPE_DATE) {"+"\r\n"+"		if ($wrkFldVal1 <> \"\") $wrkFldVal1 = ewr_UnFormatDateTime($wrkFldVal1, $FldDateTimeFormat);"+"\r\n"+"		if ($wrkFldVal2 <> \"\") $wrkFldVal2 = ewr_UnFormatDateTime($wrkFldVal2, $FldDateTimeFormat);"+"\r\n"+"	}"+"\r\n"+"	if ($FldOpr1 == \"BETWEEN\") {"+"\r\n"+"		$IsValidValue = ($FldDataType <> EWR_DATATYPE_NUMBER ||"+"\r\n"+"			($FldDataType == EWR_DATATYPE_NUMBER && is_numeric($wrkFldVal1) && is_numeric($wrkFldVal2)));"+"\r\n"+"		if ($wrkFldVal1 <> \"\" && $wrkFldVal2 <> \"\" && $IsValidValue)"+"\r\n"+"			$sWrk = $FldExpression . \" BETWEEN \" . ewr_QuotedValue($wrkFldVal1, $FldDataType) ."+"\r\n"+"				\" AND \" . ewr_QuotedValue($wrkFldVal2, $FldDataType);"+"\r\n"+"	} else {"+"\r\n"+"		// Handle first value"+"\r\n"+"		if ($FldVal1 == EWR_NULL_VALUE || $FldOpr1 == \"IS NULL\") {"+"\r\n"+"			$sWrk = $FldExpression . \" IS NULL\";"+"\r\n"+"		} elseif ($FldVal1 == EWR_NOT_NULL_VALUE || $FldOpr1 == \"IS NOT NULL\") {"+"\r\n"+"			$sWrk = $FldExpression . \" IS NOT NULL\";"+"\r\n"+"		} else {"+"\r\n"+"			$IsValidValue = ($FldDataType <> EWR_DATATYPE_NUMBER ||"+"\r\n"+"				($FldDataType == EWR_DATATYPE_NUMBER && is_numeric($wrkFldVal1)));"+"\r\n"+"			if ($wrkFldVal1 <> \"\" && $IsValidValue && ewr_IsValidOpr($FldOpr1, $FldDataType))"+"\r\n"+"				$sWrk = $FldExpression . ewr_FilterString($FldOpr1, $wrkFldVal1, $FldDataType);"+"\r\n"+"		}"+"\r\n"+"		// Handle second value"+"\r\n"+"		$sWrk2 = \"\";"+"\r\n"+"		if ($FldVal2 == EWR_NULL_VALUE || $FldOpr2 == \"IS NULL\") {"+"\r\n"+"			$sWrk2 = $FldExpression . \" IS NULL\";"+"\r\n"+"		} elseif ($FldVal2 == EWR_NOT_NULL_VALUE || $FldOpr2 == \"IS NOT NULL\") {"+"\r\n"+"			$sWrk2 = $FldExpression . \" IS NOT NULL\";"+"\r\n"+"		} else {"+"\r\n"+"			$IsValidValue = ($FldDataType <> EWR_DATATYPE_NUMBER ||"+"\r\n"+"				($FldDataType == EWR_DATATYPE_NUMBER && is_numeric($wrkFldVal2)));"+"\r\n"+"			if ($wrkFldVal2 <> \"\" && $IsValidValue && ewr_IsValidOpr($FldOpr2, $FldDataType))"+"\r\n"+"				$sWrk2 = $FldExpression . ewr_FilterString($FldOpr2, $wrkFldVal2, $FldDataType);"+"\r\n"+"		}"+"\r\n"+"		// Combine SQL"+"\r\n"+"		if ($sWrk2 <> \"\") {"+"\r\n"+"			if ($sWrk <> \"\")"+"\r\n"+"				$sWrk = \"(\" . $sWrk . \" \" . (($FldCond == \"OR\") ? \"OR\" : \"AND\") . \" \" . $sWrk2 . \")\";"+"\r\n"+"			else"+"\r\n"+"				$sWrk = $sWrk2;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	return $sWrk;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Return search string"+"\r\n"+"function ewr_FilterString($FldOpr, $FldVal, $FldType) {"+"\r\n"+"	if ($FldVal == EWR_NULL_VALUE || $FldOpr == \"IS NULL\") {"+"\r\n"+"		return \" IS NULL\";"+"\r\n"+"	} elseif ($FldVal == EWR_NOT_NULL_VALUE || $FldOpr == \"IS NOT NULL\") {"+"\r\n"+"		return \" IS NOT NULL\";"+"\r\n"+"	} elseif ($FldOpr == \"LIKE\") {"+"\r\n"+"		return ewr_Like(ewr_QuotedValue(\"%$FldVal%\", $FldType));"+"\r\n"+"	} elseif ($FldOpr == \"NOT LIKE\") {"+"\r\n"+"		return \" NOT \" . ewr_Like(ewr_QuotedValue(\"%$FldVal%\", $FldType));"+"\r\n"+"	} elseif ($FldOpr == \"STARTS WITH\") {"+"\r\n"+"		return ewr_Like(ewr_QuotedValue(\"$FldVal%\", $FldType));"+"\r\n"+"	} elseif ($FldOpr == \"ENDS WITH\") {"+"\r\n"+"		return ewr_Like(ewr_QuotedValue(\"%$FldVal\", $FldType));"+"\r\n"+"	} else {"+"\r\n"+"		return \" $FldOpr \" . ewr_QuotedValue($FldVal, $FldType);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Append like operator"+"\r\n"+"function ewr_Like($pat) {"+"\r\n"+"";
ewAr[167] = ""+"\r\n"+"	return ((EWR_USE_ILIKE_FOR_POSTGRESQL) ? \" ILIKE \" : \" LIKE \") . $pat;"+"\r\n"+"";
ewAr[168] = ""+"\r\n"+"	if (EWR_LIKE_COLLATION_FOR_MYSQL <> \"\") {"+"\r\n"+"		return \" LIKE \" . $pat . \" COLLATE \" . EWR_LIKE_COLLATION_FOR_MYSQL;"+"\r\n"+"	} else {"+"\r\n"+"		return \" LIKE \" . $pat;"+"\r\n"+"	}"+"\r\n"+"";
ewAr[169] = ""+"\r\n"+"	if (EWR_LIKE_COLLATION_FOR_MSSQL <> \"\") {"+"\r\n"+"		return  \" COLLATE \" . EWR_LIKE_COLLATION_FOR_MSSQL . \" LIKE \" . $pat;"+"\r\n"+"	} else {"+"\r\n"+"		return \" LIKE \" . $pat;"+"\r\n"+"	}"+"\r\n"+"";
ewAr[170] = ""+"\r\n"+"	return \" LIKE \" . $pat;"+"\r\n"+"";
ewAr[171] = ""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Return date search string"+"\r\n"+"function ewr_DateFilterString($FldExpr, $FldOpr, $FldVal, $FldType) {"+"\r\n"+"	if ($FldOpr == \"Year\" && $FldVal <> \"\") { // Year filter"+"\r\n"+"		return str_replace(\"%s\", $FldExpr, \"";
ewAr[172] = "\") . \" = \" . $FldVal;"+"\r\n"+"	} else {"+"\r\n"+"		$wrkVal1 = ewr_DateVal($FldOpr, $FldVal, 1);"+"\r\n"+"		$wrkVal2 = ewr_DateVal($FldOpr, $FldVal, 2);"+"\r\n"+"		if ($wrkVal1 <> \"\" && $wrkVal2 <> \"\") {"+"\r\n"+"			return $FldExpr . \" BETWEEN \" . ewr_QuotedValue($wrkVal1, $FldType) . \" AND \" . ewr_QuotedValue($wrkVal2, $FldType);"+"\r\n"+"		} else {"+"\r\n"+"			return \"\";"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * Validation functions"+"\r\n"+" */"+"\r\n"+""+"\r\n"+"// Check date format"+"\r\n"+"// Format: std/stdshort/us/usshort/euro/euroshort"+"\r\n"+"function ewr_CheckDateEx($value, $format, $sep) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	while (strpos($value, \"  \") !== FALSE)"+"\r\n"+"		$value = str_replace(\"  \", \" \", $value);"+"\r\n"+"	$value = trim($value);"+"\r\n"+"	$arDT = explode(\" \", $value);"+"\r\n"+"	if (count($arDT) > 0) {"+"\r\n"+"		if (preg_match('/^([0-9]{4})-([0][1-9]|[1][0-2])-([0][1-9]|[1|2][0-9]|[3][0|1])$/', $arDT[0], $matches)) { // Accept yyyy-mm-dd"+"\r\n"+"			$sYear = $matches[1];"+"\r\n"+"			$sMonth = $matches[2];"+"\r\n"+"			$sDay = $matches[3];"+"\r\n"+"		} else {"+"\r\n"+"			$wrksep = \"\\\\$sep\";"+"\r\n"+"			switch ($format) {"+"\r\n"+"				case \"std\":"+"\r\n"+"					$pattern = '/^([0-9]{4})' . $wrksep . '([0]?[1-9]|[1][0-2])' . $wrksep . '([0]?[1-9]|[1|2][0-9]|[3][0|1])$/';"+"\r\n"+"					break;"+"\r\n"+"				case \"stdshort\":"+"\r\n"+"					$pattern = '/^([0-9]{2})' . $wrksep . '([0]?[1-9]|[1][0-2])' . $wrksep . '([0]?[1-9]|[1|2][0-9]|[3][0|1])$/';"+"\r\n"+"					break;"+"\r\n"+"				case \"us\":"+"\r\n"+"					$pattern = '/^([0]?[1-9]|[1][0-2])' . $wrksep . '([0]?[1-9]|[1|2][0-9]|[3][0|1])' . $wrksep . '([0-9]{4})$/';"+"\r\n"+"					break;"+"\r\n"+"				case \"usshort\":"+"\r\n"+"					$pattern = '/^([0]?[1-9]|[1][0-2])' . $wrksep . '([0]?[1-9]|[1|2][0-9]|[3][0|1])' . $wrksep . '([0-9]{2})$/';"+"\r\n"+"					break;"+"\r\n"+"				case \"euro\":"+"\r\n"+"					$pattern = '/^([0]?[1-9]|[1|2][0-9]|[3][0|1])' . $wrksep . '([0]?[1-9]|[1][0-2])' . $wrksep . '([0-9]{4})$/';"+"\r\n"+"					break;"+"\r\n"+"				case \"euroshort\":"+"\r\n"+"					$pattern = '/^([0]?[1-9]|[1|2][0-9]|[3][0|1])' . $wrksep . '([0]?[1-9]|[1][0-2])' . $wrksep . '([0-9]{2})$/';"+"\r\n"+"					break;"+"\r\n"+"			}"+"\r\n"+"			if (!preg_match($pattern, $arDT[0])) return FALSE;"+"\r\n"+"			$arD = explode($sep, $arDT[0]); // Change EWR_DATE_SEPARATOR to $sep"+"\r\n"+"			switch ($format) {"+"\r\n"+"				case \"std\":"+"\r\n"+"				case \"stdshort\":"+"\r\n"+"					$sYear = ewr_UnformatYear($arD[0]);"+"\r\n"+"					$sMonth = $arD[1];"+"\r\n"+"					$sDay = $arD[2];"+"\r\n"+"					break;"+"\r\n"+"				case \"us\":"+"\r\n"+"				case \"usshort\":"+"\r\n"+"					$sYear = ewr_UnformatYear($arD[2]);"+"\r\n"+"					$sMonth = $arD[0];"+"\r\n"+"					$sDay = $arD[1];"+"\r\n"+"					break;"+"\r\n"+"				case \"euro\":"+"\r\n"+"				case \"euroshort\":"+"\r\n"+"					$sYear = ewr_UnformatYear($arD[2]);"+"\r\n"+"					$sMonth = $arD[1];"+"\r\n"+"					$sDay = $arD[0];"+"\r\n"+"					break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		if (!ewr_CheckDay($sYear, $sMonth, $sDay)) return FALSE;"+"\r\n"+"	}"+"\r\n"+"	if (count($arDT) > 1 && !ewr_CheckTime($arDT[1])) return FALSE;"+"\r\n"+"	return TRUE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Unformat 2 digit year to 4 digit year"+"\r\n"+"function ewr_UnformatYear($yr) {"+"\r\n"+"	if (strlen($yr) == 2) {"+"\r\n"+"		if ($yr > EWR_UNFORMAT_YEAR)"+"\r\n"+"			return \"19\" . $yr;"+"\r\n"+"		else"+"\r\n"+"			return \"20\" . $yr;"+"\r\n"+"	} else {"+"\r\n"+"		return $yr;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check Date format (yyyy/mm/dd)"+"\r\n"+"function ewr_CheckDate($value) {"+"\r\n"+"	return ewr_CheckDateEx($value, \"std\", EWR_DATE_SEPARATOR);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check Date format (yy/mm/dd)"+"\r\n"+"function ewr_CheckShortDate($value) {"+"\r\n"+"	return ewr_CheckDateEx($value, \"stdshort\", EWR_DATE_SEPARATOR);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check US Date format (mm/dd/yyyy)"+"\r\n"+"function ewr_CheckUSDate($value) {"+"\r\n"+"	return ewr_CheckDateEx($value, \"us\", EWR_DATE_SEPARATOR);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check US Date format (mm/dd/yy)"+"\r\n"+"function ewr_CheckShortUSDate($value) {"+"\r\n"+"	return ewr_CheckDateEx($value, \"usshort\", EWR_DATE_SEPARATOR);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check Euro Date format (dd/mm/yyyy)"+"\r\n"+"function ewr_CheckEuroDate($value) {"+"\r\n"+"	return ewr_CheckDateEx($value, \"euro\", EWR_DATE_SEPARATOR);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check Euro Date format (dd/mm/yy)"+"\r\n"+"function ewr_CheckShortEuroDate($value) {"+"\r\n"+"	return ewr_CheckDateEx($value, \"euroshort\", EWR_DATE_SEPARATOR);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check day"+"\r\n"+"function ewr_CheckDay($checkYear, $checkMonth, $checkDay) {"+"\r\n"+"	$maxDay = 31;"+"\r\n"+"	if ($checkMonth == 4 || $checkMonth == 6 ||	$checkMonth == 9 || $checkMonth == 11) {"+"\r\n"+"		$maxDay = 30;"+"\r\n"+"	} elseif ($checkMonth == 2)	{"+"\r\n"+"		if ($checkYear % 4 > 0) {"+"\r\n"+"			$maxDay = 28;"+"\r\n"+"		} elseif ($checkYear % 100 == 0 && $checkYear % 400 > 0) {"+"\r\n"+"			$maxDay = 28;"+"\r\n"+"		} else {"+"\r\n"+"			$maxDay = 29;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"	return ewr_CheckRange($checkDay, 1, $maxDay);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check integer"+"\r\n"+"function ewr_CheckInteger($value) {"+"\r\n"+"	global $EWR_DEFAULT_DECIMAL_POINT;"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	if (strpos($value, $EWR_DEFAULT_DECIMAL_POINT) !== FALSE)"+"\r\n"+"		return FALSE;"+"\r\n"+"	return ewr_CheckNumber($value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check number"+"\r\n"+"function ewr_CheckNumber($value) {"+"\r\n"+"	global $EWR_DEFAULT_THOUSANDS_SEP, $EWR_DEFAULT_DECIMAL_POINT;"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	$pat = '/^[+-]?(\\d{1,3}(' . (($EWR_DEFAULT_THOUSANDS_SEP) ? '\\\\' . $EWR_DEFAULT_THOUSANDS_SEP . '?' : '') . '\\d{3})*(\\\\' ."+"\r\n"+"		$EWR_DEFAULT_DECIMAL_POINT . '\\d+)?|\\\\' . $EWR_DEFAULT_DECIMAL_POINT . '\\d+)$/';"+"\r\n"+"	return preg_match($pat, $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check range"+"\r\n"+"function ewr_CheckRange($value, $min, $max) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	if (is_int($min) || is_float($min) || is_int($max) || is_float($max)) { // Number"+"\r\n"+"		if (ewr_CheckNumber($value))"+"\r\n"+"			$value = floatval(ewr_StrToFloat($value));"+"\r\n"+"	}"+"\r\n"+"	if ((!is_null($min) && $value < $min) || (!is_null($max) && $value > $max))"+"\r\n"+"		return FALSE;"+"\r\n"+"	return TRUE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check time"+"\r\n"+"function ewr_CheckTime($value) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	return preg_match('/^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/', $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check US phone number"+"\r\n"+"function ewr_CheckPhone($value) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	return preg_match('/^\\(\\d{3}\\) ?\\d{3}( |-)?\\d{4}|^\\d{3}( |-)?\\d{3}( |-)?\\d{4}$/', $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check US zip code"+"\r\n"+"function ewr_CheckZip($value) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	return preg_match('/^\\d{5}$|^\\d{5}-\\d{4}$/', $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check credit card"+"\r\n"+"function ewr_CheckCreditCard($value, $type=\"\") {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	$creditcard = array(\"visa\" => \"/^4\\d{3}[ -]?\\d{4}[ -]?\\d{4}[ -]?\\d{4}$/\","+"\r\n"+"		\"mastercard\" => \"/^5[1-5]\\d{2}[ -]?\\d{4}[ -]?\\d{4}[ -]?\\d{4}$/\","+"\r\n"+"		\"discover\" => \"/^6011[ -]?\\d{4}[ -]?\\d{4}[ -]?\\d{4}$/\","+"\r\n"+"		\"amex\" => \"/^3[4,7]\\d{13}$/\","+"\r\n"+"		\"diners\" => \"/^3[0,6,8]\\d{12}$/\","+"\r\n"+"		\"bankcard\" => \"/^5610[ -]?\\d{4}[ -]?\\d{4}[ -]?\\d{4}$/\","+"\r\n"+"		\"jcb\" => \"/^[3088|3096|3112|3158|3337|3528]\\d{12}$/\","+"\r\n"+"		\"enroute\" => \"/^[2014|2149]\\d{11}$/\","+"\r\n"+"		\"switch\" => \"/^[4903|4911|4936|5641|6333|6759|6334|6767]\\d{12}$/\");"+"\r\n"+"	if (empty($type))	{"+"\r\n"+"		$match = FALSE;"+"\r\n"+"		foreach ($creditcard as $type => $pattern) {"+"\r\n"+"			if (@preg_match($pattern, $value) == 1) {"+"\r\n"+"				$match = TRUE;"+"\r\n"+"				break;"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"		return ($match) ? ewr_CheckSum($value) : FALSE;"+"\r\n"+"	}	else {"+"\r\n"+"		if (!preg_match($creditcard[strtolower(trim($type))], $value)) return FALSE;"+"\r\n"+"		return ewr_CheckSum($value);"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check sum"+"\r\n"+"function ewr_CheckSum($value) {"+"\r\n"+"	$value = str_replace(array('-',' '), array('',''), $value);"+"\r\n"+"	$checksum = 0;"+"\r\n"+"	for ($i=(2-(strlen($value) % 2)); $i<=strlen($value); $i+=2)"+"\r\n"+"		$checksum += (int)($value[$i-1]);"+"\r\n"+"  for ($i=(strlen($value)%2)+1; $i <strlen($value); $i+=2) {"+"\r\n"+"	  $digit = (int)($value[$i-1]) * 2;"+"\r\n"+"		$checksum += ($digit < 10) ? $digit : ($digit-9);"+"\r\n"+"  }"+"\r\n"+"	return ($checksum % 10 == 0);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check US social security number"+"\r\n"+"function ewr_CheckSSC($value) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	return preg_match('/^(?!000)([0-6]\\d{2}|7([0-6]\\d|7[012]))([ -]?)(?!00)\\d\\d\\3(?!0000)\\d{4}$/', $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check emails"+"\r\n"+"function ewr_CheckEmailList($value, $email_cnt) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	$emailList = str_replace(\",\", \";\", $value);"+"\r\n"+"	$arEmails = explode(\";\", $emailList);"+"\r\n"+"	$cnt = count($arEmails);"+"\r\n"+"	if ($cnt > $email_cnt && $email_cnt > 0)"+"\r\n"+"		return FALSE;"+"\r\n"+"	foreach ($arEmails as $email) {"+"\r\n"+"		if (!ewr_CheckEmail($email))"+"\r\n"+"			return FALSE;"+"\r\n"+"	}"+"\r\n"+"	return TRUE;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check email"+"\r\n"+"function ewr_CheckEmail($value) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	return preg_match('/^[\\w.%+-]+@[\\w.-]+\\.[A-Z]{2,6}$/i', trim($value));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check GUID"+"\r\n"+"function ewr_CheckGUID($value) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	$p1 = '/^\\{\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}\\}$/';"+"\r\n"+"	$p2 = '/^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$/';"+"\r\n"+"	return preg_match($p1, $value) || preg_match($p2, $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check by preg"+"\r\n"+"function ewr_CheckByRegEx($value, $pattern) {"+"\r\n"+"	if (strval($value) == \"\") return TRUE;"+"\r\n"+"	return preg_match($pattern, $value);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"/**"+"\r\n"+" * End Validation functions"+"\r\n"+" */"+"\r\n"+""+"\r\n"+"// Write the paths for config/debug only"+"\r\n"+"function ewr_WritePaths() {"+"\r\n"+"	global $EWR_ROOT_RELATIVE_PATH;"+"\r\n"+"	echo 'DOCUMENT_ROOT=' . ewr_ServerVar(\"DOCUMENT_ROOT\") . \"<br>\";"+"\r\n"+"	echo 'EWR_ROOT_RELATIVE_PATH=' . $EWR_ROOT_RELATIVE_PATH . \"<br>\";"+"\r\n"+"	echo 'ewr_AppRoot()=' . ewr_AppRoot() . \"<br>\";"+"\r\n"+"	echo 'realpath(\".\")=' . realpath(\".\") . \"<br>\";"+"\r\n"+"	echo '__FILE__=' . __FILE__ . \"<br>\";"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Upload path"+"\r\n"+"// If PhyPath is TRUE(1), return physical path on the server"+"\r\n"+"// If PhyPath is FALSE(0), return relative URL"+"\r\n"+"function ewr_UploadPathEx($PhyPath, $DestPath) {"+"\r\n"+"	global $EWR_ROOT_RELATIVE_PATH;"+"\r\n"+"	if ($PhyPath) {"+"\r\n"+"		$Path = ewr_PathCombine(ewr_AppRoot(), str_replace(\"/\", EWR_PATH_DELIMITER, $DestPath), TRUE);"+"\r\n"+"	} else {"+"\r\n"+"		$Path = ewr_ScriptName();"+"\r\n"+"		$Path = substr($Path, 0, strrpos($Path, \"/\"));"+"\r\n"+"		$Path = ewr_PathCombine($Path, $EWR_ROOT_RELATIVE_PATH, FALSE);"+"\r\n"+"		$Path = ewr_PathCombine(ewr_IncludeTrailingDelimiter($Path, FALSE), $DestPath, FALSE);"+"\r\n"+"	}"+"\r\n"+"	return ewr_IncludeTrailingDelimiter($Path, $PhyPath);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get a temp folder for temp file"+"\r\n"+"function ewr_TmpFolder() {"+"\r\n"+"	$tmpfolder = NULL;"+"\r\n"+""+"\r\n"+"	$folders = array();"+"\r\n"+""+"\r\n"+"	if (EWR_IS_WINDOWS) {"+"\r\n"+"		$folders[] = ewr_ServerVar(\"TEMP\");"+"\r\n"+"		$folders[] = ewr_ServerVar(\"TMP\");"+"\r\n"+"	} else {"+"\r\n"+"		if (EWR_UPLOAD_TMP_PATH <> \"\") $folders[] = ewr_AppRoot() . str_replace(\"/\", EWR_PATH_DELIMITER, EWR_UPLOAD_TMP_PATH);"+"\r\n"+"		$folders[] = '/tmp';"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	if (ini_get('upload_tmp_dir')) {"+"\r\n"+"		$folders[] = ini_get('upload_tmp_dir');"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	foreach ($folders as $folder) {"+"\r\n"+"		if (!$tmpfolder && is_dir($folder)) {"+"\r\n"+"			$tmpfolder = $folder;"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	//if ($tmpfolder) $tmpfolder = ewr_IncludeTrailingDelimiter($tmpfolder, TRUE);"+"\r\n"+""+"\r\n"+"	return $tmpfolder;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Field data type"+"\r\n"+"function ewr_FieldDataType($fldtype) {"+"\r\n"+"	switch ($fldtype) {"+"\r\n"+"		case 20:"+"\r\n"+"		case 3:"+"\r\n"+"		case 2:"+"\r\n"+"		case 16:"+"\r\n"+"		case 4:"+"\r\n"+"		case 5:"+"\r\n"+"		case 131:"+"\r\n"+"		case 139:"+"\r\n"+"		case 6:"+"\r\n"+"		case 17:"+"\r\n"+"		case 18:"+"\r\n"+"		case 19:"+"\r\n"+"		case 21: // Numeric"+"\r\n"+"			return EWR_DATATYPE_NUMBER;"+"\r\n"+"		case 7:"+"\r\n"+"		case 133:"+"\r\n"+"		case 135: // Date"+"\r\n"+"		case 146: // DateTiemOffset"+"\r\n"+"			return EWR_DATATYPE_DATE;"+"\r\n"+"		case 134: // Time"+"\r\n"+"		case 145: // Time"+"\r\n"+"			return EWR_DATATYPE_TIME;"+"\r\n"+"		case 201:"+"\r\n"+"		case 203: // Memo"+"\r\n"+"			return EWR_DATATYPE_MEMO;"+"\r\n"+"		case 129:"+"\r\n"+"		case 130:"+"\r\n"+"		case 200:"+"\r\n"+"		case 202: // String"+"\r\n"+"			return EWR_DATATYPE_STRING;"+"\r\n"+"		case 11: // Boolean"+"\r\n"+"			return EWR_DATATYPE_BOOLEAN;"+"\r\n"+"		case 72: // GUID"+"\r\n"+"			return EWR_DATATYPE_GUID;"+"\r\n"+"		case 128:"+"\r\n"+"		case 204:"+"\r\n"+"		case 205: // Binary"+"\r\n"+"			return EWR_DATATYPE_BLOB;"+"\r\n"+"		//case 141: // XML"+"\r\n"+"		//	return EWR_DATATYPE_XML;"+"\r\n"+"		default:"+"\r\n"+"			return EWR_DATATYPE_OTHER;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Application root"+"\r\n"+"function ewr_AppRoot() {"+"\r\n"+"	global $EWR_ROOT_RELATIVE_PATH;"+"\r\n"+""+"\r\n"+"	// 1. use root relative path"+"\r\n"+"	if ($EWR_ROOT_RELATIVE_PATH <> \"\") {"+"\r\n"+"		$Path = realpath($EWR_ROOT_RELATIVE_PATH);"+"\r\n"+"		$Path = str_replace(\"\\\\\\\\\", EWR_PATH_DELIMITER, $Path);"+"\r\n"+"	} else {"+"\r\n"+"		$Path = realpath(\".\");"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"	// 2. if empty, use the document root if available"+"\r\n"+"	if (empty($Path)) $Path = ewr_ServerVar(\"DOCUMENT_ROOT\");"+"\r\n"+""+"\r\n"+"	// 3. if empty, use current folder"+"\r\n"+"	if (empty($Path)) $Path = realpath(\".\");"+"\r\n"+""+"\r\n"+"	// 4. use custom path, uncomment the following line and enter your path"+"\r\n"+"	// E.g. $Path = 'C:\\Inetpub\\wwwroot\\MyWebRoot'; // Windows"+"\r\n"+"	//$Path = 'enter your path here';"+"\r\n"+""+"\r\n"+"	if (empty($Path)) die(\"Path of website root unknown.\");"+"\r\n"+""+"\r\n"+"	return ewr_IncludeTrailingDelimiter($Path, TRUE);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get path relative to application root"+"\r\n"+"function ewr_ServerMapPath($Path) {"+"\r\n"+"	return ewr_PathCombine(ewr_AppRoot(), $Path, TRUE);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get path relative to a base path"+"\r\n"+"function ewr_PathCombine($BasePath, $RelPath, $PhyPath) {"+"\r\n"+"	$BasePath = ewr_RemoveTrailingDelimiter($BasePath, $PhyPath);"+"\r\n"+"	if ($PhyPath) {"+"\r\n"+"		$Delimiter = EWR_PATH_DELIMITER;"+"\r\n"+"		$RelPath = str_replace('/', EWR_PATH_DELIMITER, $RelPath);"+"\r\n"+"		$RelPath = str_replace('\\\\', EWR_PATH_DELIMITER, $RelPath);"+"\r\n"+"	} else {"+"\r\n"+"		$Delimiter = '/';"+"\r\n"+"		$RelPath = str_replace('\\\\', '/', $RelPath);"+"\r\n"+"	}"+"\r\n"+"	if ($RelPath == '.' || $RelPath == '..') $RelPath .= $Delimiter;"+"\r\n"+"	$p1 = strpos($RelPath, $Delimiter);"+"\r\n"+"	$Path2 = \"\";"+"\r\n"+"	while ($p1 !== FALSE) {"+"\r\n"+"		$Path = substr($RelPath, 0, $p1 + 1);"+"\r\n"+"		if ($Path == $Delimiter || $Path == \".$Delimiter\") {"+"\r\n"+"			// Skip"+"\r\n"+"		} elseif ($Path == \"..$Delimiter\") {"+"\r\n"+"			$p2 = strrpos($BasePath, $Delimiter);"+"\r\n"+"			if ($p2 === 0) { // BasePath = \"/xxx\", cannot move up"+"\r\n"+"				$BasePath = $Delimiter;"+"\r\n"+"			} elseif ($p2 !== FALSE && substr($BasePath, -2) <> \"..\")"+"\r\n"+"				$BasePath = substr($BasePath, 0, $p2);"+"\r\n"+"			elseif ($BasePath <> \"\" && $BasePath <> \"..\")"+"\r\n"+"				$BasePath = \"\";"+"\r\n"+"			else"+"\r\n"+"				$Path2 .= \"..\" . $Delimiter;"+"\r\n"+"		} else {"+"\r\n"+"			$Path2 .= $Path;"+"\r\n"+"		}"+"\r\n"+"		$RelPath = substr($RelPath, $p1+1);"+"\r\n"+"		if ($RelPath === FALSE)"+"\r\n"+"			$RelPath = \"\";"+"\r\n"+"		$p1 = strpos($RelPath, $Delimiter);"+"\r\n"+"	}"+"\r\n"+"	return (($BasePath === \"\") ? \"\" : ewr_IncludeTrailingDelimiter($BasePath, $PhyPath)) . $Path2 . $RelPath;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Remove the last delimiter for a path"+"\r\n"+"function ewr_RemoveTrailingDelimiter($Path, $PhyPath) {"+"\r\n"+"	$Delimiter = ($PhyPath) ? EWR_PATH_DELIMITER : '/';"+"\r\n"+"	while (substr($Path, -1) == $Delimiter)"+"\r\n"+"		$Path = substr($Path, 0, strlen($Path)-1);"+"\r\n"+"	return $Path;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Include the last delimiter for a path"+"\r\n"+"function ewr_IncludeTrailingDelimiter($Path, $PhyPath) {"+"\r\n"+"	$Path = ewr_RemoveTrailingDelimiter($Path, $PhyPath);"+"\r\n"+"	$Delimiter = ($PhyPath) ? EWR_PATH_DELIMITER : '/';"+"\r\n"+"	return $Path . $Delimiter;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Create folder"+"\r\n"+"function ewr_CreateFolder($dir, $mode = 0777) {"+"\r\n"+"	return (is_dir($dir) || @mkdir($dir, $mode, TRUE));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Save file"+"\r\n"+"function ewr_SaveFile($folder, $fn, $filedata) {"+"\r\n"+"	$res = FALSE;"+"\r\n"+"	if (ewr_CreateFolder($folder)) {"+"\r\n"+"		if ($handle = fopen($folder . $fn, 'w')) { // P6"+"\r\n"+"			$res = fwrite($handle, $filedata);"+"\r\n"+"    	fclose($handle);"+"\r\n"+"		}"+"\r\n"+"		if ($res)"+"\r\n"+"			chmod($folder . $fn, EWR_UPLOADED_FILE_MODE);"+"\r\n"+"	}"+"\r\n"+"	return $res;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Init array"+"\r\n"+"function &ewr_InitArray($len, $value) {"+"\r\n"+"	if ($len > 0)"+"\r\n"+"		$ar = array_fill(0, $len, $value);"+"\r\n"+"	else"+"\r\n"+"		$ar = array();"+"\r\n"+"	return $ar;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Init 2D array"+"\r\n"+"function &ewr_Init2DArray($len1, $len2, $value) {"+"\r\n"+"	return ewr_InitArray($len1, ewr_InitArray($len2, $value));"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Function to generate random number"+"\r\n"+"function ewr_Random() {"+"\r\n"+"	return mt_rand();"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if float format"+"\r\n"+"function ewr_IsFloatFormat($FldType) {"+"\r\n"+"	return ($FldType == 4 || $FldType == 5 || $FldType == 131 || $FldType == 6);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert string to float"+"\r\n"+"function ewr_StrToFloat($v) {"+"\r\n"+"	global $EWR_DEFAULT_THOUSANDS_SEP, $EWR_DEFAULT_DECIMAL_POINT;"+"\r\n"+"	$v = str_replace(\" \", \"\", $v);"+"\r\n"+"	$v = str_replace(array($EWR_DEFAULT_THOUSANDS_SEP, $EWR_DEFAULT_DECIMAL_POINT), array(\"\", \".\"), $v);"+"\r\n"+"	return $v;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert different data type value"+"\r\n"+"function ewr_Conv($v, $t) {"+"\r\n"+""+"\r\n"+"	switch ($t) {"+"\r\n"+"	case 2:"+"\r\n"+"	case 3:"+"\r\n"+"	case 16:"+"\r\n"+"	case 17:"+"\r\n"+"	case 18:"+"\r\n"+"	case 19: //  adSmallInt/adInteger/adTinyInt/adUnsignedTinyInt/adUnsignedSmallInt"+"\r\n"+"		return (is_null($v)) ? NULL : intval($v);"+"\r\n"+"	case 4:"+"\r\n"+"	Case 5:"+"\r\n"+"	case 6:"+"\r\n"+"	case 131:"+"\r\n"+"	case 139: //  adSingle/adDouble/adCurrency/adNumeric/adVarNumeric"+"\r\n"+"		return (is_null($v)) ? NULL : (float)$v;"+"\r\n"+"	default:"+"\r\n"+"		return (is_null($v)) ? NULL : $v;"+"\r\n"+"	}"+"\r\n"+""+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Convert byte array to binary string"+"\r\n"+"function ewr_BytesToStr($bytes) {"+"\r\n"+"	$str = \"\";"+"\r\n"+"	foreach ($bytes as $byte)"+"\r\n"+"		$str .= chr($byte);"+"\r\n"+"	return $str;"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Create temp image file from binary data"+"\r\n"+"function ewr_TmpImage(&$filedata) {"+"\r\n"+"	global $gTmpImages;"+"\r\n"+"	$export = \"\";"+"\r\n"+"	if (@$_GET[\"export\"] <> \"\")"+"\r\n"+"		$export = $_GET[\"export\"];"+"\r\n"+"	elseif (@$_POST[\"export\"] <> \"\")"+"\r\n"+"		$export = $_POST[\"export\"];"+"\r\n"+"	elseif (@$_POST[\"customexport\"] <> \"\")"+"\r\n"+"		$export = $_POST[\"customexport\"];"+"\r\n"+"//  $f = tempnam(ew_TmpFolder(), \"tmp\");"+"\r\n"+"	$folder = ewr_AppRoot() . EWR_UPLOAD_DEST_PATH;"+"\r\n"+"	$f = tempnam($folder, \"tmp\");"+"\r\n"+"	$handle = fopen($f, 'w+');"+"\r\n"+"	fwrite($handle, $filedata);"+"\r\n"+"	fclose($handle);"+"\r\n"+"	$info = getimagesize($f);"+"\r\n"+"	switch ($info[2]) {"+"\r\n"+"	case 1:"+"\r\n"+"		rename($f, $f .= '.gif'); break;"+"\r\n"+"	case 2:"+"\r\n"+"		rename($f, $f .= '.jpg'); break;"+"\r\n"+"	case 3:"+"\r\n"+"		rename($f, $f .= '.png'); break;"+"\r\n"+"	case 6:"+"\r\n"+"		rename($f, $f .= '.bmp'); break;"+"\r\n"+"	default:"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+"	$tmpimage = basename($f);"+"\r\n"+"	$gTmpImages[] = $tmpimage;"+"\r\n"+"	//return ewr_TmpImageLnk($tmpimage);"+"\r\n"+"	return ewr_TmpImageLnk($tmpimage, $export);"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get temp chart image"+"\r\n"+"function ewr_TmpChartImage($id, $custom = FALSE) {"+"\r\n"+"	global $gTmpImages;"+"\r\n"+"	$exportid = \"\";"+"\r\n"+"	if (@$_GET[\"exportid\"] <> \"\")"+"\r\n"+"		$exportid = $_GET[\"exportid\"];"+"\r\n"+"	elseif (@$_POST[\"exportid\"] <> \"\")"+"\r\n"+"		$exportid = $_POST[\"exportid\"];"+"\r\n"+"	$export = \"\";"+"\r\n"+"	if ($custom)"+"\r\n"+"		$export = \"print\";"+"\r\n"+"	elseif (@$_GET[\"export\"] <> \"\")"+"\r\n"+"		$export = $_GET[\"export\"];"+"\r\n"+"	elseif (@$_POST[\"export\"] <> \"\")"+"\r\n"+"		$export = $_POST[\"export\"];"+"\r\n"+"	if ($exportid <> \"\") {"+"\r\n"+"		$file = $exportid . \"_\" . $id . \".png\"; // v8"+"\r\n"+"		$folder = ewr_AppRoot() . EWR_UPLOAD_DEST_PATH;"+"\r\n"+"		$f = $folder . $file;"+"\r\n"+"		if (file_exists($f)) {"+"\r\n"+"			$tmpimage = basename($f);"+"\r\n"+"			$gTmpImages[] = $tmpimage;"+"\r\n"+"			//return ewr_TmpImageLnk($tmpimage);"+"\r\n"+"			return ewr_TmpImageLnk($tmpimage, $export);"+"\r\n"+"		}"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Delete temp images"+"\r\n"+"function ewr_DeleteTmpImages($html = \"\") {"+"\r\n"+"	global $gTmpImages;"+"\r\n"+"	foreach ($gTmpImages as $tmpimage)"+"\r\n"+"		@unlink(ewr_AppRoot() . EWR_UPLOAD_DEST_PATH . $tmpimage);"+"\r\n"+"	// Check and remove temp images from html content (start with session id)"+"\r\n"+"	if (preg_match_all('/<img([^>]*)>/i', $html, $matches, PREG_SET_ORDER)) {"+"\r\n"+"		foreach ($matches as $match) {"+"\r\n"+"			if (preg_match('/\\s+src\\s*=\\s*[\\'\"]([\\s\\S]*?)[\\'\"]/i', $match[1], $submatches)) { // Match src='src'"+"\r\n"+"				$src = $submatches[1];"+"\r\n"+"				$exportid = session_id();"+"\r\n"+"				$src = basename($src);"+"\r\n"+"				if (substr($src,0,strlen($exportid)) == $exportid || substr($src,0,3) == \"tmp\") { // Temp image"+"\r\n"+"					@unlink(ewr_AppRoot() . EWR_UPLOAD_DEST_PATH . $src);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"		}"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get temp image link"+"\r\n"+"function ewr_TmpImageLnk($file, $lnktype = \"\") {"+"\r\n"+"	global $EWR_ROOT_RELATIVE_PATH;"+"\r\n"+"	if ($file == \"\") return \"\";"+"\r\n"+"	if ($lnktype == \"email\" || $lnktype == \"cid\") {"+"\r\n"+"		$ar = explode('.', $file);"+"\r\n"+"		$lnk = implode(\".\", array_slice($ar, 0, count($ar)-1));"+"\r\n"+"		if ($lnktype == \"email\") $lnk = \"cid:\" . $lnk;"+"\r\n"+"		return $lnk;"+"\r\n"+"	} else {"+"\r\n"+"		$fn = EWR_UPLOAD_DEST_PATH . $file;"+"\r\n"+"		if ($EWR_ROOT_RELATIVE_PATH <> \".\") $fn = $EWR_ROOT_RELATIVE_PATH . \"/\" . $fn;"+"\r\n"+"		return $fn;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check empty string"+"\r\n"+"function ewr_EmptyStr($value) {"+"\r\n"+"	$str = strval($value);"+"\r\n"+"	$str = str_replace(\"&nbsp;\", \"\", $str);"+"\r\n"+"	return (trim($str) == \"\");"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Get File View Tag"+"\r\n"+"function ewr_GetFileViewTag($fld, $fn) {"+"\r\n"+"	global $Page;"+"\r\n"+"	if (!ewr_EmptyStr($fn)) {"+"\r\n"+"		if ($Page->Export == \"word\" && !defined('EWR_USE_PHPWORD') || $Page->Export == \"excel\" && !defined('EWR_USE_PHPEXCEL')) {"+"\r\n"+"			if ($fld->FldDataType == EWR_DATATYPE_BLOB) {"+"\r\n"+"				$name = $fld->FldCaption();"+"\r\n"+"			} else {"+"\r\n"+"				$ar = parse_url($fn);"+"\r\n"+"				$name = @basename($ar[\"path\"]);"+"\r\n"+"				if (@$ar[\"query\"] <> \"\") {"+"\r\n"+"					parse_str($ar[\"query\"], $query);"+"\r\n"+"					if (@$query[\"fn\"] <> \"\")"+"\r\n"+"						$name = basename($query[\"fn\"]);"+"\r\n"+"				}"+"\r\n"+"			}"+"\r\n"+"			$fld->HrefValue = ewr_ConvertFullUrl($fn);"+"\r\n"+"			return \"<div><a\" . $fld->LinkAttributes() . \">\" . $name . \"</a></div>\";"+"\r\n"+"		} elseif ($fld->IsBlobImage || ewr_IsImageFile($fn)) {"+"\r\n"+"			if ($fld->HrefValue == \"\" && $fld->DrillDownUrl == \"\" && !$fld->UseColorbox) {"+"\r\n"+"				return \"<img class=\\\"ewImage\\\" src=\\\"\" . $fn . \"\\\" alt=\\\"\\\"\" . $fld->ViewAttributes() . \">\";"+"\r\n"+"			} else {"+"\r\n"+"				return \"<a\" . $fld->LinkAttributes() . \"><img class=\\\"ewImage\\\" src=\\\"\" . $fn . \"\\\" alt=\\\"\\\"\" . $fld->ViewAttributes() . \"></a>\";"+"\r\n"+"			}"+"\r\n"+"		} else {"+"\r\n"+"			if ($fld->FldDataType == EWR_DATATYPE_BLOB)"+"\r\n"+"				$name = $fld->FldCaption();"+"\r\n"+"			else"+"\r\n"+"				$name = basename($fn);"+"\r\n"+"			$fld->HrefValue = $fn;"+"\r\n"+"			return \"<div><a\" . $fld->LinkAttributes() . \">\" . $name . \"</a></div>\";"+"\r\n"+"		}"+"\r\n"+"	} else {"+"\r\n"+"		return \"\";"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Check if image file"+"\r\n"+"function ewr_IsImageFile($fn) {"+"\r\n"+"	if ($fn <> \"\") {"+"\r\n"+"		if (substr($fn,0,4) == \"cid:\") // Embedded image for email"+"\r\n"+"			return TRUE;"+"\r\n"+"		$ar = parse_url($fn);"+"\r\n"+"		if ($ar && array_key_exists('query', $ar)) { // Thumbnail url"+"\r\n"+" 			if ($q = parse_str($ar['query']))"+"\r\n"+"				$fn = $q['fn'];"+"\r\n"+"		}"+"\r\n"+"		$pathinfo = pathinfo($fn);"+"\r\n"+"		$ext = strtolower(@$pathinfo[\"extension\"]);"+"\r\n"+"		return in_array($ext, explode(\",\", EWR_IMAGE_ALLOWED_FILE_EXT));"+"\r\n"+"	} else {"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// HTTP request by cURL"+"\r\n"+"// Note: cURL must be enabled in PHP"+"\r\n"+"function ewr_ClientUrl($url, $postdata = \"\", $method = \"GET\") {"+"\r\n"+"	global $data;"+"\r\n"+"	if (!function_exists(\"curl_init\"))"+"\r\n"+"		die(\"cURL not installed.\");"+"\r\n"+"	$ch = curl_init();"+"\r\n"+"	$method = strtoupper($method);"+"\r\n"+"	if ($method == \"POST\") {"+"\r\n"+"		curl_setopt($ch, CURLOPT_URL, $url);"+"\r\n"+"		curl_setopt($ch, CURLOPT_POST, 1);"+"\r\n"+"		curl_setopt($ch, CURLOPT_POSTFIELDS, $postdata);"+"\r\n"+"	} elseif ($method == \"GET\") {"+"\r\n"+"		curl_setopt($ch, CURLOPT_URL, $url . \"?\" . $postdata);"+"\r\n"+"	}"+"\r\n"+"	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);"+"\r\n"+"	$res = curl_exec($ch);"+"\r\n"+"	curl_close($ch);"+"\r\n"+"	return $res;"+"\r\n"+"}"+"\r\n"+"?>"+"\r\n"+"";
ewAr[173] = ""+"\r\n"+"<?php"+"\r\n"+"/**"+"\r\n"+" * Functions for image resize"+"\r\n"+" */"+"\r\n"+" "+"\r\n"+"// Resize binary to thumbnail"+"\r\n"+"function ewr_ResizeBinary($filedata, &$width, &$height, $quality) {"+"\r\n"+"	return TRUE; // No resize"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Resize file to thumbnail file"+"\r\n"+"function ewr_ResizeFile($fn, $tn, &$width, &$height, $quality) {"+"\r\n"+"	if (file_exists($fn)) { // Copy only"+"\r\n"+"		return ($fn <> $tn) ? copy($fn, $tn) : TRUE;"+"\r\n"+"	} else {"+"\r\n"+"		return FALSE;"+"\r\n"+"	}"+"\r\n"+"}"+"\r\n"+""+"\r\n"+"// Resize file to binary"+"\r\n"+"function ewr_ResizeFileToBinary($fn, &$width, &$height, $quality) {"+"\r\n"+"	return file_get_contents($fn); // Return original file content only"+"\r\n"+"}"+"\r\n"+"?>"+"\r\n"+"";

ewSB.Append(ewAr[1]);

	// Page objects
	sPageObj = ew_PageObj();
	gsPageObj = "Page";

	// Form object
	sFormName = ew_FormObj();

	// Control type
	switch (CTRL.CtrlType.toLowerCase()) {
		case "table":
			sCtrlType = "Table";
			break;
		case "report":
			sCtrlType = "Table";
			break;
		case "other":
			sCtrlType = "Other";
			break;
		default:
			sCtrlType = "Other";
			break;
	}

	bGenCompatHeader = (PROJ.AppCompat && ew_IsNotEmpty(PROJ.AppHeader));

	// Project name and variable
	sProjName = PROJ.ProjName;
	sProjVar = PROJ.ProjVar;
	sImageFolder = ew_FolderPath("_images");

	// Date separator
	sDateSeparator = PROJ.DateSeparator;
	if (ew_IsEmpty(sDateSeparator)) sDateSeparator = "/";

	// Common files
	sFnDefault = ew_GetFileNameByCtrlID("rptdefault", false); // PR7
	var sFnHomePage = PROJ.StartPage;
	if (sFnHomePage == "") sFnHomePage = PROJ.DefaultPage;
	if (sFnHomePage == "") sFnHomePage = sFnDefault;
	sFnLogin = ew_GetFileNameByCtrlID("rptlogin", false); // PR7
	sFnLogout = ew_GetFileNameByCtrlID("rptlogout", false); // PR7

	// JavasSript message
	bUseJavaScriptMessage = PROJ.GetV("UseJavaScriptMessage");

	// Disable submit button
	bDisableButtonOnSubmit = PROJ.GetV("DisableButtonOnSubmit");
	
	// Get mobile max width
	var sVisibleMobileClass = "";
	var sHiddenMobileClass = "";
	if (PROJ.GetV("UseResponsiveLayout")) {
		sVisibleMobileClass = "visible-xs";
		sHiddenMobileClass = "hidden-xs";
	}

	// Security related
	bSecurityEnabled = !(PROJ.SecType == "None" || PROJ.SecType == "");
	bHardCodeAdmin = (PROJ.SecType == "Both" || PROJ.SecType == "Hard Code");
	var bUserTable = ew_HasUserTable();
	sSecTblVar = "";
	if (bUserTable) {
		SECTABLE = DB.Tables(PROJ.SecTbl);
		sSecTblVar = SECTABLE.TblVar;
	}
	bStaticUserLevel = (bUserTable && (!DB.UseDynamicUserLevel && ew_IsNotEmpty(DB.SecUserLevelFld)));
	bDynamicUserLevel = (bUserTable && (DB.UseDynamicUserLevel && ew_IsNotEmpty(DB.UserLevelTbl) && ew_IsNotEmpty(DB.SecUserLevelFld)));
	bUserLevel = (bStaticUserLevel || bDynamicUserLevel);
	bUserID = (bUserTable && ew_IsNotEmpty(DB.SecuUserIDFld));
	bParentUserID = (bUserID && ew_IsNotEmpty(DB.SecuParentUserIDFld));

	// Language files
	sLanguageFolder = ew_FolderPath("_language");
	if (ew_IsNotEmpty(sLanguageFolder)) sLanguageFolder += "/";
	sLanguageFiles = PROJ.LanguageFiles;
	sDefaultLanguageFile = PROJ.DefaultLanguageFile;
	if (ew_IsEmpty(sLanguageFiles)) sLanguageFiles = "english.xml";
	if (ew_IsEmpty(sDefaultLanguageFile)) sDefaultLanguageFile = "english.xml";
	bMultiLanguage = PROJ.MultiLanguage;
	if (bMultiLanguage)
		arLanguageFile = sLanguageFiles.split(",");
	else
		arLanguageFile = sDefaultLanguageFile.split(",");
		
	sSubmitButtonClass = "btn btn-primary ewButton";
	sResetButtonClass = "btn btn-default ewButton";
	sCancelButtonClass = sResetButtonClass;

	// Use place holder for textbox
	sUsePlaceHolder = PROJ.GetV("UsePlaceHolder");
	
	// Bootstrap 3 classes
	ewBootstrapLeftColumnClass = "col-sm-2";
	ewBootstrapRightColumnClass = "col-sm-10";
	ewBootstrapOffsetClass = "col-sm-offset-2 col-sm-10";
	ewBootstrapLabelClass = ewBootstrapLeftColumnClass + " control-label ewLabel";
	ewBootstrapInputClass = "form-control ewControl";

	// Cutom file relative paths
	sRelativePath = "";
	sRelativePathPrefix = "";
	sAppRootRelativePath = "";

ewSB.Append(ewAr[2]);
ewSB.Append(ewAr[3]);

	var fn = "%cls%info.php";
	// Database name
	sDbVar = DB.DBVar;
	if (PROJ.OutputNameLCase)
		sDbVar = sDbVar.toLowerCase();
	sDbHelperFile = ew_GetFileNameByCtrlID("dbhelper");

ewSB.Append(ewAr[4]);
 if (PROJ.GetV("GenDatabaseHelper")) { 
ewSB.Append(ewAr[5]);
ewSB.Append(sDbVar);
ewSB.Append(ewAr[6]);
ewSB.Append(ew_Quote(sDbHelperFile));
ewSB.Append(ewAr[7]);
 } 
ewSB.Append(ewAr[8]);
ewSB.Append(ew_Quote(fn));
ewSB.Append(ewAr[9]);
 if (PROJ.OutputNameLCase) { 
ewSB.Append(ewAr[10]);
 } 
ewSB.Append(ewAr[11]);
 if (PROJ.GetV("GenDatabaseHelper")) { 
ewSB.Append(ewAr[12]);
 } 
ewSB.Append(ewAr[13]);
ewSB.Append(PROJ.ProjID);
ewSB.Append(ewAr[14]);

		bMultiLanguage = PROJ.MultiLanguage;
		if (bMultiLanguage) {
	
ewSB.Append(ewAr[15]);

		}
	
ewSB.Append(ewAr[16]);
ewSB.Append(sFnHomePage);
ewSB.Append(ewAr[17]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Chart_Rendering")) { 
ewSB.Append(ewAr[18]);
 } 
ewSB.Append(ewAr[19]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Chart_Rendered")) { 
ewSB.Append(ewAr[20]);
 } 
ewSB.Append(ewAr[21]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Chart_DataRendered")) { 
ewSB.Append(ewAr[22]);
 } 
ewSB.Append(ewAr[23]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Chart_DataRendered")) { 
ewSB.Append(ewAr[24]);
 } 
ewSB.Append(ewAr[25]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Chart_DataRendered")) { 
ewSB.Append(ewAr[26]);
 } 
ewSB.Append(ewAr[27]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Chart_DataRendered")) { 
ewSB.Append(ewAr[28]);
 } 
ewSB.Append(ewAr[29]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Chart_DataRendered")) { 
ewSB.Append(ewAr[30]);
 } 
ewSB.Append(ewAr[31]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Chart_DataRendered")) { 
ewSB.Append(ewAr[32]);
 } 
ewSB.Append(ewAr[33]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","Chart_Rendering"));
ewSB.Append(ewAr[34]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","Chart_DataRendered"));
ewSB.Append(ewAr[35]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","Chart_Rendered"));
ewSB.Append(ewAr[36]);
 if (!bGenCompatHeader) { 
ewSB.Append(ewAr[37]);
ew_IndentWrk = "";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","Menu_Rendering"));
ewSB.Append(ewAr[38]);
ew_IndentWrk = "";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","MenuItem_Adding"));
ewSB.Append(ewAr[39]);
 } 
ewSB.Append(ewAr[40]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","User_CustomValidate")) { 
ewSB.Append(ewAr[41]);
 } 
ewSB.Append(ewAr[42]);
 if (bHardCodeAdmin) { 
ewSB.Append(ewAr[43]);
 if (bUserID) { 
ewSB.Append(ewAr[44]);
 } 
ewSB.Append(ewAr[45]);
 if (bUserLevel) { 
ewSB.Append(ewAr[46]);
 } 
ewSB.Append(ewAr[47]);
 } 
ewSB.Append(ewAr[48]);
 if (bUserTable) { 
ewSB.Append(ewAr[49]);

			FIELD = SECTABLE.Fields(PROJ.SecLoginIDFld);
			bUserNameIsNumeric = (ew_GetFieldType(FIELD.FldType) == 1);
			if (bUserNameIsNumeric) { // Numeric
		
ewSB.Append(ewAr[50]);

			}
		
ewSB.Append(ewAr[51]);

			if (PROJ.SecRegisterActivate && ew_IsNotEmpty(PROJ.SecRegisterActivateFld)) {
		
ewSB.Append(ewAr[52]);

			}
		
ewSB.Append(ewAr[53]);
ewSB.Append(ew_SQuote(PROJ.SecPasswdFld));
ewSB.Append(ewAr[54]);

			FIELD = SECTABLE.Fields(PROJ.SecLoginIDFld);
			sFld = "$rs->fields('" + ew_SQuote(PROJ.SecLoginIDFld) + "')";
		
ewSB.Append(ewAr[55]);
ewSB.Append(GetFldVal(sFld, FIELD.FldType));
ewSB.Append(ewAr[56]);

			if (bUserID) {
				FIELD = SECTABLE.Fields(DB.SecuUserIDFld);
				sFld = "$rs->fields('" + ew_SQuote(DB.SecuUserIDFld) + "')";
		
ewSB.Append(ewAr[57]);
ewSB.Append(GetFldVal(sFld, FIELD.FldType));
ewSB.Append(ewAr[58]);

			}
			if (ew_IsNotEmpty(DB.SecuParentUserIDFld)) { // Parent User ID
				FIELD = SECTABLE.Fields(DB.SecuParentUserIDFld);
				sFld = "$rs->fields('" + ew_SQuote(DB.SecuParentUserIDFld) + "')";
		
ewSB.Append(ewAr[59]);
ewSB.Append(GetFldVal(sFld, FIELD.FldType));
ewSB.Append(ewAr[60]);

			}
			if (bUserLevel) { // User Level
				FIELD = SECTABLE.Fields(DB.SecUserLevelFld);
				sFld = "$rs->fields('" + ew_SQuote(DB.SecUserLevelFld) + "')";
		
ewSB.Append(ewAr[61]);
ewSB.Append(sFld);
ewSB.Append(ewAr[62]);
ewSB.Append(GetFldVal(sFld, FIELD.FldType));
ewSB.Append(ewAr[63]);

			}
		
ewSB.Append(ewAr[64]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","User_Validated")) { 
ewSB.Append(ewAr[65]);
 } 
ewSB.Append(ewAr[66]);
 } 
ewSB.Append(ewAr[67]);
 if (bStaticUserLevel || bDynamicUserLevel) { 
ewSB.Append(ewAr[68]);
 } 
ewSB.Append(ewAr[69]);
 if (bStaticUserLevel) { 
ewSB.Append(ewAr[70]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","UserLevel_Loaded")) { 
ewSB.Append(ewAr[71]);
 } 
ewSB.Append(ewAr[72]);
 } else if (bDynamicUserLevel) { 
ewSB.Append(ewAr[73]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","UserLevel_Loaded")) { 
ewSB.Append(ewAr[74]);
 } 
ewSB.Append(ewAr[75]);
 } else { 
ewSB.Append(ewAr[76]);
 } 
ewSB.Append(ewAr[77]);
 if (bUserLevel) { 
ewSB.Append(ewAr[78]);
 } 
ewSB.Append(ewAr[79]);
 if (bUserID) { 
ewSB.Append(ewAr[80]);
 } 
ewSB.Append(ewAr[81]);
 if (bUserID) { 
ewSB.Append(ewAr[82]);
 } else { 
ewSB.Append(ewAr[83]);
 } 
ewSB.Append(ewAr[84]);

		if (bUserID) {
			// User id field
			FIELD = SECTABLE.Fields(DB.SecuUserIDFld);
			sFld = ew_FieldSqlName(FIELD);
			sFldName = FIELD.FldName;
			sFldQuoteS = FIELD.FldQuoteS;
			sFldQuoteE = FIELD.FldQuoteE;
			sFldDataType = GetFieldTypeName(FIELD.FldType);
			bFldIsNumeric = (sFldDataType == "EWR_DATATYPE_NUMBER");
			// User name field
			FIELD = SECTABLE.Fields(PROJ.SecLoginIDFld);
			sUserNameFld = ew_FieldSqlName(FIELD);
			sUserNameFldQuoteS = FIELD.FldQuoteS;
			sUserNameFldQuoteE = FIELD.FldQuoteE;
			sUserNameFldDataType = GetFieldTypeName(FIELD.FldType);
			if (bParentUserID) {
				FIELD = SECTABLE.Fields(DB.SecuParentUserIDFld);
				sParentFld = ew_FieldSqlName(FIELD);
				sParentFldName = FIELD.FldName;
			}
	
ewSB.Append(ewAr[85]);
ewSB.Append(ew_SQuote(sFldName));
ewSB.Append(ewAr[86]);
 if (bParentUserID) { 
ewSB.Append(ewAr[87]);
ewSB.Append(ew_SQuote(sParentFld));
ewSB.Append(ewAr[88]);
 } 
ewSB.Append(ewAr[89]);
ewSB.Append(ew_SQuote(sFldName));
ewSB.Append(ewAr[90]);

			if (bParentUserID) {
	
ewSB.Append(ewAr[91]);
ewSB.Append(ew_SQuote(sParentFld));
ewSB.Append(ewAr[92]);
ewSB.Append(ew_SQuote(sFldName));
ewSB.Append(ewAr[93]);

			}
	
ewSB.Append(ewAr[94]);
 if (bFldIsNumeric) { 
ewSB.Append(ewAr[95]);
 } 
ewSB.Append(ewAr[96]);
 if (bFldIsNumeric) { 
ewSB.Append(ewAr[97]);
 } 
ewSB.Append(ewAr[98]);
ewSB.Append(sFldDataType);
ewSB.Append(ewAr[99]);

		if (bParentUserID) {
	
ewSB.Append(ewAr[100]);
ewSB.Append(sFldDataType);
ewSB.Append(ewAr[101]);
ewSB.Append(sFldDataType);
ewSB.Append(ewAr[102]);
ewSB.Append(sFldDataType);
ewSB.Append(ewAr[103]);

		}
	
ewSB.Append(ewAr[104]);

		}
	
ewSB.Append(ewAr[105]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","UserID_Loading"));
ewSB.Append(ewAr[106]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","UserID_Loaded"));
ewSB.Append(ewAr[107]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","UserLevel_Loaded"));
ewSB.Append(ewAr[108]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","TablePermission_Loading"));
ewSB.Append(ewAr[109]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","TablePermission_Loaded"));
ewSB.Append(ewAr[110]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","User_CustomValidate"));
ewSB.Append(ewAr[111]);
ew_IndentWrk = "	";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","User_Validated"));
ewSB.Append(ewAr[112]);
 if (bDBMySql) { 
ewSB.Append(ewAr[113]);
 } else { 
ewSB.Append(ewAr[114]);
 } 
ewSB.Append(ewAr[115]);
 if (bDBMsAccess || bDBMsSql) { 
ewSB.Append(ewAr[116]);
 } else { 
ewSB.Append(ewAr[117]);
 } 
ewSB.Append(ewAr[118]);
 if (bDBMySql) { 
ewSB.Append(ewAr[119]);
 if (UseMysqlt()) { 
ewSB.Append(ewAr[120]);
 } else { 
ewSB.Append(ewAr[121]);
 } 
ewSB.Append(ewAr[122]);
 } else if (bDBPostgreSql) { 
ewSB.Append(ewAr[123]);
 } else if (bDBMsSql) { 
ewSB.Append(ewAr[124]);
 } else if (bDBMsAccess) { 
ewSB.Append(ewAr[125]);
 } else if (bDBOracle) { 
ewSB.Append(ewAr[126]);
 } 
ewSB.Append(ewAr[127]);
 if (bDBMySql || bDBPostgreSql || bDBOracle) { 
ewSB.Append(ewAr[128]);
 if (bDBOracle) { 
ewSB.Append(ewAr[129]);
 if (PROJ.GetV("OracleCharset") != "") { 
ewSB.Append(ewAr[130]);
ewSB.Append(ew_Quote(PROJ.GetV("OracleCharset")));
ewSB.Append(ewAr[131]);
 } else { 
ewSB.Append(ewAr[132]);
 } 
ewSB.Append(ewAr[133]);
 } 
ewSB.Append(ewAr[134]);
 } else { 
ewSB.Append(ewAr[135]);
ewSB.Append(SYSTEMFUNCTIONS.ConnectionString());
ewSB.Append(ewAr[136]);
 } 
ewSB.Append(ewAr[137]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Database_Connecting")) { 
ewSB.Append(ewAr[138]);
 } 
ewSB.Append(ewAr[139]);
 if (bDBMySql || bDBPostgreSql || bDBOracle) { 
ewSB.Append(ewAr[140]);
 } 
ewSB.Append(ewAr[141]);
 if (bDBOracle) { 
ewSB.Append(ewAr[142]);
 } 
ewSB.Append(ewAr[143]);
 if (bDBMySql || bDBPostgreSql || bDBOracle) { 
ewSB.Append(ewAr[144]);
 } 
ewSB.Append(ewAr[145]);
 if (bDBMySql) { 
ewSB.Append(ewAr[146]);
 } 
ewSB.Append(ewAr[147]);
 if (bDBMsAccess || bDBMsSql) { 
ewSB.Append(ewAr[148]);
 } 
ewSB.Append(ewAr[149]);
 if (bDBMsSql) { 
ewSB.Append(ewAr[150]);
 } 
ewSB.Append(ewAr[151]);
 if (bDBOracle) { 
ewSB.Append(ewAr[152]);
 if (PROJ.GetV("OracleCompare") != "") { 
ewSB.Append(ewAr[153]);
ewSB.Append(PROJ.GetV("OracleCompare"));
ewSB.Append(ewAr[154]);
 } 
ewSB.Append(ewAr[155]);
 if (PROJ.GetV("OracleSort") != "") { 
ewSB.Append(ewAr[156]);
ewSB.Append(PROJ.GetV("OracleSort"));
ewSB.Append(ewAr[157]);
 } 
ewSB.Append(ewAr[158]);
 } 
ewSB.Append(ewAr[159]);
 if (bDBPostgreSql) { 
ewSB.Append(ewAr[160]);
 } 
ewSB.Append(ewAr[161]);
 if (SYSTEMFUNCTIONS.ServerScriptExist("Global","Database_Connected")) { 
ewSB.Append(ewAr[162]);
 } 
ewSB.Append(ewAr[163]);
ew_IndentWrk = "";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","Database_Connecting"));
ewSB.Append(ewAr[164]);
ew_IndentWrk = "";
ewSB.Append("\r\n"+ew_IndentWrk);
ewSB.Append(SYSTEMFUNCTIONS.GetServerScript("Global","Database_Connected"));
ewSB.Append(ewAr[165]);
ewSB.Append(ew_GetFileNameByCtrlID("mobiledetect"));
ewSB.Append(ewAr[166]);
 if (bDBPostgreSql) { 
ewSB.Append(ewAr[167]);
 } else if (bDBMySql) { 
ewSB.Append(ewAr[168]);
 } else if (bDBMsSql) { 
ewSB.Append(ewAr[169]);
 } else { 
ewSB.Append(ewAr[170]);
 } 
ewSB.Append(ewAr[171]);
ewSB.Append(ew_DbGrpSql("y",0));
ewSB.Append(ewAr[172]);
ewSB.Append(ewAr[173]);

return ewSB.ToString();
 } catch(e) {
  throw e;
 }
}
